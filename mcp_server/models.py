# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:38:24+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    SecretStr,
    confloat,
    conint,
    constr,
)


class Accept(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class AccountId(RootModel[constr(pattern=r'^\d+$')]):
    root: constr(pattern=r'^\d+$')


class ActionArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:action/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:action/.*',
        max_length=256,
    )


class ActionStatus(Enum):
    Unknown = 'Unknown'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Stopping = 'Stopping'
    Stopped = 'Stopped'


class AlarmName(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=255)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=255)


class AlgorithmArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:algorithm/.*',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:algorithm/.*',
        min_length=1,
        max_length=2048,
    )


class AlgorithmImage(RootModel[constr(pattern=r'.*', max_length=255)]):
    root: constr(pattern=r'.*', max_length=255)


class AlgorithmSortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class AlgorithmStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Deleting = 'Deleting'


class AppArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:app/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:app/.*',
        max_length=256,
    )


class AppImageConfigArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:app-image-config/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:app-image-config/.*',
        max_length=256,
    )


class AppImageConfigName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class AppImageConfigSortKey(Enum):
    CreationTime = 'CreationTime'
    LastModifiedTime = 'LastModifiedTime'
    Name = 'Name'


class AppInstanceType(Enum):
    system = 'system'
    ml_t3_micro = 'ml.t3.micro'
    ml_t3_small = 'ml.t3.small'
    ml_t3_medium = 'ml.t3.medium'
    ml_t3_large = 'ml.t3.large'
    ml_t3_xlarge = 'ml.t3.xlarge'
    ml_t3_2xlarge = 'ml.t3.2xlarge'
    ml_m5_large = 'ml.m5.large'
    ml_m5_xlarge = 'ml.m5.xlarge'
    ml_m5_2xlarge = 'ml.m5.2xlarge'
    ml_m5_4xlarge = 'ml.m5.4xlarge'
    ml_m5_8xlarge = 'ml.m5.8xlarge'
    ml_m5_12xlarge = 'ml.m5.12xlarge'
    ml_m5_16xlarge = 'ml.m5.16xlarge'
    ml_m5_24xlarge = 'ml.m5.24xlarge'
    ml_m5d_large = 'ml.m5d.large'
    ml_m5d_xlarge = 'ml.m5d.xlarge'
    ml_m5d_2xlarge = 'ml.m5d.2xlarge'
    ml_m5d_4xlarge = 'ml.m5d.4xlarge'
    ml_m5d_8xlarge = 'ml.m5d.8xlarge'
    ml_m5d_12xlarge = 'ml.m5d.12xlarge'
    ml_m5d_16xlarge = 'ml.m5d.16xlarge'
    ml_m5d_24xlarge = 'ml.m5d.24xlarge'
    ml_c5_large = 'ml.c5.large'
    ml_c5_xlarge = 'ml.c5.xlarge'
    ml_c5_2xlarge = 'ml.c5.2xlarge'
    ml_c5_4xlarge = 'ml.c5.4xlarge'
    ml_c5_9xlarge = 'ml.c5.9xlarge'
    ml_c5_12xlarge = 'ml.c5.12xlarge'
    ml_c5_18xlarge = 'ml.c5.18xlarge'
    ml_c5_24xlarge = 'ml.c5.24xlarge'
    ml_p3_2xlarge = 'ml.p3.2xlarge'
    ml_p3_8xlarge = 'ml.p3.8xlarge'
    ml_p3_16xlarge = 'ml.p3.16xlarge'
    ml_p3dn_24xlarge = 'ml.p3dn.24xlarge'
    ml_g4dn_xlarge = 'ml.g4dn.xlarge'
    ml_g4dn_2xlarge = 'ml.g4dn.2xlarge'
    ml_g4dn_4xlarge = 'ml.g4dn.4xlarge'
    ml_g4dn_8xlarge = 'ml.g4dn.8xlarge'
    ml_g4dn_12xlarge = 'ml.g4dn.12xlarge'
    ml_g4dn_16xlarge = 'ml.g4dn.16xlarge'
    ml_r5_large = 'ml.r5.large'
    ml_r5_xlarge = 'ml.r5.xlarge'
    ml_r5_2xlarge = 'ml.r5.2xlarge'
    ml_r5_4xlarge = 'ml.r5.4xlarge'
    ml_r5_8xlarge = 'ml.r5.8xlarge'
    ml_r5_12xlarge = 'ml.r5.12xlarge'
    ml_r5_16xlarge = 'ml.r5.16xlarge'
    ml_r5_24xlarge = 'ml.r5.24xlarge'
    ml_g5_xlarge = 'ml.g5.xlarge'
    ml_g5_2xlarge = 'ml.g5.2xlarge'
    ml_g5_4xlarge = 'ml.g5.4xlarge'
    ml_g5_8xlarge = 'ml.g5.8xlarge'
    ml_g5_16xlarge = 'ml.g5.16xlarge'
    ml_g5_12xlarge = 'ml.g5.12xlarge'
    ml_g5_24xlarge = 'ml.g5.24xlarge'
    ml_g5_48xlarge = 'ml.g5.48xlarge'
    ml_geospatial_interactive = 'ml.geospatial.interactive'


class AppManaged(RootModel[bool]):
    root: bool


class AppName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class AppNetworkAccessType(Enum):
    PublicInternetOnly = 'PublicInternetOnly'
    VpcOnly = 'VpcOnly'


class AppSecurityGroupManagement(Enum):
    Service = 'Service'
    Customer = 'Customer'


class AppSortKey(Enum):
    CreationTime = 'CreationTime'


class AppStatus(Enum):
    Deleted = 'Deleted'
    Deleting = 'Deleting'
    Failed = 'Failed'
    InService = 'InService'
    Pending = 'Pending'


class AppType(Enum):
    JupyterServer = 'JupyterServer'
    KernelGateway = 'KernelGateway'
    TensorBoard = 'TensorBoard'
    RStudioServerPro = 'RStudioServerPro'
    RSessionGateway = 'RSessionGateway'


class ApprovalDescription(RootModel[constr(pattern=r'.*', max_length=1024)]):
    root: constr(pattern=r'.*', max_length=1024)


class ArnOrName(
    RootModel[
        constr(
            pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:[a-z\-]*\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$',
            min_length=1,
            max_length=170,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:[a-z\-]*\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$',
        min_length=1,
        max_length=170,
    )


class ArtifactArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:artifact/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:artifact/.*',
        max_length=256,
    )


class ArtifactDigest(RootModel[constr(pattern=r'^[\w:]+$')]):
    root: constr(pattern=r'^[\w:]+$')


class ArtifactSourceIdType(Enum):
    MD5Hash = 'MD5Hash'
    S3ETag = 'S3ETag'
    S3Version = 'S3Version'
    Custom = 'Custom'


class AssemblyType(Enum):
    None_ = 'None'
    Line = 'Line'


class AssociationEdgeType(Enum):
    ContributedTo = 'ContributedTo'
    AssociatedWith = 'AssociatedWith'
    DerivedFrom = 'DerivedFrom'
    Produced = 'Produced'


class AssociationEntityArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:(experiment|experiment-trial-component|artifact|action|context)/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:(experiment|experiment-trial-component|artifact|action|context)/.*',
        max_length=256,
    )


class AsyncNotificationTopicTypes(Enum):
    SUCCESS_NOTIFICATION_TOPIC = 'SUCCESS_NOTIFICATION_TOPIC'
    ERROR_NOTIFICATION_TOPIC = 'ERROR_NOTIFICATION_TOPIC'


class AthenaCatalog(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256) = Field(
        ..., description='The name of the data catalog used in Athena query execution.'
    )


class AthenaDatabase(RootModel[constr(pattern=r'.*', min_length=1, max_length=255)]):
    root: constr(pattern=r'.*', min_length=1, max_length=255) = Field(
        ..., description='The name of the database used in the Athena query execution.'
    )


class AthenaQueryString(
    RootModel[constr(pattern=r'[\s\S]+', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'[\s\S]+', min_length=1, max_length=4096) = Field(
        ..., description='The SQL query statements, to be executed.'
    )


class AthenaResultCompressionType(Enum):
    GZIP = 'GZIP'
    SNAPPY = 'SNAPPY'
    ZLIB = 'ZLIB'


class AthenaResultFormat(Enum):
    PARQUET = 'PARQUET'
    ORC = 'ORC'
    AVRO = 'AVRO'
    JSON = 'JSON'
    TEXTFILE = 'TEXTFILE'


class AthenaWorkGroup(
    RootModel[constr(pattern=r'[a-zA-Z0-9._-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9._-]+', min_length=1, max_length=128) = Field(
        ...,
        description='The name of the workgroup in which the Athena query is being started.',
    )


class AttributeName(RootModel[constr(pattern=r'.+', min_length=1, max_length=256)]):
    root: constr(pattern=r'.+', min_length=1, max_length=256)


class AttributeNames(RootModel[List[AttributeName]]):
    root: List[AttributeName] = Field(..., max_length=16)


class AuthMode(Enum):
    SSO = 'SSO'
    IAM = 'IAM'


class AutoGenerateEndpointName(RootModel[bool]):
    root: bool


class AutoMLAlgorithm(Enum):
    xgboost = 'xgboost'
    linear_learner = 'linear-learner'
    mlp = 'mlp'
    lightgbm = 'lightgbm'
    catboost = 'catboost'
    randomforest = 'randomforest'
    extra_trees = 'extra-trees'
    nn_torch = 'nn-torch'
    fastai = 'fastai'


class AutoMLAlgorithms(RootModel[List[AutoMLAlgorithm]]):
    root: List[AutoMLAlgorithm] = Field(..., max_length=11)


class AutoMLChannelType(Enum):
    training = 'training'
    validation = 'validation'


class AutoMLFailureReason(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class AutoMLJobArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:automl-job/.*',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:automl-job/.*',
        min_length=1,
        max_length=256,
    )


class AutoMLJobName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,31}', min_length=1, max_length=32
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,31}', min_length=1, max_length=32
    )


class AutoMLJobObjectiveType(Enum):
    Maximize = 'Maximize'
    Minimize = 'Minimize'


class AutoMLJobSecondaryStatus(Enum):
    Starting = 'Starting'
    AnalyzingData = 'AnalyzingData'
    FeatureEngineering = 'FeatureEngineering'
    ModelTuning = 'ModelTuning'
    MaxCandidatesReached = 'MaxCandidatesReached'
    Failed = 'Failed'
    Stopped = 'Stopped'
    MaxAutoMLJobRuntimeReached = 'MaxAutoMLJobRuntimeReached'
    Stopping = 'Stopping'
    CandidateDefinitionsGenerated = 'CandidateDefinitionsGenerated'
    GeneratingExplainabilityReport = 'GeneratingExplainabilityReport'
    Completed = 'Completed'
    ExplainabilityError = 'ExplainabilityError'
    DeployingModel = 'DeployingModel'
    ModelDeploymentError = 'ModelDeploymentError'
    GeneratingModelInsightsReport = 'GeneratingModelInsightsReport'
    ModelInsightsError = 'ModelInsightsError'
    TrainingModels = 'TrainingModels'


class AutoMLJobStatus(Enum):
    Completed = 'Completed'
    InProgress = 'InProgress'
    Failed = 'Failed'
    Stopped = 'Stopped'
    Stopping = 'Stopping'


class AutoMLJobStepMetadata(BaseModel):
    Arn: Optional[AutoMLJobArn] = None


class AutoMLMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class AutoMLMetricEnum(Enum):
    Accuracy = 'Accuracy'
    MSE = 'MSE'
    F1 = 'F1'
    F1macro = 'F1macro'
    AUC = 'AUC'
    RMSE = 'RMSE'
    MAE = 'MAE'
    R2 = 'R2'
    BalancedAccuracy = 'BalancedAccuracy'
    Precision = 'Precision'
    PrecisionMacro = 'PrecisionMacro'
    Recall = 'Recall'
    RecallMacro = 'RecallMacro'


class AutoMLMetricExtendedEnum(Enum):
    Accuracy = 'Accuracy'
    MSE = 'MSE'
    F1 = 'F1'
    F1macro = 'F1macro'
    AUC = 'AUC'
    RMSE = 'RMSE'
    MAE = 'MAE'
    R2 = 'R2'
    BalancedAccuracy = 'BalancedAccuracy'
    Precision = 'Precision'
    PrecisionMacro = 'PrecisionMacro'
    Recall = 'Recall'
    RecallMacro = 'RecallMacro'
    LogLoss = 'LogLoss'
    InferenceLatency = 'InferenceLatency'


class AutoMLMode(Enum):
    AUTO = 'AUTO'
    ENSEMBLING = 'ENSEMBLING'
    HYPERPARAMETER_TUNING = 'HYPERPARAMETER_TUNING'


class AutoMLNameContains(RootModel[constr(pattern=r'[a-zA-Z0-9\-]+', max_length=63)]):
    root: constr(pattern=r'[a-zA-Z0-9\-]+', max_length=63)


class AutoMLPartialFailureReason(BaseModel):
    PartialFailureMessage: Optional[AutoMLFailureReason] = None


class AutoMLPartialFailureReasons(RootModel[List[AutoMLPartialFailureReason]]):
    root: List[AutoMLPartialFailureReason] = Field(..., max_length=5, min_length=1)


class AutoMLProcessingUnit(Enum):
    CPU = 'CPU'
    GPU = 'GPU'


class AutoMLS3DataType(Enum):
    ManifestFile = 'ManifestFile'
    S3Prefix = 'S3Prefix'
    AugmentedManifestFile = 'AugmentedManifestFile'


class AutoMLSortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'


class AutoMLSortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class AwsManagedHumanLoopRequestSource(Enum):
    AWS_Rekognition_DetectModerationLabels_Image_V3 = (
        'AWS/Rekognition/DetectModerationLabels/Image/V3'
    )
    AWS_Textract_AnalyzeDocument_Forms_V1 = 'AWS/Textract/AnalyzeDocument/Forms/V1'


class BatchStrategy(Enum):
    MultiRecord = 'MultiRecord'
    SingleRecord = 'SingleRecord'


class BillableTimeInSeconds(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class BlockedReason(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class Boolean(RootModel[bool]):
    root: bool


class BooleanOperator(Enum):
    And = 'And'
    Or = 'Or'


class Branch(RootModel[constr(pattern=r'[^ ~^:?*\[]+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'[^ ~^:?*\[]+', min_length=1, max_length=1024)


class BucketName(
    RootModel[
        constr(
            pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', min_length=3, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', min_length=3, max_length=63
    )


class CallbackToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]+$', min_length=10, max_length=10)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]+$', min_length=10, max_length=10)


class CandidateDefinitionNotebookLocation(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class CandidateName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class CandidateSortBy(Enum):
    CreationTime = 'CreationTime'
    Status = 'Status'
    FinalObjectiveMetricValue = 'FinalObjectiveMetricValue'


class CandidateStatus(Enum):
    Completed = 'Completed'
    InProgress = 'InProgress'
    Failed = 'Failed'
    Stopped = 'Stopped'
    Stopping = 'Stopping'


class CandidateStepArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:.*/.*',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:.*/.*',
        min_length=1,
        max_length=256,
    )


class CandidateStepName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class CandidateStepType(Enum):
    AWS__SageMaker__TrainingJob = 'AWS::SageMaker::TrainingJob'
    AWS__SageMaker__TransformJob = 'AWS::SageMaker::TransformJob'
    AWS__SageMaker__ProcessingJob = 'AWS::SageMaker::ProcessingJob'


class CapacitySizeType(Enum):
    INSTANCE_COUNT = 'INSTANCE_COUNT'
    CAPACITY_PERCENT = 'CAPACITY_PERCENT'


class CapacitySizeValue(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class CaptureMode(Enum):
    Input = 'Input'
    Output = 'Output'


class CaptureOption(BaseModel):
    CaptureMode_1: CaptureMode = Field(..., alias='CaptureMode')


class CaptureOptionList(RootModel[List[CaptureOption]]):
    root: List[CaptureOption] = Field(..., max_length=2, min_length=1)


class CaptureStatus(Enum):
    Started = 'Started'
    Stopped = 'Stopped'


class Catalog(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class Cents(RootModel[conint(ge=0, le=99)]):
    root: conint(ge=0, le=99)


class CertifyForMarketplace(RootModel[bool]):
    root: bool


class ChannelName(
    RootModel[constr(pattern=r'[A-Za-z0-9\.\-_]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[A-Za-z0-9\.\-_]+', min_length=1, max_length=64)


class Cidr(
    RootModel[
        constr(
            pattern=r'(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$)|(^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9]))$)',
            min_length=4,
            max_length=64,
        )
    ]
):
    root: constr(
        pattern=r'(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$)|(^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9]))$)',
        min_length=4,
        max_length=64,
    )


class Cidrs(RootModel[List[Cidr]]):
    root: List[Cidr]


class ClarifyContentTemplate(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=64)


class ClarifyEnableExplanations(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=64)


class ClarifyFeatureType(Enum):
    numerical = 'numerical'
    categorical = 'categorical'
    text = 'text'


class ClarifyFeatureTypes(RootModel[List[ClarifyFeatureType]]):
    root: List[ClarifyFeatureType] = Field(..., max_length=256, min_length=1)


class ClarifyFeaturesAttribute(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=64)


class ClarifyHeader(RootModel[constr(pattern=r'.*', min_length=1, max_length=64)]):
    root: constr(pattern=r'.*', min_length=1, max_length=64)


class ClarifyLabelAttribute(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=64)


class ClarifyLabelHeaders(RootModel[List[ClarifyHeader]]):
    root: List[ClarifyHeader] = Field(..., max_length=16, min_length=1)


class ClarifyLabelIndex(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ClarifyMaxPayloadInMB(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class ClarifyMaxRecordCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ClarifyMimeType(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*\/[a-zA-Z0-9](-*[a-zA-Z0-9+.])*',
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*\/[a-zA-Z0-9](-*[a-zA-Z0-9+.])*',
        max_length=255,
    )


class ClarifyProbabilityAttribute(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=64)


class ClarifyProbabilityIndex(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ClarifyShapBaseline(
    RootModel[constr(pattern=r'[\s\S]+', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'[\s\S]+', min_length=1, max_length=4096)


class ClarifyShapNumberOfSamples(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ClarifyShapSeed(RootModel[int]):
    root: int


class ClarifyShapUseLogit(RootModel[bool]):
    root: bool


class ClarifyTextGranularity(Enum):
    token = 'token'
    sentence = 'sentence'
    paragraph = 'paragraph'


class ClarifyTextLanguage(Enum):
    af = 'af'
    sq = 'sq'
    ar = 'ar'
    hy = 'hy'
    eu = 'eu'
    bn = 'bn'
    bg = 'bg'
    ca = 'ca'
    zh = 'zh'
    hr = 'hr'
    cs = 'cs'
    da = 'da'
    nl = 'nl'
    en = 'en'
    et = 'et'
    fi = 'fi'
    fr = 'fr'
    de = 'de'
    el = 'el'
    gu = 'gu'
    he = 'he'
    hi = 'hi'
    hu = 'hu'
    is_ = 'is'
    id = 'id'
    ga = 'ga'
    it = 'it'
    kn = 'kn'
    ky = 'ky'
    lv = 'lv'
    lt = 'lt'
    lb = 'lb'
    mk = 'mk'
    ml = 'ml'
    mr = 'mr'
    ne = 'ne'
    nb = 'nb'
    fa = 'fa'
    pl = 'pl'
    pt = 'pt'
    ro = 'ro'
    ru = 'ru'
    sa = 'sa'
    sr = 'sr'
    tn = 'tn'
    si = 'si'
    sk = 'sk'
    sl = 'sl'
    es = 'es'
    sv = 'sv'
    tl = 'tl'
    ta = 'ta'
    tt = 'tt'
    te = 'te'
    tr = 'tr'
    uk = 'uk'
    ur = 'ur'
    yo = 'yo'
    lij = 'lij'
    xx = 'xx'


class ClientId(RootModel[constr(pattern=r'[ -~]+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'[ -~]+', min_length=1, max_length=1024)


class ClientSecret(RootModel[SecretStr]):
    root: SecretStr


class ClientToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=36)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=36)


class CodeRepositoryArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:code-repository/.*',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:code-repository/.*',
        min_length=1,
        max_length=2048,
    )


class CodeRepositoryContains(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', max_length=1024)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', max_length=1024)


class CodeRepositoryNameContains(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)


class CodeRepositoryNameOrUrl(
    RootModel[
        constr(
            pattern=r'^https://([^/]+)/?(.*)$|^[a-zA-Z0-9](-*[a-zA-Z0-9])*',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^https://([^/]+)/?(.*)$|^[a-zA-Z0-9](-*[a-zA-Z0-9])*',
        min_length=1,
        max_length=1024,
    )


class CodeRepositorySortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    LastModifiedTime = 'LastModifiedTime'


class CodeRepositorySortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class CognitoUserGroup(
    RootModel[
        constr(pattern=r'[\p{L}\p{M}\p{S}\p{N}\p{P}]+', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'[\p{L}\p{M}\p{S}\p{N}\p{P}]+', min_length=1, max_length=128)


class CognitoUserPool(
    RootModel[constr(pattern=r'[\w-]+_[0-9a-zA-Z]+', min_length=1, max_length=55)]
):
    root: constr(pattern=r'[\w-]+_[0-9a-zA-Z]+', min_length=1, max_length=55)


class CollectionName(RootModel[constr(pattern=r'.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*', min_length=1, max_length=256)


class CompilationJobArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:compilation-job/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:compilation-job/.*',
        max_length=256,
    )


class CompilationJobStatus(Enum):
    INPROGRESS = 'INPROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    STARTING = 'STARTING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'


class CompilerOptions(RootModel[constr(pattern=r'.*', min_length=3, max_length=1024)]):
    root: constr(pattern=r'.*', min_length=3, max_length=1024)


class CompleteOnConvergence(Enum):
    Disabled = 'Disabled'
    Enabled = 'Enabled'


class CompressionType(Enum):
    None_ = 'None'
    Gzip = 'Gzip'


class CompressionTypes(RootModel[List[CompressionType]]):
    root: List[CompressionType]


class ConditionOutcome(Enum):
    True_ = 'True'
    False_ = 'False'


class ConditionStepMetadata(BaseModel):
    Outcome: Optional[ConditionOutcome] = None


class ConfigKey(RootModel[constr(pattern=r'.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*', min_length=1, max_length=256)


class ConfigValue(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ConflictException(RootModel[Any]):
    root: Any


class ContainerArgument(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ContainerArguments(RootModel[List[ContainerArgument]]):
    root: List[ContainerArgument] = Field(..., max_length=100, min_length=1)


class ContainerEntrypointString(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ContainerHostname(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class ContainerImage(RootModel[constr(pattern=r'[\S]+', max_length=255)]):
    root: constr(pattern=r'[\S]+', max_length=255)


class ContainerMode(Enum):
    SingleModel = 'SingleModel'
    MultiModel = 'MultiModel'


class ContentClassifier(Enum):
    FreeOfPersonallyIdentifiableInformation = 'FreeOfPersonallyIdentifiableInformation'
    FreeOfAdultContent = 'FreeOfAdultContent'


class ContentClassifiers(RootModel[List[ContentClassifier]]):
    root: List[ContentClassifier] = Field(..., max_length=256)


class ContentColumn(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class ContentDigest(
    RootModel[constr(pattern=r'^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$', max_length=72)]
):
    root: constr(pattern=r'^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$', max_length=72)


class ContentType(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ContentTypes(RootModel[List[ContentType]]):
    root: List[ContentType]


class ContextArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:context/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:context/.*',
        max_length=256,
    )


class ConvergenceDetected(BaseModel):
    CompleteOnConvergence_1: Optional[CompleteOnConvergence] = Field(
        None, alias='CompleteOnConvergence'
    )


class CreateActionResponse(BaseModel):
    ActionArn_1: Optional[ActionArn] = Field(None, alias='ActionArn')


class CreateAlgorithmOutput(BaseModel):
    AlgorithmArn_1: AlgorithmArn = Field(..., alias='AlgorithmArn')


class CreateAppImageConfigResponse(BaseModel):
    AppImageConfigArn_1: Optional[AppImageConfigArn] = Field(
        None, alias='AppImageConfigArn'
    )


class CreateAppResponse(BaseModel):
    AppArn_1: Optional[AppArn] = Field(None, alias='AppArn')


class CreateArtifactResponse(BaseModel):
    ArtifactArn_1: Optional[ArtifactArn] = Field(None, alias='ArtifactArn')


class CreateAutoMLJobResponse(BaseModel):
    AutoMLJobArn_1: AutoMLJobArn = Field(..., alias='AutoMLJobArn')


class CreateAutoMLJobV2Response(BaseModel):
    AutoMLJobArn_1: AutoMLJobArn = Field(..., alias='AutoMLJobArn')


class CreateCodeRepositoryOutput(BaseModel):
    CodeRepositoryArn_1: CodeRepositoryArn = Field(..., alias='CodeRepositoryArn')


class CreateCompilationJobResponse(BaseModel):
    CompilationJobArn_1: CompilationJobArn = Field(..., alias='CompilationJobArn')


class CreateContextResponse(BaseModel):
    ContextArn_1: Optional[ContextArn] = Field(None, alias='ContextArn')


class CreationTime(RootModel[datetime]):
    root: datetime


class CsvContentType(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*\/[a-zA-Z0-9](-*[a-zA-Z0-9.])*',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*\/[a-zA-Z0-9](-*[a-zA-Z0-9.])*',
        min_length=1,
        max_length=256,
    )


class CsvContentTypes(RootModel[List[CsvContentType]]):
    root: List[CsvContentType] = Field(..., max_length=10, min_length=1)


class CustomerMetadataKey(
    RootModel[
        constr(
            pattern=r'^\([\p\{L\}\p\{Z\}\p\{N\}_.:\/=\+\-@]*\)$\{1,128\}',
            min_length=1,
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^\([\p\{L\}\p\{Z\}\p\{N\}_.:\/=\+\-@]*\)$\{1,128\}',
        min_length=1,
        max_length=128,
    )


class CustomerMetadataKeyList(RootModel[List[CustomerMetadataKey]]):
    root: List[CustomerMetadataKey]


class CustomerMetadataValue(
    RootModel[
        constr(
            pattern=r'^\([\p\{L\}\p\{Z\}\p\{N\}_.:\/=\+\-@]*\)$\{1,256\}',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^\([\p\{L\}\p\{Z\}\p\{N\}_.:\/=\+\-@]*\)$\{1,256\}',
        min_length=1,
        max_length=256,
    )


class DataDistributionType(Enum):
    FullyReplicated = 'FullyReplicated'
    ShardedByS3Key = 'ShardedByS3Key'


class DataExplorationNotebookLocation(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class DataInputConfig(
    RootModel[constr(pattern=r'[\S\s]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[\S\s]+', min_length=1, max_length=1024)


class Database(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class DefaultGid(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class DefaultUid(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class DeleteActionResponse(BaseModel):
    ActionArn_1: Optional[ActionArn] = Field(None, alias='ActionArn')


class DeleteAppImageConfigRequest(BaseModel):
    AppImageConfigName_1: AppImageConfigName = Field(..., alias='AppImageConfigName')


class DeleteArtifactResponse(BaseModel):
    ArtifactArn_1: Optional[ArtifactArn] = Field(None, alias='ArtifactArn')


class DeleteAssociationRequest(BaseModel):
    DestinationArn: AssociationEntityArn
    SourceArn: AssociationEntityArn


class DeleteAssociationResponse(BaseModel):
    DestinationArn: Optional[AssociationEntityArn] = None
    SourceArn: Optional[AssociationEntityArn] = None


class DeleteContextResponse(BaseModel):
    ContextArn_1: Optional[ContextArn] = Field(None, alias='ContextArn')


class DeleteFlowDefinitionResponse(BaseModel):
    pass


class DeleteHumanTaskUiResponse(BaseModel):
    pass


class DeleteImageResponse(BaseModel):
    pass


class DeleteImageVersionResponse(BaseModel):
    pass


class DeleteModelPackageGroupInput(BaseModel):
    ModelPackageGroupName: ArnOrName


class DeleteTagsOutput(BaseModel):
    pass


class DeleteWorkforceResponse(BaseModel):
    pass


class DependencyCopyPath(RootModel[constr(pattern=r'.*', max_length=1023)]):
    root: constr(pattern=r'.*', max_length=1023)


class DependencyOriginPath(RootModel[constr(pattern=r'.*', max_length=1023)]):
    root: constr(pattern=r'.*', max_length=1023)


class DeploymentStageMaxResults(RootModel[conint(le=10)]):
    root: conint(le=10)


class DescribeAlgorithmInput(BaseModel):
    AlgorithmName: ArnOrName


class DescribeAppImageConfigRequest(BaseModel):
    AppImageConfigName_1: AppImageConfigName = Field(..., alias='AppImageConfigName')


class DescribeArtifactRequest(BaseModel):
    ArtifactArn_1: ArtifactArn = Field(..., alias='ArtifactArn')


class DescribeAutoMLJobRequest(BaseModel):
    AutoMLJobName_1: AutoMLJobName = Field(..., alias='AutoMLJobName')


class DescribeAutoMLJobV2Request(BaseModel):
    AutoMLJobName_1: AutoMLJobName = Field(..., alias='AutoMLJobName')


class DescribeModelPackageGroupInput(BaseModel):
    ModelPackageGroupName: ArnOrName


class Description(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class DestinationS3Uri(
    RootModel[constr(pattern=r'^(https|s3)://([^/])/?(.*)$', max_length=512)]
):
    root: constr(pattern=r'^(https|s3)://([^/])/?(.*)$', max_length=512)


class DetailedAlgorithmStatus(Enum):
    NotStarted = 'NotStarted'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'


class DetailedModelPackageStatus(Enum):
    NotStarted = 'NotStarted'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'


class DeviceArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:[a-z\-]*:[a-z\-]*:\d{12}:[a-z\-]*/?[a-zA-Z_0-9+=,.@\-_/]+$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:[a-z\-]*:[a-z\-]*:\d{12}:[a-z\-]*/?[a-zA-Z_0-9+=,.@\-_/]+$',
        min_length=20,
        max_length=2048,
    )


class DeviceDeploymentStatus(Enum):
    READYTODEPLOY = 'READYTODEPLOY'
    INPROGRESS = 'INPROGRESS'
    DEPLOYED = 'DEPLOYED'
    FAILED = 'FAILED'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'


class DeviceDescription(
    RootModel[constr(pattern=r'[\S\s]+', min_length=1, max_length=40)]
):
    root: constr(pattern=r'[\S\s]+', min_length=1, max_length=40)


class DeviceFleetArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:iam::\d{12}:device-fleet/?[a-zA-Z_0-9+=,.@\-_/]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:iam::\d{12}:device-fleet/?[a-zA-Z_0-9+=,.@\-_/]+$'
    )


class DeviceFleetDescription(
    RootModel[constr(pattern=r'[\S\s]+', min_length=1, max_length=800)]
):
    root: constr(pattern=r'[\S\s]+', min_length=1, max_length=800)


class DeviceName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
    )


class DeviceNames(RootModel[List[DeviceName]]):
    root: List[DeviceName]


class DeviceSubsetType(Enum):
    PERCENTAGE = 'PERCENTAGE'
    SELECTION = 'SELECTION'
    NAMECONTAINS = 'NAMECONTAINS'


class DirectInternetAccess(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class Direction(Enum):
    Both = 'Both'
    Ascendants = 'Ascendants'
    Descendants = 'Descendants'


class DirectoryPath(RootModel[constr(pattern=r'.*', max_length=4096)]):
    root: constr(pattern=r'.*', max_length=4096)


class DisableProfiler(RootModel[bool]):
    root: bool


class DisableSagemakerServicecatalogPortfolioInput(BaseModel):
    pass


class DisableSagemakerServicecatalogPortfolioOutput(BaseModel):
    pass


class DisassociateAdditionalCodeRepositories(RootModel[bool]):
    root: bool


class DisassociateDefaultCodeRepository(RootModel[bool]):
    root: bool


class DisassociateNotebookInstanceAcceleratorTypes(RootModel[bool]):
    root: bool


class DisassociateNotebookInstanceLifecycleConfig(RootModel[bool]):
    root: bool


class DocumentSchemaVersion(
    RootModel[constr(pattern=r'^\d{1,4}.\d{1,4}.\d{1,4}$', min_length=5, max_length=14)]
):
    root: constr(pattern=r'^\d{1,4}.\d{1,4}.\d{1,4}$', min_length=5, max_length=14)


class Dollars(RootModel[conint(ge=0, le=2)]):
    root: conint(ge=0, le=2)


class DomainArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:domain/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:domain/.*',
        max_length=256,
    )


class DomainId(RootModel[constr(max_length=63)]):
    root: constr(max_length=63)


class DomainName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class DomainStatus(Enum):
    Deleting = 'Deleting'
    Failed = 'Failed'
    InService = 'InService'
    Pending = 'Pending'
    Updating = 'Updating'
    Update_Failed = 'Update_Failed'
    Delete_Failed = 'Delete_Failed'


class DoubleParameterValue(RootModel[float]):
    root: float


class Edge(BaseModel):
    AssociationType: Optional[AssociationEdgeType] = None
    DestinationArn: Optional[AssociationEntityArn] = None
    SourceArn: Optional[AssociationEntityArn] = None


class EdgeDeploymentPlanArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z\-]*:\d{12}:edge-deployment/?[a-zA-Z_0-9+=,.@\-_/]+$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z\-]*:\d{12}:edge-deployment/?[a-zA-Z_0-9+=,.@\-_/]+$',
        min_length=20,
        max_length=2048,
    )


class EdgePackagingJobArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z\-]*:\d{12}:edge-packaging-job/?[a-zA-Z_0-9+=,.@\-_/]+$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z\-]*:\d{12}:edge-packaging-job/?[a-zA-Z_0-9+=,.@\-_/]+$',
        min_length=20,
        max_length=2048,
    )


class EdgePackagingJobStatus(Enum):
    STARTING = 'STARTING'
    INPROGRESS = 'INPROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'


class EdgePresetDeploymentArtifact(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class EdgePresetDeploymentStatus(Enum):
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class EdgePresetDeploymentType(Enum):
    GreengrassV2Component = 'GreengrassV2Component'


class EdgeVersion(
    RootModel[constr(pattern=r'[a-zA-Z0-9\ \_\.]+', min_length=1, max_length=30)]
):
    root: constr(pattern=r'[a-zA-Z0-9\ \_\.]+', min_length=1, max_length=30)


class Edges(RootModel[List[Edge]]):
    root: List[Edge]


class EfsUid(RootModel[constr(pattern=r'\d+', max_length=10)]):
    root: constr(pattern=r'\d+', max_length=10)


class EnableCapture(RootModel[bool]):
    root: bool


class EnableIotRoleAlias(RootModel[bool]):
    root: bool


class EnableSagemakerServicecatalogPortfolioInput(BaseModel):
    pass


class EnableSagemakerServicecatalogPortfolioOutput(BaseModel):
    pass


class EndpointArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:endpoint/.*',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:endpoint/.*',
        min_length=20,
        max_length=2048,
    )


class EndpointConfigArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:endpoint-config/.*',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:endpoint-config/.*',
        min_length=20,
        max_length=2048,
    )


class EndpointConfigName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class EndpointConfigNameContains(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)


class EndpointConfigSortKey(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class EndpointName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class EndpointNameContains(RootModel[constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)]):
    root: constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)


class EndpointSortKey(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'


class EndpointStatus(Enum):
    OutOfService = 'OutOfService'
    Creating = 'Creating'
    Updating = 'Updating'
    SystemUpdating = 'SystemUpdating'
    RollingBack = 'RollingBack'
    InService = 'InService'
    Deleting = 'Deleting'
    Failed = 'Failed'


class EntityDescription(
    RootModel[constr(pattern=r'[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*', max_length=1024)]
):
    root: constr(pattern=r'[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*', max_length=1024)


class EntityName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
    )


class EnvironmentKey(
    RootModel[constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]*', max_length=1024)]
):
    root: constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]*', max_length=1024)


class EnvironmentValue(RootModel[constr(pattern=r'[\S\s]*', max_length=1024)]):
    root: constr(pattern=r'[\S\s]*', max_length=1024)


class ExecutionRoleIdentityConfig(Enum):
    USER_PROFILE_NAME = 'USER_PROFILE_NAME'
    DISABLED = 'DISABLED'


class ExecutionStatus(Enum):
    Pending = 'Pending'
    Completed = 'Completed'
    CompletedWithViolations = 'CompletedWithViolations'
    InProgress = 'InProgress'
    Failed = 'Failed'
    Stopping = 'Stopping'
    Stopped = 'Stopped'


class ExitMessage(RootModel[constr(pattern=r'[\S\s]*', max_length=1024)]):
    root: constr(pattern=r'[\S\s]*', max_length=1024)


class ExperimentArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:experiment/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:experiment/.*',
        max_length=256,
    )


class ExperimentDescription(RootModel[constr(pattern=r'.*', max_length=3072)]):
    root: constr(pattern=r'.*', max_length=3072)


class ExperimentEntityName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,119}', min_length=1, max_length=120
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,119}', min_length=1, max_length=120
    )


class ExperimentEntityNameOrArn(
    RootModel[
        constr(
            pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:(experiment|experiment-trial|experiment-trial-component|artifact|action|context)\/)?([a-zA-Z0-9](-*[a-zA-Z0-9]){0,119})',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:(experiment|experiment-trial|experiment-trial-component|artifact|action|context)\/)?([a-zA-Z0-9](-*[a-zA-Z0-9]){0,119})',
        min_length=1,
        max_length=256,
    )


class ExperimentSourceArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:.*', max_length=256
    )


class ExpiresInSeconds(RootModel[conint(ge=5, le=300)]):
    root: conint(ge=5, le=300)


class ExplainabilityLocation(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class FailureHandlingPolicy(Enum):
    ROLLBACK_ON_FAILURE = 'ROLLBACK_ON_FAILURE'
    DO_NOTHING = 'DO_NOTHING'


class FailureReason(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class FeatureDescription(
    RootModel[constr(pattern=r'.*', min_length=0, max_length=255)]
):
    root: constr(pattern=r'.*', min_length=0, max_length=255)


class FeatureGroupArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:feature-group/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:feature-group/.*',
        max_length=256,
    )


class FeatureGroupMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class FeatureGroupName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9]([_-]*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9]([_-]*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
    )


class FeatureGroupNameContains(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class FeatureGroupSortBy(Enum):
    Name = 'Name'
    FeatureGroupStatus = 'FeatureGroupStatus'
    OfflineStoreStatus = 'OfflineStoreStatus'
    CreationTime = 'CreationTime'


class FeatureGroupSortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class FeatureGroupStatus(Enum):
    Creating = 'Creating'
    Created = 'Created'
    CreateFailed = 'CreateFailed'
    Deleting = 'Deleting'
    DeleteFailed = 'DeleteFailed'


class FeatureName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9]([-_]*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9]([-_]*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
    )


class FeatureParameterKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-]*)$', min_length=1, max_length=255)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-]*)$', min_length=1, max_length=255
    )


class FeatureParameterRemovals(RootModel[List[FeatureParameterKey]]):
    root: List[FeatureParameterKey] = Field(..., max_length=25)


class FeatureParameterValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-]*)$', min_length=1, max_length=255)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-]*)$', min_length=1, max_length=255
    )


class FeatureStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class FeatureType(Enum):
    Integral = 'Integral'
    Fractional = 'Fractional'
    String = 'String'


class FileSystemAccessMode(Enum):
    rw = 'rw'
    ro = 'ro'


class FileSystemId(RootModel[constr(pattern=r'.*', min_length=11)]):
    root: constr(pattern=r'.*', min_length=11)


class FileSystemType(Enum):
    EFS = 'EFS'
    FSxLustre = 'FSxLustre'


class FilterValue(RootModel[constr(pattern=r'.+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.+', min_length=1, max_length=1024)


class Float(RootModel[float]):
    root: float


class FlowDefinitionArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:flow-definition/.*',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:flow-definition/.*',
        max_length=1024,
    )


class FlowDefinitionName(
    RootModel[
        constr(pattern=r'^[a-z0-9](-*[a-z0-9]){0,62}', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-z0-9](-*[a-z0-9]){0,62}', min_length=1, max_length=63)


class FlowDefinitionStatus(Enum):
    Initializing = 'Initializing'
    Active = 'Active'
    Failed = 'Failed'
    Deleting = 'Deleting'


class FlowDefinitionTaskAvailabilityLifetimeInSeconds(
    RootModel[conint(ge=1, le=864000)]
):
    root: conint(ge=1, le=864000)


class FlowDefinitionTaskCount(RootModel[conint(ge=1, le=3)]):
    root: conint(ge=1, le=3)


class FlowDefinitionTaskDescription(
    RootModel[constr(pattern=r'.+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'.+', min_length=1, max_length=255)


class FlowDefinitionTaskKeyword(
    RootModel[
        constr(pattern=r'^[A-Za-z0-9]+( [A-Za-z0-9]+)*$', min_length=1, max_length=30)
    ]
):
    root: constr(pattern=r'^[A-Za-z0-9]+( [A-Za-z0-9]+)*$', min_length=1, max_length=30)


class FlowDefinitionTaskKeywords(RootModel[List[FlowDefinitionTaskKeyword]]):
    root: List[FlowDefinitionTaskKeyword] = Field(..., max_length=5, min_length=1)


class FlowDefinitionTaskTimeLimitInSeconds(RootModel[conint(ge=30, le=28800)]):
    root: conint(ge=30, le=28800)


class FlowDefinitionTaskTitle(
    RootModel[
        constr(
            pattern=r'^[\t\n\r -\uD7FF\uE000-\uFFFD]*$', min_length=1, max_length=128
        )
    ]
):
    root: constr(
        pattern=r'^[\t\n\r -\uD7FF\uE000-\uFFFD]*$', min_length=1, max_length=128
    )


class Framework(Enum):
    TENSORFLOW = 'TENSORFLOW'
    KERAS = 'KERAS'
    MXNET = 'MXNET'
    ONNX = 'ONNX'
    PYTORCH = 'PYTORCH'
    XGBOOST = 'XGBOOST'
    TFLITE = 'TFLITE'
    DARKNET = 'DARKNET'
    SKLEARN = 'SKLEARN'


class FrameworkVersion(
    RootModel[constr(pattern=r'[0-9]\.[A-Za-z0-9.]+', min_length=3, max_length=10)]
):
    root: constr(pattern=r'[0-9]\.[A-Za-z0-9.]+', min_length=3, max_length=10)


class GenerateCandidateDefinitionsOnly(RootModel[bool]):
    root: bool


class GetDeviceFleetReportRequest(BaseModel):
    DeviceFleetName: EntityName


class GetModelPackageGroupPolicyInput(BaseModel):
    ModelPackageGroupName: EntityName


class GetSagemakerServicecatalogPortfolioStatusInput(BaseModel):
    pass


class GitConfigUrl(RootModel[constr(pattern=r'^https://([^/]+)/?(.*)$')]):
    root: constr(pattern=r'^https://([^/]+)/?(.*)$')


class Group(
    RootModel[
        constr(pattern=r'[\p{L}\p{M}\p{S}\p{N}\p{P}]+', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'[\p{L}\p{M}\p{S}\p{N}\p{P}]+', min_length=1, max_length=63)


class Groups(RootModel[List[Group]]):
    root: List[Group] = Field(..., max_length=10, min_length=1)


class HookParameters(RootModel[Optional[Dict[str, ConfigValue]]]):
    root: Optional[Dict[str, ConfigValue]] = None


class Horovod(RootModel[bool]):
    root: bool


class HubArn(RootModel[constr(pattern=r'.*', max_length=255)]):
    root: constr(pattern=r'.*', max_length=255)


class HubContentArn(RootModel[constr(pattern=r'.*', max_length=255)]):
    root: constr(pattern=r'.*', max_length=255)


class HubContentDependency(BaseModel):
    DependencyCopyPath_1: Optional[DependencyCopyPath] = Field(
        None, alias='DependencyCopyPath'
    )
    DependencyOriginPath_1: Optional[DependencyOriginPath] = Field(
        None, alias='DependencyOriginPath'
    )


class HubContentDependencyList(RootModel[List[HubContentDependency]]):
    root: List[HubContentDependency] = Field(..., max_length=50)


class HubContentDescription(RootModel[constr(pattern=r'.*', max_length=1023)]):
    root: constr(pattern=r'.*', max_length=1023)


class HubContentDisplayName(RootModel[constr(pattern=r'.*', max_length=255)]):
    root: constr(pattern=r'.*', max_length=255)


class HubContentDocument(RootModel[constr(pattern=r'.*', max_length=65535)]):
    root: constr(pattern=r'.*', max_length=65535)


class HubContentMarkdown(RootModel[constr(pattern=r'.*', max_length=65535)]):
    root: constr(pattern=r'.*', max_length=65535)


class HubContentName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class HubContentSortBy(Enum):
    HubContentName = 'HubContentName'
    CreationTime = 'CreationTime'
    HubContentStatus = 'HubContentStatus'


class HubContentStatus(Enum):
    Available = 'Available'
    Importing = 'Importing'
    Deleting = 'Deleting'
    ImportFailed = 'ImportFailed'
    DeleteFailed = 'DeleteFailed'


class HubContentType(Enum):
    Model = 'Model'
    Notebook = 'Notebook'


class HubContentVersion(
    RootModel[constr(pattern=r'^\d{1,4}.\d{1,4}.\d{1,4}$', min_length=5, max_length=14)]
):
    root: constr(pattern=r'^\d{1,4}.\d{1,4}.\d{1,4}$', min_length=5, max_length=14)


class HubDescription(RootModel[constr(pattern=r'.*', max_length=1023)]):
    root: constr(pattern=r'.*', max_length=1023)


class HubDisplayName(RootModel[constr(pattern=r'.*', max_length=255)]):
    root: constr(pattern=r'.*', max_length=255)


class HubName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class HubSearchKeyword(RootModel[constr(pattern=r'^[^A-Z]*$', max_length=255)]):
    root: constr(pattern=r'^[^A-Z]*$', max_length=255)


class HubSearchKeywordList(RootModel[List[HubSearchKeyword]]):
    root: List[HubSearchKeyword] = Field(..., max_length=50)


class HubSortBy(Enum):
    HubName = 'HubName'
    CreationTime = 'CreationTime'
    HubStatus = 'HubStatus'
    AccountIdOwner = 'AccountIdOwner'


class HubStatus(Enum):
    InService = 'InService'
    Creating = 'Creating'
    Updating = 'Updating'
    Deleting = 'Deleting'
    CreateFailed = 'CreateFailed'
    UpdateFailed = 'UpdateFailed'
    DeleteFailed = 'DeleteFailed'


class HumanLoopActivationConditions(RootModel[constr(max_length=10240)]):
    root: constr(max_length=10240)


class HumanLoopActivationConditionsConfig(BaseModel):
    HumanLoopActivationConditions_1: HumanLoopActivationConditions = Field(
        ..., alias='HumanLoopActivationConditions'
    )


class HumanLoopActivationConfig(BaseModel):
    HumanLoopActivationConditionsConfig_1: HumanLoopActivationConditionsConfig = Field(
        ..., alias='HumanLoopActivationConditionsConfig'
    )


class HumanLoopRequestSource(BaseModel):
    AwsManagedHumanLoopRequestSource_1: AwsManagedHumanLoopRequestSource = Field(
        ..., alias='AwsManagedHumanLoopRequestSource'
    )


class HumanTaskUiArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:human-task-ui/.*',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:human-task-ui/.*',
        max_length=1024,
    )


class HumanTaskUiName(
    RootModel[constr(pattern=r'^[a-z0-9](-*[a-z0-9])*', min_length=1, max_length=63)]
):
    root: constr(pattern=r'^[a-z0-9](-*[a-z0-9])*', min_length=1, max_length=63)


class HumanTaskUiStatus(Enum):
    Active = 'Active'
    Deleting = 'Deleting'


class HyperParameterKey(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class HyperParameterScalingType(Enum):
    Auto = 'Auto'
    Linear = 'Linear'
    Logarithmic = 'Logarithmic'
    ReverseLogarithmic = 'ReverseLogarithmic'


class HyperParameterTrainingJobDefinitionName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
    )


class HyperParameterTrainingJobEnvironmentKey(
    RootModel[constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]*', max_length=512)]
):
    root: constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]*', max_length=512)


class HyperParameterTrainingJobEnvironmentValue(
    RootModel[constr(pattern=r'[\S\s]*', max_length=512)]
):
    root: constr(pattern=r'[\S\s]*', max_length=512)


class HyperParameterTuningAllocationStrategy(Enum):
    Prioritized = 'Prioritized'


class HyperParameterTuningJobArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:hyper-parameter-tuning-job/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:hyper-parameter-tuning-job/.*',
        max_length=256,
    )


class HyperParameterTuningJobName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,31}', min_length=1, max_length=32
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,31}', min_length=1, max_length=32
    )


class HyperParameterTuningJobObjectiveType(Enum):
    Maximize = 'Maximize'
    Minimize = 'Minimize'


class HyperParameterTuningJobSortByOptions(Enum):
    Name = 'Name'
    Status = 'Status'
    CreationTime = 'CreationTime'


class HyperParameterTuningJobStatus(Enum):
    Completed = 'Completed'
    InProgress = 'InProgress'
    Failed = 'Failed'
    Stopped = 'Stopped'
    Stopping = 'Stopping'


class HyperParameterTuningJobStrategyType(Enum):
    Bayesian = 'Bayesian'
    Random = 'Random'
    Hyperband = 'Hyperband'
    Grid = 'Grid'


class HyperParameterTuningJobWarmStartType(Enum):
    IdenticalDataAndAlgorithm = 'IdenticalDataAndAlgorithm'
    TransferLearning = 'TransferLearning'


class HyperParameterTuningMaxRuntimeInSeconds(RootModel[conint(ge=120, le=15768000)]):
    root: conint(ge=120, le=15768000)


class HyperParameterValue(RootModel[constr(pattern=r'.*', max_length=2500)]):
    root: constr(pattern=r'.*', max_length=2500)


class HyperParameters(RootModel[Optional[Dict[str, HyperParameterValue]]]):
    root: Optional[Dict[str, HyperParameterValue]] = None


class HyperbandStrategyMaxResource(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class HyperbandStrategyMinResource(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class IdempotencyToken(RootModel[constr(min_length=32, max_length=128)]):
    root: constr(min_length=32, max_length=128)


class ImageArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-[\w]+)*:sagemaker:.+:[0-9]{12}:image/[a-z0-9]([-.]?[a-z0-9])*$',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-[\w]+)*:sagemaker:.+:[0-9]{12}:image/[a-z0-9]([-.]?[a-z0-9])*$',
        max_length=256,
    )


class ImageBaseImage(RootModel[constr(pattern=r'.*', min_length=1, max_length=255)]):
    root: constr(pattern=r'.*', min_length=1, max_length=255)


class ImageContainerImage(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class ImageDeleteProperty(
    RootModel[
        constr(pattern=r'(^DisplayName$)|(^Description$)', min_length=1, max_length=11)
    ]
):
    root: constr(
        pattern=r'(^DisplayName$)|(^Description$)', min_length=1, max_length=11
    )


class ImageDeletePropertyList(RootModel[List[ImageDeleteProperty]]):
    root: List[ImageDeleteProperty] = Field(..., max_length=2)


class ImageDescription(RootModel[constr(pattern=r'.*', min_length=1, max_length=512)]):
    root: constr(pattern=r'.*', min_length=1, max_length=512)


class ImageDigest(
    RootModel[constr(pattern=r'^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$', max_length=72)]
):
    root: constr(pattern=r'^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$', max_length=72)


class ImageDisplayName(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=128)


class ImageName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9]([-.]?[a-zA-Z0-9]){0,62}$',
            min_length=1,
            max_length=63,
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9]([-.]?[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
    )


class ImageNameContains(RootModel[constr(pattern=r'^[a-zA-Z0-9\-.]+$', max_length=63)]):
    root: constr(pattern=r'^[a-zA-Z0-9\-.]+$', max_length=63)


class ImageSortBy(Enum):
    CREATION_TIME = 'CREATION_TIME'
    LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME'
    IMAGE_NAME = 'IMAGE_NAME'


class ImageSortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class ImageStatus(Enum):
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATING = 'UPDATING'
    UPDATE_FAILED = 'UPDATE_FAILED'
    DELETING = 'DELETING'
    DELETE_FAILED = 'DELETE_FAILED'


class ImageUri(RootModel[constr(pattern=r'.*', max_length=255)]):
    root: constr(pattern=r'.*', max_length=255)


class ImageVersionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-[\w]+)*:sagemaker:.+:[0-9]{12}:image-version/[a-z0-9]([-.]?[a-z0-9])*/[0-9]+$',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-[\w]+)*:sagemaker:.+:[0-9]{12}:image-version/[a-z0-9]([-.]?[a-z0-9])*/[0-9]+$',
        max_length=256,
    )


class ImageVersionNumber(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ImageVersionSortBy(Enum):
    CREATION_TIME = 'CREATION_TIME'
    LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME'
    VERSION = 'VERSION'


class ImageVersionSortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class ImageVersionStatus(Enum):
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETING = 'DELETING'
    DELETE_FAILED = 'DELETE_FAILED'


class ImportHubContentResponse(BaseModel):
    HubArn_1: HubArn = Field(..., alias='HubArn')
    HubContentArn_1: HubContentArn = Field(..., alias='HubContentArn')


class InferenceExecutionMode(Enum):
    Serial = 'Serial'
    Direct = 'Direct'


class InferenceExperimentArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:inference-experiment/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:inference-experiment/.*',
        max_length=256,
    )


class InferenceExperimentDescription(RootModel[constr(pattern=r'.*', max_length=1024)]):
    root: constr(pattern=r'.*', max_length=1024)


class InferenceExperimentName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,119}', min_length=1, max_length=120
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,119}', min_length=1, max_length=120
    )


class InferenceExperimentStatus(Enum):
    Creating = 'Creating'
    Created = 'Created'
    Updating = 'Updating'
    Running = 'Running'
    Starting = 'Starting'
    Stopping = 'Stopping'
    Completed = 'Completed'
    Cancelled = 'Cancelled'


class InferenceExperimentStatusReason(
    RootModel[constr(pattern=r'.*', max_length=1024)]
):
    root: constr(pattern=r'.*', max_length=1024)


class InferenceExperimentStopDesiredState(Enum):
    Completed = 'Completed'
    Cancelled = 'Cancelled'


class InferenceExperimentType(Enum):
    ShadowMode = 'ShadowMode'


class InferenceImage(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class InferenceSpecificationName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
    )


class InitialNumberOfUsers(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class InitialTaskCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class InputMode(Enum):
    Pipe = 'Pipe'
    File = 'File'


class InstanceGroupName(RootModel[constr(pattern=r'.+', min_length=1, max_length=64)]):
    root: constr(pattern=r'.+', min_length=1, max_length=64)


class InstanceGroupNames(RootModel[List[InstanceGroupName]]):
    root: List[InstanceGroupName] = Field(..., max_length=5)


class InstanceType(Enum):
    ml_t2_medium = 'ml.t2.medium'
    ml_t2_large = 'ml.t2.large'
    ml_t2_xlarge = 'ml.t2.xlarge'
    ml_t2_2xlarge = 'ml.t2.2xlarge'
    ml_t3_medium = 'ml.t3.medium'
    ml_t3_large = 'ml.t3.large'
    ml_t3_xlarge = 'ml.t3.xlarge'
    ml_t3_2xlarge = 'ml.t3.2xlarge'
    ml_m4_xlarge = 'ml.m4.xlarge'
    ml_m4_2xlarge = 'ml.m4.2xlarge'
    ml_m4_4xlarge = 'ml.m4.4xlarge'
    ml_m4_10xlarge = 'ml.m4.10xlarge'
    ml_m4_16xlarge = 'ml.m4.16xlarge'
    ml_m5_xlarge = 'ml.m5.xlarge'
    ml_m5_2xlarge = 'ml.m5.2xlarge'
    ml_m5_4xlarge = 'ml.m5.4xlarge'
    ml_m5_12xlarge = 'ml.m5.12xlarge'
    ml_m5_24xlarge = 'ml.m5.24xlarge'
    ml_m5d_large = 'ml.m5d.large'
    ml_m5d_xlarge = 'ml.m5d.xlarge'
    ml_m5d_2xlarge = 'ml.m5d.2xlarge'
    ml_m5d_4xlarge = 'ml.m5d.4xlarge'
    ml_m5d_8xlarge = 'ml.m5d.8xlarge'
    ml_m5d_12xlarge = 'ml.m5d.12xlarge'
    ml_m5d_16xlarge = 'ml.m5d.16xlarge'
    ml_m5d_24xlarge = 'ml.m5d.24xlarge'
    ml_c4_xlarge = 'ml.c4.xlarge'
    ml_c4_2xlarge = 'ml.c4.2xlarge'
    ml_c4_4xlarge = 'ml.c4.4xlarge'
    ml_c4_8xlarge = 'ml.c4.8xlarge'
    ml_c5_xlarge = 'ml.c5.xlarge'
    ml_c5_2xlarge = 'ml.c5.2xlarge'
    ml_c5_4xlarge = 'ml.c5.4xlarge'
    ml_c5_9xlarge = 'ml.c5.9xlarge'
    ml_c5_18xlarge = 'ml.c5.18xlarge'
    ml_c5d_xlarge = 'ml.c5d.xlarge'
    ml_c5d_2xlarge = 'ml.c5d.2xlarge'
    ml_c5d_4xlarge = 'ml.c5d.4xlarge'
    ml_c5d_9xlarge = 'ml.c5d.9xlarge'
    ml_c5d_18xlarge = 'ml.c5d.18xlarge'
    ml_p2_xlarge = 'ml.p2.xlarge'
    ml_p2_8xlarge = 'ml.p2.8xlarge'
    ml_p2_16xlarge = 'ml.p2.16xlarge'
    ml_p3_2xlarge = 'ml.p3.2xlarge'
    ml_p3_8xlarge = 'ml.p3.8xlarge'
    ml_p3_16xlarge = 'ml.p3.16xlarge'
    ml_p3dn_24xlarge = 'ml.p3dn.24xlarge'
    ml_g4dn_xlarge = 'ml.g4dn.xlarge'
    ml_g4dn_2xlarge = 'ml.g4dn.2xlarge'
    ml_g4dn_4xlarge = 'ml.g4dn.4xlarge'
    ml_g4dn_8xlarge = 'ml.g4dn.8xlarge'
    ml_g4dn_12xlarge = 'ml.g4dn.12xlarge'
    ml_g4dn_16xlarge = 'ml.g4dn.16xlarge'
    ml_r5_large = 'ml.r5.large'
    ml_r5_xlarge = 'ml.r5.xlarge'
    ml_r5_2xlarge = 'ml.r5.2xlarge'
    ml_r5_4xlarge = 'ml.r5.4xlarge'
    ml_r5_8xlarge = 'ml.r5.8xlarge'
    ml_r5_12xlarge = 'ml.r5.12xlarge'
    ml_r5_16xlarge = 'ml.r5.16xlarge'
    ml_r5_24xlarge = 'ml.r5.24xlarge'
    ml_g5_xlarge = 'ml.g5.xlarge'
    ml_g5_2xlarge = 'ml.g5.2xlarge'
    ml_g5_4xlarge = 'ml.g5.4xlarge'
    ml_g5_8xlarge = 'ml.g5.8xlarge'
    ml_g5_16xlarge = 'ml.g5.16xlarge'
    ml_g5_12xlarge = 'ml.g5.12xlarge'
    ml_g5_24xlarge = 'ml.g5.24xlarge'
    ml_g5_48xlarge = 'ml.g5.48xlarge'


class Integer(RootModel[int]):
    root: int


class IntegerValue(RootModel[int]):
    root: int


class InvocationsMaxRetries(RootModel[conint(ge=0, le=3)]):
    root: conint(ge=0, le=3)


class InvocationsTimeoutInSeconds(RootModel[conint(ge=1, le=3600)]):
    root: conint(ge=1, le=3600)


class IotRoleAlias(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:iam::\d{12}:rolealias/?[a-zA-Z_0-9+=,.@\-_/]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:iam::\d{12}:rolealias/?[a-zA-Z_0-9+=,.@\-_/]+$'
    )


class JobDurationInSeconds(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class JobReferenceCode(RootModel[constr(pattern=r'.+', min_length=1)]):
    root: constr(pattern=r'.+', min_length=1)


class JobReferenceCodeContains(
    RootModel[constr(pattern=r'.+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'.+', min_length=1, max_length=255)


class JobType(Enum):
    TRAINING = 'TRAINING'
    INFERENCE = 'INFERENCE'
    NOTEBOOK_KERNEL = 'NOTEBOOK_KERNEL'


class JoinSource(Enum):
    Input = 'Input'
    None_ = 'None'


class JsonContentType(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*\/[a-zA-Z0-9](-*[a-zA-Z0-9.])*',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*\/[a-zA-Z0-9](-*[a-zA-Z0-9.])*',
        min_length=1,
        max_length=256,
    )


class JsonContentTypes(RootModel[List[JsonContentType]]):
    root: List[JsonContentType] = Field(..., max_length=10, min_length=1)


class JsonPath(RootModel[constr(min_length=0, max_length=63)]):
    root: constr(min_length=0, max_length=63)


class KeepAlivePeriodInSeconds(RootModel[conint(ge=0, le=3600)]):
    root: conint(ge=0, le=3600)


class KernelDisplayName(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class KernelName(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class KernelSpec(BaseModel):
    DisplayName: Optional[KernelDisplayName] = None
    Name: KernelName


class KernelSpecs(RootModel[List[KernelSpec]]):
    root: List[KernelSpec] = Field(..., max_length=1, min_length=1)


class Key(RootModel[constr(pattern=r'.+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.+', min_length=1, max_length=1024)


class KmsKeyId(RootModel[constr(pattern=r'.*', max_length=2048)]):
    root: constr(pattern=r'.*', max_length=2048)


class LabelAttributeName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,126}', min_length=1, max_length=127
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,126}', min_length=1, max_length=127
    )


class LabelCounter(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class LabelCounters(BaseModel):
    FailedNonRetryableError: Optional[LabelCounter] = None
    HumanLabeled: Optional[LabelCounter] = None
    MachineLabeled: Optional[LabelCounter] = None
    TotalLabeled: Optional[LabelCounter] = None
    Unlabeled: Optional[LabelCounter] = None


class LabelCountersForWorkteam(BaseModel):
    HumanLabeled: Optional[LabelCounter] = None
    PendingHuman: Optional[LabelCounter] = None
    Total: Optional[LabelCounter] = None


class LabelingJobAlgorithmSpecificationArn(
    RootModel[constr(pattern=r'arn:.*', max_length=2048)]
):
    root: constr(pattern=r'arn:.*', max_length=2048)


class LabelingJobArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:labeling-job/.*',
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:labeling-job/.*',
        max_length=2048,
    )


class LabelingJobDataAttributes(BaseModel):
    ContentClassifiers_1: Optional[ContentClassifiers] = Field(
        None, alias='ContentClassifiers'
    )


class LabelingJobName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
    )


class LabelingJobStatus(Enum):
    Initializing = 'Initializing'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Stopping = 'Stopping'
    Stopped = 'Stopped'


class LambdaFunctionArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:lambda:[a-z0-9\-]*:[0-9]{12}:function:.*',
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:lambda:[a-z0-9\-]*:[0-9]{12}:function:.*',
        max_length=2048,
    )


class LastModifiedTime(RootModel[datetime]):
    root: datetime


class LastUpdateStatusValue(Enum):
    Successful = 'Successful'
    Failed = 'Failed'
    InProgress = 'InProgress'


class LineageGroupArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:lineage-group/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:lineage-group/.*',
        max_length=256,
    )


class LineageGroupNameOrArn(
    RootModel[
        constr(
            pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:lineage-group\/)?([a-zA-Z0-9](-*[a-zA-Z0-9]){0,119})',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:lineage-group\/)?([a-zA-Z0-9](-*[a-zA-Z0-9]){0,119})',
        min_length=1,
        max_length=256,
    )


class LineageType(Enum):
    TrialComponent = 'TrialComponent'
    Artifact = 'Artifact'
    Context = 'Context'
    Action = 'Action'


class ListCompilationJobsSortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'


class ListDeviceFleetsSortBy(Enum):
    NAME = 'NAME'
    CREATION_TIME = 'CREATION_TIME'
    LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME'


class ListEdgeDeploymentPlansSortBy(Enum):
    NAME = 'NAME'
    DEVICE_FLEET_NAME = 'DEVICE_FLEET_NAME'
    CREATION_TIME = 'CREATION_TIME'
    LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME'


class ListEdgePackagingJobsSortBy(Enum):
    NAME = 'NAME'
    MODEL_NAME = 'MODEL_NAME'
    CREATION_TIME = 'CREATION_TIME'
    LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME'
    STATUS = 'STATUS'


class ListInferenceRecommendationsJobsSortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'


class ListLabelingJobsForWorkteamSortByOptions(Enum):
    CreationTime = 'CreationTime'


class ListMaxResults(RootModel[conint(le=100)]):
    root: conint(le=100)


class ListTagsMaxResults(RootModel[conint(ge=50)]):
    root: conint(ge=50)


class ListWorkforcesSortByOptions(Enum):
    Name = 'Name'
    CreateDate = 'CreateDate'


class ListWorkteamsSortByOptions(Enum):
    Name = 'Name'
    CreateDate = 'CreateDate'


class Long(RootModel[int]):
    root: int


class MLFramework(
    RootModel[
        constr(pattern=r'^[a-zA-Z]+ ?\d+\.\d+(\.\d+)?$', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'^[a-zA-Z]+ ?\d+\.\d+(\.\d+)?$', min_length=1, max_length=128)


class MaxAutoMLJobRuntimeInSeconds(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxCandidates(RootModel[conint(ge=1, le=750)]):
    root: conint(ge=1, le=750)


class MaxConcurrentInvocationsPerInstance(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MaxConcurrentTaskCount(RootModel[conint(ge=1, le=5000)]):
    root: conint(ge=1, le=5000)


class MaxConcurrentTransforms(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class MaxHumanLabeledObjectCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxNumberOfTests(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxNumberOfTrainingJobs(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxNumberOfTrainingJobsNotImproving(RootModel[conint(ge=3)]):
    root: conint(ge=3)


class MaxParallelExecutionSteps(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxParallelOfTests(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxParallelTrainingJobs(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxPayloadInMB(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class MaxPercentageOfInputDatasetLabeled(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxRuntimeInSeconds(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxRuntimePerTrainingJobInSeconds(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxWaitTimeInSeconds(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaximumExecutionTimeoutInSeconds(RootModel[conint(ge=600, le=14400)]):
    root: conint(ge=600, le=14400)


class MaximumRetryAttempts(RootModel[conint(ge=1, le=30)]):
    root: conint(ge=1, le=30)


class MediaType(RootModel[constr(pattern=r'^[-\w]+\/[-\w+]+$', max_length=64)]):
    root: constr(pattern=r'^[-\w]+\/[-\w+]+$', max_length=64)


class MetadataPropertyValue(RootModel[constr(pattern=r'.*', max_length=1024)]):
    root: constr(pattern=r'.*', max_length=1024)


class MetricName(RootModel[constr(pattern=r'.+', min_length=1, max_length=255)]):
    root: constr(pattern=r'.+', min_length=1, max_length=255)


class MetricRegex(RootModel[constr(pattern=r'.+', min_length=1, max_length=500)]):
    root: constr(pattern=r'.+', min_length=1, max_length=500)


class MetricSetSource(Enum):
    Train = 'Train'
    Validation = 'Validation'
    Test = 'Test'


class MetricValue(RootModel[float]):
    root: float


class MinimumInstanceMetadataServiceVersion(
    RootModel[constr(pattern=r'1|2', max_length=1)]
):
    root: constr(pattern=r'1|2', max_length=1)


class ModelApprovalStatus(Enum):
    Approved = 'Approved'
    Rejected = 'Rejected'
    PendingManualApproval = 'PendingManualApproval'


class ModelArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:model/.*',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:model/.*',
        min_length=20,
        max_length=2048,
    )


class ModelCacheSetting(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class ModelCardArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]{9,16}:[0-9]{12}:model-card/[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]{9,16}:[0-9]{12}:model-card/[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$',
        max_length=256,
    )


class ModelCardContent(RootModel[SecretStr]):
    root: SecretStr


class ModelCardExportJobArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]{9,16}:[0-9]{12}:model-card/[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}/export-job/[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]{9,16}:[0-9]{12}:model-card/[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}/export-job/[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$',
        max_length=256,
    )


class ModelCardExportJobSortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'


class ModelCardExportJobSortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class ModelCardExportJobStatus(Enum):
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'


class ModelCardProcessingStatus(Enum):
    DeleteInProgress = 'DeleteInProgress'
    DeletePending = 'DeletePending'
    ContentDeleted = 'ContentDeleted'
    ExportJobsDeleted = 'ExportJobsDeleted'
    DeleteCompleted = 'DeleteCompleted'
    DeleteFailed = 'DeleteFailed'


class ModelCardSecurityConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')


class ModelCardSortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class ModelCardSortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class ModelCardStatus(Enum):
    Draft = 'Draft'
    PendingReview = 'PendingReview'
    Approved = 'Approved'
    Archived = 'Archived'


class ModelCardVersionSortBy(Enum):
    Version = 'Version'


class ModelClientConfig(BaseModel):
    InvocationsMaxRetries_1: Optional[InvocationsMaxRetries] = Field(
        None, alias='InvocationsMaxRetries'
    )
    InvocationsTimeoutInSeconds_1: Optional[InvocationsTimeoutInSeconds] = Field(
        None, alias='InvocationsTimeoutInSeconds'
    )


class ModelDashboardIndicatorAction(BaseModel):
    Enabled: Optional[Boolean] = None


class ModelDeployConfig(BaseModel):
    AutoGenerateEndpointName_1: Optional[AutoGenerateEndpointName] = Field(
        None, alias='AutoGenerateEndpointName'
    )
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')


class ModelDeployResult(BaseModel):
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')


class ModelDigests(BaseModel):
    ArtifactDigest_1: Optional[ArtifactDigest] = Field(None, alias='ArtifactDigest')


class ModelInfrastructureType(Enum):
    RealTimeInference = 'RealTimeInference'


class ModelInput(BaseModel):
    DataInputConfig_1: DataInputConfig = Field(..., alias='DataInputConfig')


class ModelInsightsLocation(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class ModelMetadataFilterType(Enum):
    Domain = 'Domain'
    Framework = 'Framework'
    Task = 'Task'
    FrameworkVersion = 'FrameworkVersion'


class ModelName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)


class ModelNameContains(RootModel[constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)]):
    root: constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)


class ModelPackageArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:model-package/.*',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:model-package/.*',
        min_length=1,
        max_length=2048,
    )


class ModelPackageArnList(RootModel[List[ModelPackageArn]]):
    root: List[ModelPackageArn] = Field(..., max_length=100, min_length=1)


class ModelPackageFrameworkVersion(
    RootModel[constr(pattern=r'[0-9]\.[A-Za-z0-9.-]+', min_length=3, max_length=10)]
):
    root: constr(pattern=r'[0-9]\.[A-Za-z0-9.-]+', min_length=3, max_length=10)


class ModelPackageGroupArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:model-package-group/.*',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:model-package-group/.*',
        min_length=1,
        max_length=2048,
    )


class ModelPackageGroupSortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class ModelPackageGroupStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Deleting = 'Deleting'
    DeleteFailed = 'DeleteFailed'


class ModelPackageGroupSummary(BaseModel):
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    ModelPackageGroupArn_1: ModelPackageGroupArn = Field(
        ..., alias='ModelPackageGroupArn'
    )
    ModelPackageGroupDescription: Optional[EntityDescription] = None
    ModelPackageGroupName: EntityName
    ModelPackageGroupStatus_1: ModelPackageGroupStatus = Field(
        ..., alias='ModelPackageGroupStatus'
    )


class ModelPackageGroupSummaryList(RootModel[List[ModelPackageGroupSummary]]):
    root: List[ModelPackageGroupSummary]


class ModelPackageSortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class ModelPackageStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Deleting = 'Deleting'


class ModelPackageType(Enum):
    Versioned = 'Versioned'
    Unversioned = 'Unversioned'
    Both = 'Both'


class ModelPackageVersion(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ModelSortKey(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class ModelVariantAction(Enum):
    Retain = 'Retain'
    Remove = 'Remove'
    Promote = 'Promote'


class ModelVariantActionMap(RootModel[Optional[Dict[str, ModelVariantAction]]]):
    root: Optional[Dict[str, ModelVariantAction]] = None


class ModelVariantName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9]([\-a-zA-Z0-9]*[a-zA-Z0-9])?', max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9]([\-a-zA-Z0-9]*[a-zA-Z0-9])?', max_length=63)


class ModelVariantStatus(Enum):
    Creating = 'Creating'
    Updating = 'Updating'
    InService = 'InService'
    Deleting = 'Deleting'
    Deleted = 'Deleted'


class MonitoringAlertActions(BaseModel):
    ModelDashboardIndicator: Optional[ModelDashboardIndicatorAction] = None


class MonitoringAlertHistorySortKey(Enum):
    CreationTime = 'CreationTime'
    Status = 'Status'


class MonitoringAlertName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
    )


class MonitoringAlertStatus(Enum):
    InAlert = 'InAlert'
    OK = 'OK'


class MonitoringContainerArguments(RootModel[List[ContainerArgument]]):
    root: List[ContainerArgument] = Field(..., max_length=50, min_length=1)


class MonitoringCsvDatasetFormat(BaseModel):
    Header: Optional[Boolean] = None


class MonitoringDatapointsToAlert(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MonitoringEvaluationPeriod(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MonitoringExecutionSortKey(Enum):
    CreationTime = 'CreationTime'
    ScheduledTime = 'ScheduledTime'
    Status = 'Status'


class MonitoringJobDefinitionArn(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class MonitoringJobDefinitionName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', min_length=1, max_length=63)


class MonitoringJobDefinitionSortKey(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class MonitoringJsonDatasetFormat(BaseModel):
    Line: Optional[Boolean] = None


class MonitoringMaxRuntimeInSeconds(RootModel[conint(ge=1, le=86400)]):
    root: conint(ge=1, le=86400)


class MonitoringParquetDatasetFormat(BaseModel):
    pass


class MonitoringProblemType(Enum):
    BinaryClassification = 'BinaryClassification'
    MulticlassClassification = 'MulticlassClassification'
    Regression = 'Regression'


class MonitoringS3Uri(
    RootModel[constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', max_length=512)]
):
    root: constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', max_length=512)


class MonitoringScheduleArn(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class MonitoringScheduleName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
    )


class MonitoringScheduleSortKey(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'


class MonitoringStoppingCondition(BaseModel):
    MaxRuntimeInSeconds: MonitoringMaxRuntimeInSeconds


class MonitoringTimeOffsetString(
    RootModel[constr(pattern=r'^.?P.*', min_length=1, max_length=15)]
):
    root: constr(pattern=r'^.?P.*', min_length=1, max_length=15)


class MonitoringType(Enum):
    DataQuality = 'DataQuality'
    ModelQuality = 'ModelQuality'
    ModelBias = 'ModelBias'
    ModelExplainability = 'ModelExplainability'


class MountPath(RootModel[constr(pattern=r'^\/.*', max_length=1024)]):
    root: constr(pattern=r'^\/.*', max_length=1024)


class MultiModelConfig(BaseModel):
    ModelCacheSetting_1: Optional[ModelCacheSetting] = Field(
        None, alias='ModelCacheSetting'
    )


class NameContains(RootModel[constr(pattern=r'[a-zA-Z0-9\-]+', max_length=63)]):
    root: constr(pattern=r'[a-zA-Z0-9\-]+', max_length=63)


class NeoVpcSecurityGroupId(RootModel[constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)]):
    root: constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)


class NeoVpcSecurityGroupIds(RootModel[List[NeoVpcSecurityGroupId]]):
    root: List[NeoVpcSecurityGroupId] = Field(..., max_length=5, min_length=1)


class NeoVpcSubnetId(RootModel[constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)]):
    root: constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)


class NeoVpcSubnets(RootModel[List[NeoVpcSubnetId]]):
    root: List[NeoVpcSubnetId] = Field(..., max_length=16, min_length=1)


class NetworkInterfaceId(RootModel[str]):
    root: str


class NextToken(RootModel[constr(pattern=r'.*', max_length=8192)]):
    root: constr(pattern=r'.*', max_length=8192)


class NotebookInstanceAcceleratorType(Enum):
    ml_eia1_medium = 'ml.eia1.medium'
    ml_eia1_large = 'ml.eia1.large'
    ml_eia1_xlarge = 'ml.eia1.xlarge'
    ml_eia2_medium = 'ml.eia2.medium'
    ml_eia2_large = 'ml.eia2.large'
    ml_eia2_xlarge = 'ml.eia2.xlarge'


class NotebookInstanceAcceleratorTypes(
    RootModel[List[NotebookInstanceAcceleratorType]]
):
    root: List[NotebookInstanceAcceleratorType]


class NotebookInstanceArn(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class NotebookInstanceLifecycleConfigArn(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class NotebookInstanceLifecycleConfigContent(
    RootModel[constr(pattern=r'[\S\s]+', min_length=1, max_length=16384)]
):
    root: constr(pattern=r'[\S\s]+', min_length=1, max_length=16384)


class NotebookInstanceLifecycleConfigName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)


class NotebookInstanceLifecycleConfigNameContains(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)


class NotebookInstanceLifecycleConfigSortKey(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    LastModifiedTime = 'LastModifiedTime'


class NotebookInstanceLifecycleConfigSortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class NotebookInstanceLifecycleConfigSummary(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    NotebookInstanceLifecycleConfigArn_1: NotebookInstanceLifecycleConfigArn = Field(
        ..., alias='NotebookInstanceLifecycleConfigArn'
    )
    NotebookInstanceLifecycleConfigName_1: NotebookInstanceLifecycleConfigName = Field(
        ..., alias='NotebookInstanceLifecycleConfigName'
    )


class NotebookInstanceLifecycleConfigSummaryList(
    RootModel[List[NotebookInstanceLifecycleConfigSummary]]
):
    root: List[NotebookInstanceLifecycleConfigSummary]


class NotebookInstanceLifecycleHook(BaseModel):
    Content: Optional[NotebookInstanceLifecycleConfigContent] = None


class NotebookInstanceName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)


class NotebookInstanceNameContains(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', max_length=63)


class NotebookInstanceSortKey(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'


class NotebookInstanceSortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class NotebookInstanceStatus(Enum):
    Pending = 'Pending'
    InService = 'InService'
    Stopping = 'Stopping'
    Stopped = 'Stopped'
    Failed = 'Failed'
    Deleting = 'Deleting'
    Updating = 'Updating'


class NotebookInstanceUrl(RootModel[str]):
    root: str


class NotebookInstanceVolumeSizeInGB(RootModel[conint(ge=5, le=16384)]):
    root: conint(ge=5, le=16384)


class NotebookOutputOption(Enum):
    Allowed = 'Allowed'
    Disabled = 'Disabled'


class NotificationTopicArn(
    RootModel[
        constr(pattern=r'arn:aws[a-z\-]*:sns:[a-z0-9\-]*:[0-9]{12}:[a-zA-Z0-9_.-]*')
    ]
):
    root: constr(pattern=r'arn:aws[a-z\-]*:sns:[a-z0-9\-]*:[0-9]{12}:[a-zA-Z0-9_.-]*')


class NumberOfHumanWorkersPerDataObject(RootModel[conint(ge=1, le=9)]):
    root: conint(ge=1, le=9)


class ObjectiveStatus(Enum):
    Succeeded = 'Succeeded'
    Pending = 'Pending'
    Failed = 'Failed'


class ObjectiveStatusCounter(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ObjectiveStatusCounters(BaseModel):
    Failed: Optional[ObjectiveStatusCounter] = None
    Pending: Optional[ObjectiveStatusCounter] = None
    Succeeded: Optional[ObjectiveStatusCounter] = None


class OfflineStoreStatusValue(Enum):
    Active = 'Active'
    Blocked = 'Blocked'
    Disabled = 'Disabled'


class OidcEndpoint(RootModel[constr(pattern=r'https://\S+', max_length=500)]):
    root: constr(pattern=r'https://\S+', max_length=500)


class OidcMemberDefinition(BaseModel):
    Groups_1: Groups = Field(..., alias='Groups')


class OnlineStoreSecurityConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')


class OnlineStoreTotalSizeBytes(RootModel[int]):
    root: int


class Operator(Enum):
    Equals = 'Equals'
    NotEquals = 'NotEquals'
    GreaterThan = 'GreaterThan'
    GreaterThanOrEqualTo = 'GreaterThanOrEqualTo'
    LessThan = 'LessThan'
    LessThanOrEqualTo = 'LessThanOrEqualTo'
    Contains = 'Contains'
    Exists = 'Exists'
    NotExists = 'NotExists'
    In = 'In'


class OptionalDouble(RootModel[float]):
    root: float


class OptionalInteger(RootModel[int]):
    root: int


class OptionalVolumeSizeInGB(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class OrderKey(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class PaginationToken(RootModel[constr(pattern=r'.*', max_length=8192)]):
    root: constr(pattern=r'.*', max_length=8192)


class ParallelismConfiguration(BaseModel):
    MaxParallelExecutionSteps_1: MaxParallelExecutionSteps = Field(
        ..., alias='MaxParallelExecutionSteps'
    )


class ParameterKey(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ParameterName(
    RootModel[constr(pattern=r'[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*', max_length=256)]
):
    root: constr(pattern=r'[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*', max_length=256)


class ParameterType(Enum):
    Integer = 'Integer'
    Continuous = 'Continuous'
    Categorical = 'Categorical'
    FreeText = 'FreeText'


class ParameterValue(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ParameterValues(RootModel[List[ParameterValue]]):
    root: List[ParameterValue] = Field(..., max_length=30, min_length=1)


class Parent(BaseModel):
    ExperimentName: Optional[ExperimentEntityName] = None
    TrialName: Optional[ExperimentEntityName] = None


class ParentHyperParameterTuningJob(BaseModel):
    HyperParameterTuningJobName_1: Optional[HyperParameterTuningJobName] = Field(
        None, alias='HyperParameterTuningJobName'
    )


class ParentHyperParameterTuningJobs(RootModel[List[ParentHyperParameterTuningJob]]):
    root: List[ParentHyperParameterTuningJob] = Field(..., max_length=5, min_length=1)


class Parents(RootModel[List[Parent]]):
    root: List[Parent]


class Percentage(RootModel[conint(le=100)]):
    root: conint(le=100)


class PipelineArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:pipeline/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:pipeline/.*',
        max_length=256,
    )


class PipelineDefinition(
    RootModel[constr(pattern=r'.*(?:[ \r\n\t].*)*', min_length=1, max_length=1048576)]
):
    root: constr(pattern=r'.*(?:[ \r\n\t].*)*', min_length=1, max_length=1048576)


class PipelineDescription(
    RootModel[constr(pattern=r'.*', min_length=0, max_length=3072)]
):
    root: constr(pattern=r'.*', min_length=0, max_length=3072)


class PipelineExecutionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:pipeline\/.*\/execution\/.*$',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:pipeline\/.*\/execution\/.*$',
        max_length=256,
    )


class PipelineExecutionDescription(
    RootModel[constr(pattern=r'.*', min_length=0, max_length=3072)]
):
    root: constr(pattern=r'.*', min_length=0, max_length=3072)


class PipelineExecutionFailureReason(RootModel[constr(pattern=r'.*', max_length=1300)]):
    root: constr(pattern=r'.*', max_length=1300)


class PipelineExecutionName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,81}', min_length=1, max_length=82
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,81}', min_length=1, max_length=82
    )


class PipelineExecutionStatus(Enum):
    Executing = 'Executing'
    Stopping = 'Stopping'
    Stopped = 'Stopped'
    Failed = 'Failed'
    Succeeded = 'Succeeded'


class PipelineExperimentConfig(BaseModel):
    ExperimentName: Optional[ExperimentEntityName] = None
    TrialName: Optional[ExperimentEntityName] = None


class PipelineName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,255}', min_length=1, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,255}', min_length=1, max_length=256
    )


class PipelineNameOrArn(
    RootModel[
        constr(
            pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:pipeline/.*)?([a-zA-Z0-9](-*[a-zA-Z0-9]){0,255})',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:pipeline/.*)?([a-zA-Z0-9](-*[a-zA-Z0-9]){0,255})',
        min_length=1,
        max_length=2048,
    )


class PipelineParameterName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,255}$', min_length=1, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,255}$', min_length=1, max_length=256
    )


class PipelineStatus(Enum):
    Active = 'Active'


class PlatformIdentifier(
    RootModel[
        constr(
            pattern=r'^(notebook-al1-v1|notebook-al2-v1|notebook-al2-v2)$',
            max_length=15,
        )
    ]
):
    root: constr(
        pattern=r'^(notebook-al1-v1|notebook-al2-v1|notebook-al2-v2)$', max_length=15
    )


class PolicyString(RootModel[constr(pattern=r'.*', min_length=1, max_length=20480)]):
    root: constr(pattern=r'.*', min_length=1, max_length=20480)


class PresignedDomainUrl(RootModel[str]):
    root: str


class ProbabilityThresholdAttribute(RootModel[float]):
    root: float


class ProblemType(Enum):
    BinaryClassification = 'BinaryClassification'
    MulticlassClassification = 'MulticlassClassification'
    Regression = 'Regression'


class ProcessingEnvironmentKey(
    RootModel[constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]*', max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]*', max_length=256)


class ProcessingEnvironmentValue(RootModel[constr(pattern=r'[\S\s]*', max_length=256)]):
    root: constr(pattern=r'[\S\s]*', max_length=256)


class ProcessingFeatureStoreOutput(BaseModel):
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')


class ProcessingInstanceCount(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ProcessingInstanceType(Enum):
    ml_t3_medium = 'ml.t3.medium'
    ml_t3_large = 'ml.t3.large'
    ml_t3_xlarge = 'ml.t3.xlarge'
    ml_t3_2xlarge = 'ml.t3.2xlarge'
    ml_m4_xlarge = 'ml.m4.xlarge'
    ml_m4_2xlarge = 'ml.m4.2xlarge'
    ml_m4_4xlarge = 'ml.m4.4xlarge'
    ml_m4_10xlarge = 'ml.m4.10xlarge'
    ml_m4_16xlarge = 'ml.m4.16xlarge'
    ml_c4_xlarge = 'ml.c4.xlarge'
    ml_c4_2xlarge = 'ml.c4.2xlarge'
    ml_c4_4xlarge = 'ml.c4.4xlarge'
    ml_c4_8xlarge = 'ml.c4.8xlarge'
    ml_p2_xlarge = 'ml.p2.xlarge'
    ml_p2_8xlarge = 'ml.p2.8xlarge'
    ml_p2_16xlarge = 'ml.p2.16xlarge'
    ml_p3_2xlarge = 'ml.p3.2xlarge'
    ml_p3_8xlarge = 'ml.p3.8xlarge'
    ml_p3_16xlarge = 'ml.p3.16xlarge'
    ml_c5_xlarge = 'ml.c5.xlarge'
    ml_c5_2xlarge = 'ml.c5.2xlarge'
    ml_c5_4xlarge = 'ml.c5.4xlarge'
    ml_c5_9xlarge = 'ml.c5.9xlarge'
    ml_c5_18xlarge = 'ml.c5.18xlarge'
    ml_m5_large = 'ml.m5.large'
    ml_m5_xlarge = 'ml.m5.xlarge'
    ml_m5_2xlarge = 'ml.m5.2xlarge'
    ml_m5_4xlarge = 'ml.m5.4xlarge'
    ml_m5_12xlarge = 'ml.m5.12xlarge'
    ml_m5_24xlarge = 'ml.m5.24xlarge'
    ml_r5_large = 'ml.r5.large'
    ml_r5_xlarge = 'ml.r5.xlarge'
    ml_r5_2xlarge = 'ml.r5.2xlarge'
    ml_r5_4xlarge = 'ml.r5.4xlarge'
    ml_r5_8xlarge = 'ml.r5.8xlarge'
    ml_r5_12xlarge = 'ml.r5.12xlarge'
    ml_r5_16xlarge = 'ml.r5.16xlarge'
    ml_r5_24xlarge = 'ml.r5.24xlarge'
    ml_g4dn_xlarge = 'ml.g4dn.xlarge'
    ml_g4dn_2xlarge = 'ml.g4dn.2xlarge'
    ml_g4dn_4xlarge = 'ml.g4dn.4xlarge'
    ml_g4dn_8xlarge = 'ml.g4dn.8xlarge'
    ml_g4dn_12xlarge = 'ml.g4dn.12xlarge'
    ml_g4dn_16xlarge = 'ml.g4dn.16xlarge'


class ProcessingJobArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:processing-job/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:processing-job/.*',
        max_length=256,
    )


class ProcessingJobName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
    )


class ProcessingJobStatus(Enum):
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Stopping = 'Stopping'
    Stopped = 'Stopped'


class ProcessingJobStepMetadata(BaseModel):
    Arn: Optional[ProcessingJobArn] = None


class ProcessingLocalPath(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ProcessingMaxRuntimeInSeconds(RootModel[conint(ge=1, le=604800)]):
    root: conint(ge=1, le=604800)


class ProcessingS3CompressionType(Enum):
    None_ = 'None'
    Gzip = 'Gzip'


class ProcessingS3DataDistributionType(Enum):
    FullyReplicated = 'FullyReplicated'
    ShardedByS3Key = 'ShardedByS3Key'


class ProcessingS3DataType(Enum):
    ManifestFile = 'ManifestFile'
    S3Prefix = 'S3Prefix'


class ProcessingS3InputMode(Enum):
    Pipe = 'Pipe'
    File = 'File'


class ProcessingS3UploadMode(Enum):
    Continuous = 'Continuous'
    EndOfJob = 'EndOfJob'


class ProcessingStoppingCondition(BaseModel):
    MaxRuntimeInSeconds: ProcessingMaxRuntimeInSeconds


class ProcessingVolumeSizeInGB(RootModel[conint(ge=1, le=16384)]):
    root: conint(ge=1, le=16384)


class Processor(Enum):
    CPU = 'CPU'
    GPU = 'GPU'


class ProductId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', max_length=256)


class ProductionVariantAcceleratorType(Enum):
    ml_eia1_medium = 'ml.eia1.medium'
    ml_eia1_large = 'ml.eia1.large'
    ml_eia1_xlarge = 'ml.eia1.xlarge'
    ml_eia2_medium = 'ml.eia2.medium'
    ml_eia2_large = 'ml.eia2.large'
    ml_eia2_xlarge = 'ml.eia2.xlarge'


class ProductionVariantContainerStartupHealthCheckTimeoutInSeconds(
    RootModel[conint(ge=60, le=3600)]
):
    root: conint(ge=60, le=3600)


class ProductionVariantCoreDumpConfig(BaseModel):
    DestinationS3Uri_1: DestinationS3Uri = Field(..., alias='DestinationS3Uri')
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')


class ProductionVariantInstanceType(Enum):
    ml_t2_medium = 'ml.t2.medium'
    ml_t2_large = 'ml.t2.large'
    ml_t2_xlarge = 'ml.t2.xlarge'
    ml_t2_2xlarge = 'ml.t2.2xlarge'
    ml_m4_xlarge = 'ml.m4.xlarge'
    ml_m4_2xlarge = 'ml.m4.2xlarge'
    ml_m4_4xlarge = 'ml.m4.4xlarge'
    ml_m4_10xlarge = 'ml.m4.10xlarge'
    ml_m4_16xlarge = 'ml.m4.16xlarge'
    ml_m5_large = 'ml.m5.large'
    ml_m5_xlarge = 'ml.m5.xlarge'
    ml_m5_2xlarge = 'ml.m5.2xlarge'
    ml_m5_4xlarge = 'ml.m5.4xlarge'
    ml_m5_12xlarge = 'ml.m5.12xlarge'
    ml_m5_24xlarge = 'ml.m5.24xlarge'
    ml_m5d_large = 'ml.m5d.large'
    ml_m5d_xlarge = 'ml.m5d.xlarge'
    ml_m5d_2xlarge = 'ml.m5d.2xlarge'
    ml_m5d_4xlarge = 'ml.m5d.4xlarge'
    ml_m5d_12xlarge = 'ml.m5d.12xlarge'
    ml_m5d_24xlarge = 'ml.m5d.24xlarge'
    ml_c4_large = 'ml.c4.large'
    ml_c4_xlarge = 'ml.c4.xlarge'
    ml_c4_2xlarge = 'ml.c4.2xlarge'
    ml_c4_4xlarge = 'ml.c4.4xlarge'
    ml_c4_8xlarge = 'ml.c4.8xlarge'
    ml_p2_xlarge = 'ml.p2.xlarge'
    ml_p2_8xlarge = 'ml.p2.8xlarge'
    ml_p2_16xlarge = 'ml.p2.16xlarge'
    ml_p3_2xlarge = 'ml.p3.2xlarge'
    ml_p3_8xlarge = 'ml.p3.8xlarge'
    ml_p3_16xlarge = 'ml.p3.16xlarge'
    ml_c5_large = 'ml.c5.large'
    ml_c5_xlarge = 'ml.c5.xlarge'
    ml_c5_2xlarge = 'ml.c5.2xlarge'
    ml_c5_4xlarge = 'ml.c5.4xlarge'
    ml_c5_9xlarge = 'ml.c5.9xlarge'
    ml_c5_18xlarge = 'ml.c5.18xlarge'
    ml_c5d_large = 'ml.c5d.large'
    ml_c5d_xlarge = 'ml.c5d.xlarge'
    ml_c5d_2xlarge = 'ml.c5d.2xlarge'
    ml_c5d_4xlarge = 'ml.c5d.4xlarge'
    ml_c5d_9xlarge = 'ml.c5d.9xlarge'
    ml_c5d_18xlarge = 'ml.c5d.18xlarge'
    ml_g4dn_xlarge = 'ml.g4dn.xlarge'
    ml_g4dn_2xlarge = 'ml.g4dn.2xlarge'
    ml_g4dn_4xlarge = 'ml.g4dn.4xlarge'
    ml_g4dn_8xlarge = 'ml.g4dn.8xlarge'
    ml_g4dn_12xlarge = 'ml.g4dn.12xlarge'
    ml_g4dn_16xlarge = 'ml.g4dn.16xlarge'
    ml_r5_large = 'ml.r5.large'
    ml_r5_xlarge = 'ml.r5.xlarge'
    ml_r5_2xlarge = 'ml.r5.2xlarge'
    ml_r5_4xlarge = 'ml.r5.4xlarge'
    ml_r5_12xlarge = 'ml.r5.12xlarge'
    ml_r5_24xlarge = 'ml.r5.24xlarge'
    ml_r5d_large = 'ml.r5d.large'
    ml_r5d_xlarge = 'ml.r5d.xlarge'
    ml_r5d_2xlarge = 'ml.r5d.2xlarge'
    ml_r5d_4xlarge = 'ml.r5d.4xlarge'
    ml_r5d_12xlarge = 'ml.r5d.12xlarge'
    ml_r5d_24xlarge = 'ml.r5d.24xlarge'
    ml_inf1_xlarge = 'ml.inf1.xlarge'
    ml_inf1_2xlarge = 'ml.inf1.2xlarge'
    ml_inf1_6xlarge = 'ml.inf1.6xlarge'
    ml_inf1_24xlarge = 'ml.inf1.24xlarge'
    ml_c6i_large = 'ml.c6i.large'
    ml_c6i_xlarge = 'ml.c6i.xlarge'
    ml_c6i_2xlarge = 'ml.c6i.2xlarge'
    ml_c6i_4xlarge = 'ml.c6i.4xlarge'
    ml_c6i_8xlarge = 'ml.c6i.8xlarge'
    ml_c6i_12xlarge = 'ml.c6i.12xlarge'
    ml_c6i_16xlarge = 'ml.c6i.16xlarge'
    ml_c6i_24xlarge = 'ml.c6i.24xlarge'
    ml_c6i_32xlarge = 'ml.c6i.32xlarge'
    ml_g5_xlarge = 'ml.g5.xlarge'
    ml_g5_2xlarge = 'ml.g5.2xlarge'
    ml_g5_4xlarge = 'ml.g5.4xlarge'
    ml_g5_8xlarge = 'ml.g5.8xlarge'
    ml_g5_12xlarge = 'ml.g5.12xlarge'
    ml_g5_16xlarge = 'ml.g5.16xlarge'
    ml_g5_24xlarge = 'ml.g5.24xlarge'
    ml_g5_48xlarge = 'ml.g5.48xlarge'
    ml_p4d_24xlarge = 'ml.p4d.24xlarge'
    ml_c7g_large = 'ml.c7g.large'
    ml_c7g_xlarge = 'ml.c7g.xlarge'
    ml_c7g_2xlarge = 'ml.c7g.2xlarge'
    ml_c7g_4xlarge = 'ml.c7g.4xlarge'
    ml_c7g_8xlarge = 'ml.c7g.8xlarge'
    ml_c7g_12xlarge = 'ml.c7g.12xlarge'
    ml_c7g_16xlarge = 'ml.c7g.16xlarge'
    ml_m6g_large = 'ml.m6g.large'
    ml_m6g_xlarge = 'ml.m6g.xlarge'
    ml_m6g_2xlarge = 'ml.m6g.2xlarge'
    ml_m6g_4xlarge = 'ml.m6g.4xlarge'
    ml_m6g_8xlarge = 'ml.m6g.8xlarge'
    ml_m6g_12xlarge = 'ml.m6g.12xlarge'
    ml_m6g_16xlarge = 'ml.m6g.16xlarge'
    ml_m6gd_large = 'ml.m6gd.large'
    ml_m6gd_xlarge = 'ml.m6gd.xlarge'
    ml_m6gd_2xlarge = 'ml.m6gd.2xlarge'
    ml_m6gd_4xlarge = 'ml.m6gd.4xlarge'
    ml_m6gd_8xlarge = 'ml.m6gd.8xlarge'
    ml_m6gd_12xlarge = 'ml.m6gd.12xlarge'
    ml_m6gd_16xlarge = 'ml.m6gd.16xlarge'
    ml_c6g_large = 'ml.c6g.large'
    ml_c6g_xlarge = 'ml.c6g.xlarge'
    ml_c6g_2xlarge = 'ml.c6g.2xlarge'
    ml_c6g_4xlarge = 'ml.c6g.4xlarge'
    ml_c6g_8xlarge = 'ml.c6g.8xlarge'
    ml_c6g_12xlarge = 'ml.c6g.12xlarge'
    ml_c6g_16xlarge = 'ml.c6g.16xlarge'
    ml_c6gd_large = 'ml.c6gd.large'
    ml_c6gd_xlarge = 'ml.c6gd.xlarge'
    ml_c6gd_2xlarge = 'ml.c6gd.2xlarge'
    ml_c6gd_4xlarge = 'ml.c6gd.4xlarge'
    ml_c6gd_8xlarge = 'ml.c6gd.8xlarge'
    ml_c6gd_12xlarge = 'ml.c6gd.12xlarge'
    ml_c6gd_16xlarge = 'ml.c6gd.16xlarge'
    ml_c6gn_large = 'ml.c6gn.large'
    ml_c6gn_xlarge = 'ml.c6gn.xlarge'
    ml_c6gn_2xlarge = 'ml.c6gn.2xlarge'
    ml_c6gn_4xlarge = 'ml.c6gn.4xlarge'
    ml_c6gn_8xlarge = 'ml.c6gn.8xlarge'
    ml_c6gn_12xlarge = 'ml.c6gn.12xlarge'
    ml_c6gn_16xlarge = 'ml.c6gn.16xlarge'
    ml_r6g_large = 'ml.r6g.large'
    ml_r6g_xlarge = 'ml.r6g.xlarge'
    ml_r6g_2xlarge = 'ml.r6g.2xlarge'
    ml_r6g_4xlarge = 'ml.r6g.4xlarge'
    ml_r6g_8xlarge = 'ml.r6g.8xlarge'
    ml_r6g_12xlarge = 'ml.r6g.12xlarge'
    ml_r6g_16xlarge = 'ml.r6g.16xlarge'
    ml_r6gd_large = 'ml.r6gd.large'
    ml_r6gd_xlarge = 'ml.r6gd.xlarge'
    ml_r6gd_2xlarge = 'ml.r6gd.2xlarge'
    ml_r6gd_4xlarge = 'ml.r6gd.4xlarge'
    ml_r6gd_8xlarge = 'ml.r6gd.8xlarge'
    ml_r6gd_12xlarge = 'ml.r6gd.12xlarge'
    ml_r6gd_16xlarge = 'ml.r6gd.16xlarge'
    ml_p4de_24xlarge = 'ml.p4de.24xlarge'


class ProductionVariantModelDataDownloadTimeoutInSeconds(
    RootModel[conint(ge=60, le=3600)]
):
    root: conint(ge=60, le=3600)


class ProductionVariantSSMAccess(RootModel[bool]):
    root: bool


class ProductionVariantVolumeSizeInGB(RootModel[conint(ge=1, le=512)]):
    root: conint(ge=1, le=512)


class ProfilingIntervalInMilliseconds(RootModel[int]):
    root: int


class ProfilingParameters(RootModel[Optional[Dict[str, ConfigValue]]]):
    root: Optional[Dict[str, ConfigValue]] = None


class ProfilingStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class ProgrammingLang(
    RootModel[
        constr(pattern=r'^[a-zA-Z]+ ?\d+\.\d+(\.\d+)?$', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'^[a-zA-Z]+ ?\d+\.\d+(\.\d+)?$', min_length=1, max_length=128)


class ProjectArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:project:.*',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:project:.*',
        min_length=1,
        max_length=2048,
    )


class ProjectEntityName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,31}', min_length=1, max_length=32
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,31}', min_length=1, max_length=32
    )


class ProjectId(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', min_length=1, max_length=20)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', min_length=1, max_length=20)


class ProjectSortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class ProjectSortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class ProjectStatus(Enum):
    Pending = 'Pending'
    CreateInProgress = 'CreateInProgress'
    CreateCompleted = 'CreateCompleted'
    CreateFailed = 'CreateFailed'
    DeleteInProgress = 'DeleteInProgress'
    DeleteFailed = 'DeleteFailed'
    DeleteCompleted = 'DeleteCompleted'
    UpdateInProgress = 'UpdateInProgress'
    UpdateCompleted = 'UpdateCompleted'
    UpdateFailed = 'UpdateFailed'


class PropertyNameHint(RootModel[constr(pattern=r'.*', min_length=0, max_length=100)]):
    root: constr(pattern=r'.*', min_length=0, max_length=100)


class PropertyNameQuery(BaseModel):
    PropertyNameHint_1: PropertyNameHint = Field(..., alias='PropertyNameHint')


class ProvisionedProductStatusMessage(RootModel[constr(pattern=r'.*')]):
    root: constr(pattern=r'.*')


class ProvisioningParameterKey(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=1000)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=1000)


class ProvisioningParameterValue(RootModel[constr(pattern=r'.*', max_length=4096)]):
    root: constr(pattern=r'.*', max_length=4096)


class PutModelPackageGroupPolicyInput(BaseModel):
    ModelPackageGroupName: EntityName
    ResourcePolicy: PolicyString


class PutModelPackageGroupPolicyOutput(BaseModel):
    ModelPackageGroupArn_1: ModelPackageGroupArn = Field(
        ..., alias='ModelPackageGroupArn'
    )


class QueryLineageMaxDepth(RootModel[conint(le=10)]):
    root: conint(le=10)


class QueryLineageMaxResults(RootModel[conint(le=50)]):
    root: conint(le=50)


class QueryLineageStartArns(RootModel[List[AssociationEntityArn]]):
    root: List[AssociationEntityArn] = Field(..., max_length=1, min_length=0)


class QueryLineageTypes(RootModel[List[LineageType]]):
    root: List[LineageType] = Field(..., max_length=4)


class RStudioServerProAccessStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class RStudioServerProUserGroup(Enum):
    R_STUDIO_ADMIN = 'R_STUDIO_ADMIN'
    R_STUDIO_USER = 'R_STUDIO_USER'


class RandomSeed(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class RealtimeInferenceInstanceTypes(RootModel[List[ProductionVariantInstanceType]]):
    root: List[ProductionVariantInstanceType]


class RecommendationFailureReason(RootModel[str]):
    root: str


class RecommendationJobArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:inference-recommendations-job/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:inference-recommendations-job/.*',
        max_length=256,
    )


class RecommendationJobCompilationJobName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$', min_length=1, max_length=63
    )


class RecommendationJobDataInputConfig(
    RootModel[constr(pattern=r'[\S\s]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[\S\s]+', min_length=1, max_length=1024)


class RecommendationJobDescription(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class RecommendationJobName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,63}', min_length=1, max_length=64
    )


class RecommendationJobResourceLimit(BaseModel):
    MaxNumberOfTests_1: Optional[MaxNumberOfTests] = Field(
        None, alias='MaxNumberOfTests'
    )
    MaxParallelOfTests_1: Optional[MaxParallelOfTests] = Field(
        None, alias='MaxParallelOfTests'
    )


class RecommendationJobStatus(Enum):
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'


class RecommendationJobType(Enum):
    Default = 'Default'
    Advanced = 'Advanced'


class RecommendationJobVpcSecurityGroupId(
    RootModel[constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)]
):
    root: constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)


class RecommendationJobVpcSecurityGroupIds(
    RootModel[List[RecommendationJobVpcSecurityGroupId]]
):
    root: List[RecommendationJobVpcSecurityGroupId] = Field(
        ..., max_length=5, min_length=1
    )


class RecommendationJobVpcSubnetId(
    RootModel[constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)]
):
    root: constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)


class RecommendationJobVpcSubnets(RootModel[List[RecommendationJobVpcSubnetId]]):
    root: List[RecommendationJobVpcSubnetId] = Field(..., max_length=16, min_length=1)


class RecommendationStepType(Enum):
    BENCHMARK = 'BENCHMARK'


class RecordWrapper(Enum):
    None_ = 'None'
    RecordIO = 'RecordIO'


class RedshiftClusterId(RootModel[constr(pattern=r'.*', min_length=1, max_length=63)]):
    root: constr(pattern=r'.*', min_length=1, max_length=63) = Field(
        ..., description='The Redshift cluster Identifier.'
    )


class RedshiftDatabase(RootModel[constr(pattern=r'.*', min_length=1, max_length=64)]):
    root: constr(pattern=r'.*', min_length=1, max_length=64) = Field(
        ...,
        description='The name of the Redshift database used in Redshift query execution.',
    )


class RedshiftQueryString(
    RootModel[constr(pattern=r'[\s\S]+', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'[\s\S]+', min_length=1, max_length=4096) = Field(
        ..., description='The SQL query statements to be executed.'
    )


class RedshiftResultCompressionType(Enum):
    None_ = 'None'
    GZIP = 'GZIP'
    BZIP2 = 'BZIP2'
    ZSTD = 'ZSTD'
    SNAPPY = 'SNAPPY'


class RedshiftResultFormat(Enum):
    PARQUET = 'PARQUET'
    CSV = 'CSV'


class RedshiftUserName(RootModel[constr(pattern=r'.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*', min_length=1, max_length=128) = Field(
        ..., description='The database user name used in Redshift query execution.'
    )


class ReleaseNotes(RootModel[constr(pattern=r'.*', min_length=1, max_length=255)]):
    root: constr(pattern=r'.*', min_length=1, max_length=255)


class RepositoryAccessMode(Enum):
    Platform = 'Platform'
    Vpc = 'Vpc'


class RepositoryCredentialsProviderArn(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=2048)


class RepositoryUrl(
    RootModel[
        constr(pattern=r'^https://([.\-_a-zA-Z0-9]+/?){3,1016}$', max_length=1024)
    ]
):
    root: constr(pattern=r'^https://([.\-_a-zA-Z0-9]+/?){3,1016}$', max_length=1024)


class ResourceArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z-]*:sagemaker:[a-z0-9-]*:[0-9]{12}:.+', max_length=256
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z-]*:sagemaker:[a-z0-9-]*:[0-9]{12}:.+', max_length=256
    )


class ResourceConfigForUpdate(BaseModel):
    KeepAlivePeriodInSeconds_1: KeepAlivePeriodInSeconds = Field(
        ..., alias='KeepAlivePeriodInSeconds'
    )


class ResourceId(RootModel[constr(max_length=32)]):
    root: constr(max_length=32)


class ResourceInUse(RootModel[Any]):
    root: Any


class ResourceLimitExceeded(RootModel[Any]):
    root: Any


class ResourceLimits(BaseModel):
    MaxNumberOfTrainingJobs_1: Optional[MaxNumberOfTrainingJobs] = Field(
        None, alias='MaxNumberOfTrainingJobs'
    )
    MaxParallelTrainingJobs_1: MaxParallelTrainingJobs = Field(
        ..., alias='MaxParallelTrainingJobs'
    )
    MaxRuntimeInSeconds: Optional[HyperParameterTuningMaxRuntimeInSeconds] = None


class ResourceNotFound(RootModel[Any]):
    root: Any


class ResourcePolicyString(
    RootModel[constr(pattern=r'.*(?:[ \r\n\t].*)*', max_length=20480)]
):
    root: constr(pattern=r'.*(?:[ \r\n\t].*)*', max_length=20480)


class ResourcePropertyName(
    RootModel[constr(pattern=r'.+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'.+', min_length=1, max_length=255)


class ResourceRetainedBillableTimeInSeconds(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ResourceType(Enum):
    TrainingJob = 'TrainingJob'
    Experiment = 'Experiment'
    ExperimentTrial = 'ExperimentTrial'
    ExperimentTrialComponent = 'ExperimentTrialComponent'
    Endpoint = 'Endpoint'
    ModelPackage = 'ModelPackage'
    ModelPackageGroup = 'ModelPackageGroup'
    Pipeline = 'Pipeline'
    PipelineExecution = 'PipelineExecution'
    FeatureGroup = 'FeatureGroup'
    Project = 'Project'
    FeatureMetadata = 'FeatureMetadata'
    HyperParameterTuningJob = 'HyperParameterTuningJob'
    ModelCard = 'ModelCard'
    Model = 'Model'


class ResponseMIMEType(RootModel[constr(pattern=r'^[-\w]+\/.+$', max_length=1024)]):
    root: constr(pattern=r'^[-\w]+\/.+$', max_length=1024)


class ResponseMIMETypes(RootModel[List[ResponseMIMEType]]):
    root: List[ResponseMIMEType]


class RetentionType(Enum):
    Retain = 'Retain'
    Delete = 'Delete'


class RetryPipelineExecutionRequest(BaseModel):
    ClientRequestToken: IdempotencyToken
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )
    PipelineExecutionArn_1: PipelineExecutionArn = Field(
        ..., alias='PipelineExecutionArn'
    )


class RetryPipelineExecutionResponse(BaseModel):
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )


class RetryStrategy(BaseModel):
    MaximumRetryAttempts_1: MaximumRetryAttempts = Field(
        ..., alias='MaximumRetryAttempts'
    )


class RoleArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$',
        min_length=20,
        max_length=2048,
    )


class RootAccess(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class RuleConfigurationName(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=256)


class RuleEvaluationStatus(Enum):
    InProgress = 'InProgress'
    NoIssuesFound = 'NoIssuesFound'
    IssuesFound = 'IssuesFound'
    Error = 'Error'
    Stopping = 'Stopping'
    Stopped = 'Stopped'


class RuleParameters(RootModel[Optional[Dict[str, ConfigValue]]]):
    root: Optional[Dict[str, ConfigValue]] = None


class S3DataDistribution(Enum):
    FullyReplicated = 'FullyReplicated'
    ShardedByS3Key = 'ShardedByS3Key'


class S3DataType(Enum):
    ManifestFile = 'ManifestFile'
    S3Prefix = 'S3Prefix'
    AugmentedManifestFile = 'AugmentedManifestFile'


class S3OutputPath(
    RootModel[constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', max_length=1024)]
):
    root: constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', max_length=1024)


class S3Uri(
    RootModel[constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', max_length=1024)]
):
    root: constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', max_length=1024)


class SageMakerImageVersionAlias(
    RootModel[
        constr(pattern=r'(?!^[.-])^([a-zA-Z0-9-_.]+)$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'(?!^[.-])^([a-zA-Z0-9-_.]+)$', min_length=1, max_length=128)


class SageMakerImageVersionAliases(RootModel[List[SageMakerImageVersionAlias]]):
    root: List[SageMakerImageVersionAlias]


class SagemakerServicecatalogStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class SamplingPercentage(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class ScheduleExpression(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class ScheduleStatus(Enum):
    Pending = 'Pending'
    Failed = 'Failed'
    Scheduled = 'Scheduled'
    Stopped = 'Stopped'


class SearchSortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class SecondaryStatus(Enum):
    Starting = 'Starting'
    LaunchingMLInstances = 'LaunchingMLInstances'
    PreparingTrainingStack = 'PreparingTrainingStack'
    Downloading = 'Downloading'
    DownloadingTrainingImage = 'DownloadingTrainingImage'
    Training = 'Training'
    Uploading = 'Uploading'
    Stopping = 'Stopping'
    Stopped = 'Stopped'
    MaxRuntimeExceeded = 'MaxRuntimeExceeded'
    Completed = 'Completed'
    Failed = 'Failed'
    Interrupted = 'Interrupted'
    MaxWaitTimeExceeded = 'MaxWaitTimeExceeded'
    Updating = 'Updating'
    Restarting = 'Restarting'


class SecretArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:secretsmanager:[a-z0-9\-]*:[0-9]{12}:secret:.*',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:secretsmanager:[a-z0-9\-]*:[0-9]{12}:secret:.*',
        min_length=1,
        max_length=2048,
    )


class SecurityGroupId(RootModel[constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)]):
    root: constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)


class SecurityGroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., max_length=5)


class Seed(RootModel[int]):
    root: int


class SendPipelineExecutionStepFailureResponse(BaseModel):
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )


class SendPipelineExecutionStepSuccessResponse(BaseModel):
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )


class ServerlessMaxConcurrency(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class ServerlessMemorySizeInMB(RootModel[conint(ge=1024, le=6144)]):
    root: conint(ge=1024, le=6144)


class ServiceCatalogEntityId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-]*', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-]*', min_length=1, max_length=100)


class ServiceCatalogProvisionedProductDetails(BaseModel):
    ProvisionedProductId: Optional[ServiceCatalogEntityId] = None
    ProvisionedProductStatusMessage_1: Optional[ProvisionedProductStatusMessage] = (
        Field(None, alias='ProvisionedProductStatusMessage')
    )


class SessionExpirationDurationInSeconds(RootModel[conint(ge=1800, le=43200)]):
    root: conint(ge=1800, le=43200)


class ShadowModelVariantConfig(BaseModel):
    SamplingPercentage: Percentage
    ShadowModelVariantName: ModelVariantName


class ShadowModelVariantConfigList(RootModel[List[ShadowModelVariantConfig]]):
    root: List[ShadowModelVariantConfig] = Field(..., max_length=1, min_length=1)


class SharingSettings(BaseModel):
    NotebookOutputOption_1: Optional[NotebookOutputOption] = Field(
        None, alias='NotebookOutputOption'
    )
    S3KmsKeyId: Optional[KmsKeyId] = None
    S3OutputPath: Optional[S3Uri] = None


class ShuffleConfig(BaseModel):
    Seed_1: Seed = Field(..., alias='Seed')


class SingleSignOnUserIdentifier(RootModel[constr(pattern=r'UserName')]):
    root: constr(pattern=r'UserName')


class SnsTopicArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sns:[a-z0-9\-]*:[0-9]{12}:[a-zA-Z0-9_.-]+',
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sns:[a-z0-9\-]*:[0-9]{12}:[a-zA-Z0-9_.-]+',
        max_length=2048,
    )


class SortActionsBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class SortArtifactsBy(Enum):
    CreationTime = 'CreationTime'


class SortAssociationsBy(Enum):
    SourceArn = 'SourceArn'
    DestinationArn = 'DestinationArn'
    SourceType = 'SourceType'
    DestinationType = 'DestinationType'
    CreationTime = 'CreationTime'


class SortBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'


class SortContextsBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class SortExperimentsBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class SortInferenceExperimentsBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'


class SortLineageGroupsBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class SortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class SortPipelineExecutionsBy(Enum):
    CreationTime = 'CreationTime'
    PipelineExecutionArn = 'PipelineExecutionArn'


class SortPipelinesBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class SortTrialComponentsBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class SortTrialsBy(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'


class SourceIpConfig(BaseModel):
    Cidrs_1: Cidrs = Field(..., alias='Cidrs')


class SourceType(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class SourceUri(RootModel[constr(pattern=r'.*', max_length=2048)]):
    root: constr(pattern=r'.*', max_length=2048)


class SpaceArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:space/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:space/.*',
        max_length=256,
    )


class SpaceName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class SpaceSortKey(Enum):
    CreationTime = 'CreationTime'
    LastModifiedTime = 'LastModifiedTime'


class SpaceStatus(Enum):
    Deleting = 'Deleting'
    Failed = 'Failed'
    InService = 'InService'
    Pending = 'Pending'
    Updating = 'Updating'
    Update_Failed = 'Update_Failed'
    Delete_Failed = 'Delete_Failed'


class SpawnRate(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class SplitType(Enum):
    None_ = 'None'
    Line = 'Line'
    RecordIO = 'RecordIO'
    TFRecord = 'TFRecord'


class StageStatus(Enum):
    CREATING = 'CREATING'
    READYTODEPLOY = 'READYTODEPLOY'
    STARTING = 'STARTING'
    INPROGRESS = 'INPROGRESS'
    DEPLOYED = 'DEPLOYED'
    FAILED = 'FAILED'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'


class StartEdgeDeploymentStageRequest(BaseModel):
    EdgeDeploymentPlanName: EntityName
    StageName: EntityName


class StartInferenceExperimentRequest(BaseModel):
    Name: InferenceExperimentName


class StartInferenceExperimentResponse(BaseModel):
    InferenceExperimentArn_1: InferenceExperimentArn = Field(
        ..., alias='InferenceExperimentArn'
    )


class StartMonitoringScheduleRequest(BaseModel):
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )


class StartNotebookInstanceInput(BaseModel):
    NotebookInstanceName_1: NotebookInstanceName = Field(
        ..., alias='NotebookInstanceName'
    )


class StartPipelineExecutionResponse(BaseModel):
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )


class StatusDetails(RootModel[constr(pattern=r'.*', max_length=1024)]):
    root: constr(pattern=r'.*', max_length=1024)


class StatusMessage(RootModel[str]):
    root: str


class StepDescription(RootModel[constr(pattern=r'.*', min_length=0, max_length=3072)]):
    root: constr(pattern=r'.*', min_length=0, max_length=3072)


class StepDisplayName(RootModel[constr(pattern=r'.*', min_length=0, max_length=256)]):
    root: constr(pattern=r'.*', min_length=0, max_length=256)


class StepName(RootModel[constr(pattern=r'^[A-Za-z0-9\-_]*$', max_length=64)]):
    root: constr(pattern=r'^[A-Za-z0-9\-_]*$', max_length=64)


class StepStatus(Enum):
    Starting = 'Starting'
    Executing = 'Executing'
    Stopping = 'Stopping'
    Stopped = 'Stopped'
    Failed = 'Failed'
    Succeeded = 'Succeeded'


class StopAutoMLJobRequest(BaseModel):
    AutoMLJobName_1: AutoMLJobName = Field(..., alias='AutoMLJobName')


class StopCompilationJobRequest(BaseModel):
    CompilationJobName: EntityName


class StopEdgeDeploymentStageRequest(BaseModel):
    EdgeDeploymentPlanName: EntityName
    StageName: EntityName


class StopEdgePackagingJobRequest(BaseModel):
    EdgePackagingJobName: EntityName


class StopHyperParameterTuningJobRequest(BaseModel):
    HyperParameterTuningJobName_1: HyperParameterTuningJobName = Field(
        ..., alias='HyperParameterTuningJobName'
    )


class StopInferenceExperimentResponse(BaseModel):
    InferenceExperimentArn_1: InferenceExperimentArn = Field(
        ..., alias='InferenceExperimentArn'
    )


class StopInferenceRecommendationsJobRequest(BaseModel):
    JobName: RecommendationJobName


class StopLabelingJobRequest(BaseModel):
    LabelingJobName_1: LabelingJobName = Field(..., alias='LabelingJobName')


class StopMonitoringScheduleRequest(BaseModel):
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )


class StopNotebookInstanceInput(BaseModel):
    NotebookInstanceName_1: NotebookInstanceName = Field(
        ..., alias='NotebookInstanceName'
    )


class StopPipelineExecutionRequest(BaseModel):
    ClientRequestToken: IdempotencyToken
    PipelineExecutionArn_1: PipelineExecutionArn = Field(
        ..., alias='PipelineExecutionArn'
    )


class StopPipelineExecutionResponse(BaseModel):
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )


class StopProcessingJobRequest(BaseModel):
    ProcessingJobName_1: ProcessingJobName = Field(..., alias='ProcessingJobName')


class StoppingCondition(BaseModel):
    MaxRuntimeInSeconds_1: Optional[MaxRuntimeInSeconds] = Field(
        None, alias='MaxRuntimeInSeconds'
    )
    MaxWaitTimeInSeconds_1: Optional[MaxWaitTimeInSeconds] = Field(
        None, alias='MaxWaitTimeInSeconds'
    )


class String(RootModel[str]):
    root: str


class String1024(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class String128(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class String200(RootModel[constr(pattern=r'.+', min_length=1, max_length=200)]):
    root: constr(pattern=r'.+', min_length=1, max_length=200)


class String2048(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class String256(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class String3072(RootModel[constr(max_length=3072)]):
    root: constr(max_length=3072)


class String40(RootModel[constr(max_length=40)]):
    root: constr(max_length=40)


class String64(RootModel[constr(max_length=64)]):
    root: constr(max_length=64)


class String8192(RootModel[constr(max_length=8192)]):
    root: constr(max_length=8192)


class StringParameterValue(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class StudioLifecycleConfigAppType(Enum):
    JupyterServer = 'JupyterServer'
    KernelGateway = 'KernelGateway'


class StudioLifecycleConfigArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:studio-lifecycle-config/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:studio-lifecycle-config/.*',
        max_length=256,
    )


class StudioLifecycleConfigContent(
    RootModel[constr(pattern=r'[\S\s]+', min_length=1, max_length=16384)]
):
    root: constr(pattern=r'[\S\s]+', min_length=1, max_length=16384)


class StudioLifecycleConfigName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class StudioLifecycleConfigSortKey(Enum):
    CreationTime = 'CreationTime'
    LastModifiedTime = 'LastModifiedTime'
    Name = 'Name'


class SubnetId(RootModel[constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)]):
    root: constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)


class Subnets(RootModel[List[SubnetId]]):
    root: List[SubnetId] = Field(..., max_length=16, min_length=1)


class Success(RootModel[bool]):
    root: bool


class SuggestionQuery(BaseModel):
    PropertyNameQuery_1: Optional[PropertyNameQuery] = Field(
        None, alias='PropertyNameQuery'
    )


class TableFormat(Enum):
    Glue = 'Glue'
    Iceberg = 'Iceberg'


class TableName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TargetAttributeName(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class TargetDevice(Enum):
    lambda_ = 'lambda'
    ml_m4 = 'ml_m4'
    ml_m5 = 'ml_m5'
    ml_c4 = 'ml_c4'
    ml_c5 = 'ml_c5'
    ml_p2 = 'ml_p2'
    ml_p3 = 'ml_p3'
    ml_g4dn = 'ml_g4dn'
    ml_inf1 = 'ml_inf1'
    ml_eia2 = 'ml_eia2'
    jetson_tx1 = 'jetson_tx1'
    jetson_tx2 = 'jetson_tx2'
    jetson_nano = 'jetson_nano'
    jetson_xavier = 'jetson_xavier'
    rasp3b = 'rasp3b'
    imx8qm = 'imx8qm'
    deeplens = 'deeplens'
    rk3399 = 'rk3399'
    rk3288 = 'rk3288'
    aisage = 'aisage'
    sbe_c = 'sbe_c'
    qcs605 = 'qcs605'
    qcs603 = 'qcs603'
    sitara_am57x = 'sitara_am57x'
    amba_cv2 = 'amba_cv2'
    amba_cv22 = 'amba_cv22'
    amba_cv25 = 'amba_cv25'
    x86_win32 = 'x86_win32'
    x86_win64 = 'x86_win64'
    coreml = 'coreml'
    jacinto_tda4vm = 'jacinto_tda4vm'
    imx8mplus = 'imx8mplus'


class TargetLabelColumn(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class TargetObjectiveMetricValue(RootModel[float]):
    root: float


class TargetPlatformAccelerator(Enum):
    INTEL_GRAPHICS = 'INTEL_GRAPHICS'
    MALI = 'MALI'
    NVIDIA = 'NVIDIA'
    NNA = 'NNA'


class TargetPlatformArch(Enum):
    X86_64 = 'X86_64'
    X86 = 'X86'
    ARM64 = 'ARM64'
    ARM_EABI = 'ARM_EABI'
    ARM_EABIHF = 'ARM_EABIHF'


class TargetPlatformOs(Enum):
    ANDROID = 'ANDROID'
    LINUX = 'LINUX'


class TaskAvailabilityLifetimeInSeconds(RootModel[conint(ge=60)]):
    root: conint(ge=60)


class TaskCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class TaskDescription(RootModel[constr(pattern=r'.+', min_length=1, max_length=255)]):
    root: constr(pattern=r'.+', min_length=1, max_length=255)


class TaskInput(RootModel[constr(pattern=r'[\S\s]+', min_length=2, max_length=128000)]):
    root: constr(pattern=r'[\S\s]+', min_length=2, max_length=128000)


class TaskKeyword(
    RootModel[
        constr(pattern=r'^[A-Za-z0-9]+( [A-Za-z0-9]+)*$', min_length=1, max_length=30)
    ]
):
    root: constr(pattern=r'^[A-Za-z0-9]+( [A-Za-z0-9]+)*$', min_length=1, max_length=30)


class TaskKeywords(RootModel[List[TaskKeyword]]):
    root: List[TaskKeyword] = Field(..., max_length=5, min_length=1)


class TaskTimeLimitInSeconds(RootModel[conint(ge=30)]):
    root: conint(ge=30)


class TaskTitle(
    RootModel[
        constr(
            pattern=r'^[\t\n\r -\uD7FF\uE000-\uFFFD]*$', min_length=1, max_length=128
        )
    ]
):
    root: constr(
        pattern=r'^[\t\n\r -\uD7FF\uE000-\uFFFD]*$', min_length=1, max_length=128
    )


class TemplateContent(
    RootModel[constr(pattern=r'[\S\s]+', min_length=1, max_length=128000)]
):
    root: constr(pattern=r'[\S\s]+', min_length=1, max_length=128000)


class TemplateContentSha256(RootModel[constr(min_length=1, max_length=128000)]):
    root: constr(min_length=1, max_length=128000)


class TemplateUrl(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class TensorBoardOutputConfig(BaseModel):
    LocalPath: Optional[DirectoryPath] = None
    S3OutputPath: S3Uri


class TenthFractionsOfACent(RootModel[conint(ge=0, le=9)]):
    root: conint(ge=0, le=9)


class TerminationWaitInSeconds(RootModel[conint(ge=0, le=3600)]):
    root: conint(ge=0, le=3600)


class ThingName(RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', max_length=128)]):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', max_length=128)


class TimeSeriesForecastingSettings(BaseModel):
    AmazonForecastRoleArn: Optional[RoleArn] = None
    Status: Optional[FeatureStatus] = None


class Timestamp(RootModel[datetime]):
    root: datetime


class TrafficDurationInSeconds(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class TrafficRoutingConfigType(Enum):
    ALL_AT_ONCE = 'ALL_AT_ONCE'
    CANARY = 'CANARY'
    LINEAR = 'LINEAR'


class TrafficType(Enum):
    PHASES = 'PHASES'


class TrainingContainerArgument(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class TrainingContainerArguments(RootModel[List[TrainingContainerArgument]]):
    root: List[TrainingContainerArgument] = Field(..., max_length=100, min_length=1)


class TrainingContainerEntrypointString(
    RootModel[constr(pattern=r'.*', max_length=256)]
):
    root: constr(pattern=r'.*', max_length=256)


class TrainingEnvironmentKey(
    RootModel[constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]*', max_length=512)]
):
    root: constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]*', max_length=512)


class TrainingEnvironmentValue(RootModel[constr(pattern=r'[\S\s]*', max_length=512)]):
    root: constr(pattern=r'[\S\s]*', max_length=512)


class TrainingInputMode(Enum):
    Pipe = 'Pipe'
    File = 'File'
    FastFile = 'FastFile'


class TrainingInstanceCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class TrainingInstanceType(Enum):
    ml_m4_xlarge = 'ml.m4.xlarge'
    ml_m4_2xlarge = 'ml.m4.2xlarge'
    ml_m4_4xlarge = 'ml.m4.4xlarge'
    ml_m4_10xlarge = 'ml.m4.10xlarge'
    ml_m4_16xlarge = 'ml.m4.16xlarge'
    ml_g4dn_xlarge = 'ml.g4dn.xlarge'
    ml_g4dn_2xlarge = 'ml.g4dn.2xlarge'
    ml_g4dn_4xlarge = 'ml.g4dn.4xlarge'
    ml_g4dn_8xlarge = 'ml.g4dn.8xlarge'
    ml_g4dn_12xlarge = 'ml.g4dn.12xlarge'
    ml_g4dn_16xlarge = 'ml.g4dn.16xlarge'
    ml_m5_large = 'ml.m5.large'
    ml_m5_xlarge = 'ml.m5.xlarge'
    ml_m5_2xlarge = 'ml.m5.2xlarge'
    ml_m5_4xlarge = 'ml.m5.4xlarge'
    ml_m5_12xlarge = 'ml.m5.12xlarge'
    ml_m5_24xlarge = 'ml.m5.24xlarge'
    ml_c4_xlarge = 'ml.c4.xlarge'
    ml_c4_2xlarge = 'ml.c4.2xlarge'
    ml_c4_4xlarge = 'ml.c4.4xlarge'
    ml_c4_8xlarge = 'ml.c4.8xlarge'
    ml_p2_xlarge = 'ml.p2.xlarge'
    ml_p2_8xlarge = 'ml.p2.8xlarge'
    ml_p2_16xlarge = 'ml.p2.16xlarge'
    ml_p3_2xlarge = 'ml.p3.2xlarge'
    ml_p3_8xlarge = 'ml.p3.8xlarge'
    ml_p3_16xlarge = 'ml.p3.16xlarge'
    ml_p3dn_24xlarge = 'ml.p3dn.24xlarge'
    ml_p4d_24xlarge = 'ml.p4d.24xlarge'
    ml_c5_xlarge = 'ml.c5.xlarge'
    ml_c5_2xlarge = 'ml.c5.2xlarge'
    ml_c5_4xlarge = 'ml.c5.4xlarge'
    ml_c5_9xlarge = 'ml.c5.9xlarge'
    ml_c5_18xlarge = 'ml.c5.18xlarge'
    ml_c5n_xlarge = 'ml.c5n.xlarge'
    ml_c5n_2xlarge = 'ml.c5n.2xlarge'
    ml_c5n_4xlarge = 'ml.c5n.4xlarge'
    ml_c5n_9xlarge = 'ml.c5n.9xlarge'
    ml_c5n_18xlarge = 'ml.c5n.18xlarge'
    ml_g5_xlarge = 'ml.g5.xlarge'
    ml_g5_2xlarge = 'ml.g5.2xlarge'
    ml_g5_4xlarge = 'ml.g5.4xlarge'
    ml_g5_8xlarge = 'ml.g5.8xlarge'
    ml_g5_16xlarge = 'ml.g5.16xlarge'
    ml_g5_12xlarge = 'ml.g5.12xlarge'
    ml_g5_24xlarge = 'ml.g5.24xlarge'
    ml_g5_48xlarge = 'ml.g5.48xlarge'
    ml_trn1_2xlarge = 'ml.trn1.2xlarge'
    ml_trn1_32xlarge = 'ml.trn1.32xlarge'


class TrainingInstanceTypes(RootModel[List[TrainingInstanceType]]):
    root: List[TrainingInstanceType]


class TrainingJobArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:training-job/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:training-job/.*',
        max_length=256,
    )


class TrainingJobEarlyStoppingType(Enum):
    Off = 'Off'
    Auto = 'Auto'


class TrainingJobName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
    )


class TrainingJobSortByOptions(Enum):
    Name = 'Name'
    CreationTime = 'CreationTime'
    Status = 'Status'
    FinalObjectiveMetricValue = 'FinalObjectiveMetricValue'


class TrainingJobStatus(Enum):
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Stopping = 'Stopping'
    Stopped = 'Stopped'


class TrainingJobStatusCounter(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class TrainingJobStatusCounters(BaseModel):
    Completed: Optional[TrainingJobStatusCounter] = None
    InProgress: Optional[TrainingJobStatusCounter] = None
    NonRetryableError: Optional[TrainingJobStatusCounter] = None
    RetryableError: Optional[TrainingJobStatusCounter] = None
    Stopped: Optional[TrainingJobStatusCounter] = None


class TrainingJobStepMetadata(BaseModel):
    Arn: Optional[TrainingJobArn] = None


class TrainingRepositoryAccessMode(Enum):
    Platform = 'Platform'
    Vpc = 'Vpc'


class TrainingRepositoryCredentialsProviderArn(
    RootModel[
        constr(
            pattern=r'arn:[\p{Alnum}\-]+:lambda:[\p{Alnum}\-]+:[0-9]{12}:function:.*',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:[\p{Alnum}\-]+:lambda:[\p{Alnum}\-]+:[0-9]{12}:function:.*',
        min_length=1,
        max_length=2048,
    )


class TrainingTimeInSeconds(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class TransformEnvironmentKey(
    RootModel[constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]{0,1023}', max_length=1024)]
):
    root: constr(pattern=r'[a-zA-Z_][a-zA-Z0-9_]{0,1023}', max_length=1024)


class TransformEnvironmentValue(
    RootModel[constr(pattern=r'[\S\s]*', max_length=10240)]
):
    root: constr(pattern=r'[\S\s]*', max_length=10240)


class TransformInstanceCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class TransformInstanceType(Enum):
    ml_m4_xlarge = 'ml.m4.xlarge'
    ml_m4_2xlarge = 'ml.m4.2xlarge'
    ml_m4_4xlarge = 'ml.m4.4xlarge'
    ml_m4_10xlarge = 'ml.m4.10xlarge'
    ml_m4_16xlarge = 'ml.m4.16xlarge'
    ml_c4_xlarge = 'ml.c4.xlarge'
    ml_c4_2xlarge = 'ml.c4.2xlarge'
    ml_c4_4xlarge = 'ml.c4.4xlarge'
    ml_c4_8xlarge = 'ml.c4.8xlarge'
    ml_p2_xlarge = 'ml.p2.xlarge'
    ml_p2_8xlarge = 'ml.p2.8xlarge'
    ml_p2_16xlarge = 'ml.p2.16xlarge'
    ml_p3_2xlarge = 'ml.p3.2xlarge'
    ml_p3_8xlarge = 'ml.p3.8xlarge'
    ml_p3_16xlarge = 'ml.p3.16xlarge'
    ml_c5_xlarge = 'ml.c5.xlarge'
    ml_c5_2xlarge = 'ml.c5.2xlarge'
    ml_c5_4xlarge = 'ml.c5.4xlarge'
    ml_c5_9xlarge = 'ml.c5.9xlarge'
    ml_c5_18xlarge = 'ml.c5.18xlarge'
    ml_m5_large = 'ml.m5.large'
    ml_m5_xlarge = 'ml.m5.xlarge'
    ml_m5_2xlarge = 'ml.m5.2xlarge'
    ml_m5_4xlarge = 'ml.m5.4xlarge'
    ml_m5_12xlarge = 'ml.m5.12xlarge'
    ml_m5_24xlarge = 'ml.m5.24xlarge'
    ml_g4dn_xlarge = 'ml.g4dn.xlarge'
    ml_g4dn_2xlarge = 'ml.g4dn.2xlarge'
    ml_g4dn_4xlarge = 'ml.g4dn.4xlarge'
    ml_g4dn_8xlarge = 'ml.g4dn.8xlarge'
    ml_g4dn_12xlarge = 'ml.g4dn.12xlarge'
    ml_g4dn_16xlarge = 'ml.g4dn.16xlarge'


class TransformInstanceTypes(RootModel[List[TransformInstanceType]]):
    root: List[TransformInstanceType] = Field(..., min_length=1)


class TransformJobArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:transform-job/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:transform-job/.*',
        max_length=256,
    )


class TransformJobName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
    )


class TransformJobStatus(Enum):
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Stopping = 'Stopping'
    Stopped = 'Stopped'


class TransformJobStepMetadata(BaseModel):
    Arn: Optional[TransformJobArn] = None


class TransformJobSummary(BaseModel):
    CreationTime: Timestamp
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedTime: Optional[Timestamp] = None
    TransformEndTime: Optional[Timestamp] = None
    TransformJobArn_1: TransformJobArn = Field(..., alias='TransformJobArn')
    TransformJobName_1: TransformJobName = Field(..., alias='TransformJobName')
    TransformJobStatus_1: TransformJobStatus = Field(..., alias='TransformJobStatus')


class TransformOutput(BaseModel):
    Accept_1: Optional[Accept] = Field(None, alias='Accept')
    AssembleWith: Optional[AssemblyType] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    S3OutputPath: S3Uri


class TransformResources(BaseModel):
    InstanceCount: TransformInstanceCount
    InstanceType: TransformInstanceType
    VolumeKmsKeyId: Optional[KmsKeyId] = None


class TransformS3DataSource(BaseModel):
    S3DataType_1: S3DataType = Field(..., alias='S3DataType')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class TrialArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:experiment-trial/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:experiment-trial/.*',
        max_length=256,
    )


class TrialComponentArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:experiment-trial-component/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:experiment-trial-component/.*',
        max_length=256,
    )


class TrialComponentArtifactValue(RootModel[constr(pattern=r'.*', max_length=2048)]):
    root: constr(pattern=r'.*', max_length=2048)


class TrialComponentKey256(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class TrialComponentKey64(RootModel[constr(pattern=r'.*', max_length=64)]):
    root: constr(pattern=r'.*', max_length=64)


class TrialComponentParameterValue(BaseModel):
    NumberValue: Optional[DoubleParameterValue] = None
    StringValue: Optional[StringParameterValue] = None


class TrialComponentParameters(
    RootModel[Optional[Dict[str, TrialComponentParameterValue]]]
):
    root: Optional[Dict[str, TrialComponentParameterValue]] = None


class TrialComponentPrimaryStatus(Enum):
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Stopping = 'Stopping'
    Stopped = 'Stopped'


class TrialComponentSourceArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:.*', max_length=256
    )


class TrialComponentStatusMessage(RootModel[constr(pattern=r'.*', max_length=1024)]):
    root: constr(pattern=r'.*', max_length=1024)


class TrialSourceArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:.*', max_length=256
    )


class TuningJobStepMetaData(BaseModel):
    Arn: Optional[HyperParameterTuningJobArn] = None


class USD(BaseModel):
    Cents_1: Optional[Cents] = Field(None, alias='Cents')
    Dollars_1: Optional[Dollars] = Field(None, alias='Dollars')
    TenthFractionsOfACent_1: Optional[TenthFractionsOfACent] = Field(
        None, alias='TenthFractionsOfACent'
    )


class UiConfig(BaseModel):
    HumanTaskUiArn_1: Optional[HumanTaskUiArn] = Field(None, alias='HumanTaskUiArn')
    UiTemplateS3Uri: Optional[S3Uri] = None


class UiTemplate(BaseModel):
    Content: TemplateContent


class UiTemplateInfo(BaseModel):
    ContentSha256: Optional[TemplateContentSha256] = None
    Url: Optional[TemplateUrl] = None


class UpdateActionResponse(BaseModel):
    ActionArn_1: Optional[ActionArn] = Field(None, alias='ActionArn')


class UpdateAppImageConfigResponse(BaseModel):
    AppImageConfigArn_1: Optional[AppImageConfigArn] = Field(
        None, alias='AppImageConfigArn'
    )


class UpdateArtifactResponse(BaseModel):
    ArtifactArn_1: Optional[ArtifactArn] = Field(None, alias='ArtifactArn')


class UpdateCodeRepositoryOutput(BaseModel):
    CodeRepositoryArn_1: CodeRepositoryArn = Field(..., alias='CodeRepositoryArn')


class UpdateContextResponse(BaseModel):
    ContextArn_1: Optional[ContextArn] = Field(None, alias='ContextArn')


class UpdateDomainResponse(BaseModel):
    DomainArn_1: Optional[DomainArn] = Field(None, alias='DomainArn')


class UpdateEndpointOutput(BaseModel):
    EndpointArn_1: EndpointArn = Field(..., alias='EndpointArn')


class UpdateEndpointWeightsAndCapacitiesOutput(BaseModel):
    EndpointArn_1: EndpointArn = Field(..., alias='EndpointArn')


class UpdateExperimentRequest(BaseModel):
    Description: Optional[ExperimentDescription] = None
    DisplayName: Optional[ExperimentEntityName] = None
    ExperimentName: ExperimentEntityName


class UpdateExperimentResponse(BaseModel):
    ExperimentArn_1: Optional[ExperimentArn] = Field(None, alias='ExperimentArn')


class UpdateFeatureGroupResponse(BaseModel):
    FeatureGroupArn_1: FeatureGroupArn = Field(..., alias='FeatureGroupArn')


class UpdateHubRequest(BaseModel):
    HubDescription_1: Optional[HubDescription] = Field(None, alias='HubDescription')
    HubDisplayName_1: Optional[HubDisplayName] = Field(None, alias='HubDisplayName')
    HubName_1: HubName = Field(..., alias='HubName')
    HubSearchKeywords: Optional[HubSearchKeywordList] = None


class UpdateHubResponse(BaseModel):
    HubArn_1: HubArn = Field(..., alias='HubArn')


class UpdateImageRequest(BaseModel):
    DeleteProperties: Optional[ImageDeletePropertyList] = None
    Description: Optional[ImageDescription] = None
    DisplayName: Optional[ImageDisplayName] = None
    ImageName_1: ImageName = Field(..., alias='ImageName')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class UpdateImageResponse(BaseModel):
    ImageArn_1: Optional[ImageArn] = Field(None, alias='ImageArn')


class UpdateImageVersionResponse(BaseModel):
    ImageVersionArn_1: Optional[ImageVersionArn] = Field(None, alias='ImageVersionArn')


class UpdateInferenceExperimentResponse(BaseModel):
    InferenceExperimentArn_1: InferenceExperimentArn = Field(
        ..., alias='InferenceExperimentArn'
    )


class UpdateModelCardRequest(BaseModel):
    Content: Optional[ModelCardContent] = None
    ModelCardName: EntityName
    ModelCardStatus_1: Optional[ModelCardStatus] = Field(None, alias='ModelCardStatus')


class UpdateModelCardResponse(BaseModel):
    ModelCardArn_1: ModelCardArn = Field(..., alias='ModelCardArn')


class UpdateModelPackageOutput(BaseModel):
    ModelPackageArn_1: ModelPackageArn = Field(..., alias='ModelPackageArn')


class UpdateMonitoringAlertRequest(BaseModel):
    DatapointsToAlert: MonitoringDatapointsToAlert
    EvaluationPeriod: MonitoringEvaluationPeriod
    MonitoringAlertName_1: MonitoringAlertName = Field(..., alias='MonitoringAlertName')
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )


class UpdateMonitoringAlertResponse(BaseModel):
    MonitoringAlertName_1: Optional[MonitoringAlertName] = Field(
        None, alias='MonitoringAlertName'
    )
    MonitoringScheduleArn_1: MonitoringScheduleArn = Field(
        ..., alias='MonitoringScheduleArn'
    )


class UpdateMonitoringScheduleResponse(BaseModel):
    MonitoringScheduleArn_1: MonitoringScheduleArn = Field(
        ..., alias='MonitoringScheduleArn'
    )


class UpdateNotebookInstanceLifecycleConfigOutput(BaseModel):
    pass


class UpdateNotebookInstanceOutput(BaseModel):
    pass


class UpdatePipelineExecutionRequest(BaseModel):
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )
    PipelineExecutionArn_1: PipelineExecutionArn = Field(
        ..., alias='PipelineExecutionArn'
    )
    PipelineExecutionDescription_1: Optional[PipelineExecutionDescription] = Field(
        None, alias='PipelineExecutionDescription'
    )
    PipelineExecutionDisplayName: Optional[PipelineExecutionName] = None


class UpdatePipelineExecutionResponse(BaseModel):
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )


class UpdatePipelineResponse(BaseModel):
    PipelineArn_1: Optional[PipelineArn] = Field(None, alias='PipelineArn')


class UpdateProjectOutput(BaseModel):
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')


class UpdateSpaceResponse(BaseModel):
    SpaceArn_1: Optional[SpaceArn] = Field(None, alias='SpaceArn')


class UpdateTrainingJobResponse(BaseModel):
    TrainingJobArn_1: TrainingJobArn = Field(..., alias='TrainingJobArn')


class UpdateTrialComponentResponse(BaseModel):
    TrialComponentArn_1: Optional[TrialComponentArn] = Field(
        None, alias='TrialComponentArn'
    )


class UpdateTrialRequest(BaseModel):
    DisplayName: Optional[ExperimentEntityName] = None
    TrialName: ExperimentEntityName


class UpdateTrialResponse(BaseModel):
    TrialArn_1: Optional[TrialArn] = Field(None, alias='TrialArn')


class Url(RootModel[constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', max_length=1024)]):
    root: constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', max_length=1024)


class UserProfileArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:user-profile/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:user-profile/.*',
        max_length=256,
    )


class UserProfileName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class UserProfileSortKey(Enum):
    CreationTime = 'CreationTime'
    LastModifiedTime = 'LastModifiedTime'


class UserProfileStatus(Enum):
    Deleting = 'Deleting'
    Failed = 'Failed'
    InService = 'InService'
    Pending = 'Pending'
    Updating = 'Updating'
    Update_Failed = 'Update_Failed'
    Delete_Failed = 'Delete_Failed'


class UtilizationMetric(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class ValidationFraction(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class VariantName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', max_length=63)


class VariantPropertyType(Enum):
    DesiredInstanceCount = 'DesiredInstanceCount'
    DesiredWeight = 'DesiredWeight'
    DataCaptureConfig = 'DataCaptureConfig'


class VariantStatus(Enum):
    Creating = 'Creating'
    Updating = 'Updating'
    Deleting = 'Deleting'
    ActivatingTraffic = 'ActivatingTraffic'
    Baking = 'Baking'


class VariantStatusMessage(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class VariantWeight(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class VendorGuidance(Enum):
    NOT_PROVIDED = 'NOT_PROVIDED'
    STABLE = 'STABLE'
    TO_BE_ARCHIVED = 'TO_BE_ARCHIVED'
    ARCHIVED = 'ARCHIVED'


class VersionId(RootModel[constr(pattern=r'.+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.+', min_length=1, max_length=1024)


class VersionedArnOrName(
    RootModel[
        constr(
            pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:[a-z\-]*\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)(\/[0-9]{1,5})?$',
            min_length=1,
            max_length=176,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'(arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:[a-z\-]*\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)(\/[0-9]{1,5})?$',
        min_length=1,
        max_length=176,
    )


class Vertex(BaseModel):
    Arn: Optional[AssociationEntityArn] = None
    LineageType_1: Optional[LineageType] = Field(None, alias='LineageType')
    Type: Optional[String40] = None


class Vertices(RootModel[List[Vertex]]):
    root: List[Vertex]


class VolumeSizeInGB(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class VpcId(RootModel[constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)]):
    root: constr(pattern=r'[-0-9a-zA-Z]+', max_length=32)


class VpcSecurityGroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., max_length=5, min_length=1)


class WaitIntervalInSeconds(RootModel[conint(ge=0, le=3600)]):
    root: conint(ge=0, le=3600)


class WarmPoolResourceStatus(Enum):
    Available = 'Available'
    Terminated = 'Terminated'
    Reused = 'Reused'
    InUse = 'InUse'


class WarmPoolStatus(BaseModel):
    ResourceRetainedBillableTimeInSeconds_1: Optional[
        ResourceRetainedBillableTimeInSeconds
    ] = Field(None, alias='ResourceRetainedBillableTimeInSeconds')
    ReusedByJob: Optional[TrainingJobName] = None
    Status: WarmPoolResourceStatus


class WorkforceArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:workforce/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:workforce/.*',
        max_length=256,
    )


class WorkforceFailureReason(
    RootModel[constr(pattern=r'.+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'.+', min_length=1, max_length=1024)


class WorkforceName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9]([a-zA-Z0-9\-]){0,62}$', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9]([a-zA-Z0-9\-]){0,62}$', min_length=1, max_length=63
    )


class WorkforceSecurityGroupId(
    RootModel[constr(pattern=r'^sg-[0-9a-z]*$', max_length=32)]
):
    root: constr(pattern=r'^sg-[0-9a-z]*$', max_length=32)


class WorkforceSecurityGroupIds(RootModel[List[WorkforceSecurityGroupId]]):
    root: List[WorkforceSecurityGroupId] = Field(..., max_length=5, min_length=1)


class WorkforceStatus(Enum):
    Initializing = 'Initializing'
    Updating = 'Updating'
    Deleting = 'Deleting'
    Failed = 'Failed'
    Active = 'Active'


class WorkforceSubnetId(
    RootModel[constr(pattern=r'^subnet-[0-9a-z]*$', max_length=32)]
):
    root: constr(pattern=r'^subnet-[0-9a-z]*$', max_length=32)


class WorkforceSubnets(RootModel[List[WorkforceSubnetId]]):
    root: List[WorkforceSubnetId] = Field(..., max_length=16, min_length=1)


class WorkforceVpcEndpointId(
    RootModel[constr(pattern=r'^vpce-[0-9a-z]*$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^vpce-[0-9a-z]*$', min_length=1, max_length=255)


class WorkforceVpcId(RootModel[constr(pattern=r'^vpc-[0-9a-z]*$', max_length=32)]):
    root: constr(pattern=r'^vpc-[0-9a-z]*$', max_length=32)


class WorkteamArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:workteam/.*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:workteam/.*',
        max_length=256,
    )


class WorkteamName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}', min_length=1, max_length=63
    )


class XAmzTarget(Enum):
    SageMaker_AddAssociation = 'SageMaker.AddAssociation'


class XAmzTarget1(Enum):
    SageMaker_AddTags = 'SageMaker.AddTags'


class XAmzTarget2(Enum):
    SageMaker_AssociateTrialComponent = 'SageMaker.AssociateTrialComponent'


class XAmzTarget3(Enum):
    SageMaker_BatchDescribeModelPackage = 'SageMaker.BatchDescribeModelPackage'


class XAmzTarget4(Enum):
    SageMaker_CreateAction = 'SageMaker.CreateAction'


class XAmzTarget5(Enum):
    SageMaker_CreateAlgorithm = 'SageMaker.CreateAlgorithm'


class XAmzTarget6(Enum):
    SageMaker_CreateApp = 'SageMaker.CreateApp'


class XAmzTarget7(Enum):
    SageMaker_CreateAppImageConfig = 'SageMaker.CreateAppImageConfig'


class XAmzTarget8(Enum):
    SageMaker_CreateArtifact = 'SageMaker.CreateArtifact'


class XAmzTarget9(Enum):
    SageMaker_CreateAutoMLJob = 'SageMaker.CreateAutoMLJob'


class XAmzTarget10(Enum):
    SageMaker_CreateAutoMLJobV2 = 'SageMaker.CreateAutoMLJobV2'


class XAmzTarget11(Enum):
    SageMaker_CreateCodeRepository = 'SageMaker.CreateCodeRepository'


class XAmzTarget12(Enum):
    SageMaker_CreateCompilationJob = 'SageMaker.CreateCompilationJob'


class XAmzTarget13(Enum):
    SageMaker_CreateContext = 'SageMaker.CreateContext'


class XAmzTarget14(Enum):
    SageMaker_CreateDataQualityJobDefinition = (
        'SageMaker.CreateDataQualityJobDefinition'
    )


class XAmzTarget15(Enum):
    SageMaker_CreateDeviceFleet = 'SageMaker.CreateDeviceFleet'


class XAmzTarget16(Enum):
    SageMaker_CreateDomain = 'SageMaker.CreateDomain'


class XAmzTarget17(Enum):
    SageMaker_CreateEdgeDeploymentPlan = 'SageMaker.CreateEdgeDeploymentPlan'


class XAmzTarget18(Enum):
    SageMaker_CreateEdgeDeploymentStage = 'SageMaker.CreateEdgeDeploymentStage'


class XAmzTarget19(Enum):
    SageMaker_CreateEdgePackagingJob = 'SageMaker.CreateEdgePackagingJob'


class XAmzTarget20(Enum):
    SageMaker_CreateEndpoint = 'SageMaker.CreateEndpoint'


class XAmzTarget21(Enum):
    SageMaker_CreateEndpointConfig = 'SageMaker.CreateEndpointConfig'


class XAmzTarget22(Enum):
    SageMaker_CreateExperiment = 'SageMaker.CreateExperiment'


class XAmzTarget23(Enum):
    SageMaker_CreateFeatureGroup = 'SageMaker.CreateFeatureGroup'


class XAmzTarget24(Enum):
    SageMaker_CreateFlowDefinition = 'SageMaker.CreateFlowDefinition'


class XAmzTarget25(Enum):
    SageMaker_CreateHub = 'SageMaker.CreateHub'


class XAmzTarget26(Enum):
    SageMaker_CreateHumanTaskUi = 'SageMaker.CreateHumanTaskUi'


class XAmzTarget27(Enum):
    SageMaker_CreateHyperParameterTuningJob = 'SageMaker.CreateHyperParameterTuningJob'


class XAmzTarget28(Enum):
    SageMaker_CreateImage = 'SageMaker.CreateImage'


class XAmzTarget29(Enum):
    SageMaker_CreateImageVersion = 'SageMaker.CreateImageVersion'


class XAmzTarget30(Enum):
    SageMaker_CreateInferenceExperiment = 'SageMaker.CreateInferenceExperiment'


class XAmzTarget31(Enum):
    SageMaker_CreateInferenceRecommendationsJob = (
        'SageMaker.CreateInferenceRecommendationsJob'
    )


class XAmzTarget32(Enum):
    SageMaker_CreateLabelingJob = 'SageMaker.CreateLabelingJob'


class XAmzTarget33(Enum):
    SageMaker_CreateModel = 'SageMaker.CreateModel'


class XAmzTarget34(Enum):
    SageMaker_CreateModelBiasJobDefinition = 'SageMaker.CreateModelBiasJobDefinition'


class XAmzTarget35(Enum):
    SageMaker_CreateModelCard = 'SageMaker.CreateModelCard'


class XAmzTarget36(Enum):
    SageMaker_CreateModelCardExportJob = 'SageMaker.CreateModelCardExportJob'


class XAmzTarget37(Enum):
    SageMaker_CreateModelExplainabilityJobDefinition = (
        'SageMaker.CreateModelExplainabilityJobDefinition'
    )


class XAmzTarget38(Enum):
    SageMaker_CreateModelPackage = 'SageMaker.CreateModelPackage'


class XAmzTarget39(Enum):
    SageMaker_CreateModelPackageGroup = 'SageMaker.CreateModelPackageGroup'


class XAmzTarget40(Enum):
    SageMaker_CreateModelQualityJobDefinition = (
        'SageMaker.CreateModelQualityJobDefinition'
    )


class XAmzTarget41(Enum):
    SageMaker_CreateMonitoringSchedule = 'SageMaker.CreateMonitoringSchedule'


class XAmzTarget42(Enum):
    SageMaker_CreateNotebookInstance = 'SageMaker.CreateNotebookInstance'


class XAmzTarget43(Enum):
    SageMaker_CreateNotebookInstanceLifecycleConfig = (
        'SageMaker.CreateNotebookInstanceLifecycleConfig'
    )


class XAmzTarget44(Enum):
    SageMaker_CreatePipeline = 'SageMaker.CreatePipeline'


class XAmzTarget45(Enum):
    SageMaker_CreatePresignedDomainUrl = 'SageMaker.CreatePresignedDomainUrl'


class XAmzTarget46(Enum):
    SageMaker_CreatePresignedNotebookInstanceUrl = (
        'SageMaker.CreatePresignedNotebookInstanceUrl'
    )


class XAmzTarget47(Enum):
    SageMaker_CreateProcessingJob = 'SageMaker.CreateProcessingJob'


class XAmzTarget48(Enum):
    SageMaker_CreateProject = 'SageMaker.CreateProject'


class XAmzTarget49(Enum):
    SageMaker_CreateSpace = 'SageMaker.CreateSpace'


class XAmzTarget50(Enum):
    SageMaker_CreateStudioLifecycleConfig = 'SageMaker.CreateStudioLifecycleConfig'


class XAmzTarget51(Enum):
    SageMaker_CreateTrainingJob = 'SageMaker.CreateTrainingJob'


class XAmzTarget52(Enum):
    SageMaker_CreateTransformJob = 'SageMaker.CreateTransformJob'


class XAmzTarget53(Enum):
    SageMaker_CreateTrial = 'SageMaker.CreateTrial'


class XAmzTarget54(Enum):
    SageMaker_CreateTrialComponent = 'SageMaker.CreateTrialComponent'


class XAmzTarget55(Enum):
    SageMaker_CreateUserProfile = 'SageMaker.CreateUserProfile'


class XAmzTarget56(Enum):
    SageMaker_CreateWorkforce = 'SageMaker.CreateWorkforce'


class XAmzTarget57(Enum):
    SageMaker_CreateWorkteam = 'SageMaker.CreateWorkteam'


class XAmzTarget58(Enum):
    SageMaker_DeleteAction = 'SageMaker.DeleteAction'


class XAmzTarget59(Enum):
    SageMaker_DeleteAlgorithm = 'SageMaker.DeleteAlgorithm'


class XAmzTarget60(Enum):
    SageMaker_DeleteApp = 'SageMaker.DeleteApp'


class XAmzTarget61(Enum):
    SageMaker_DeleteAppImageConfig = 'SageMaker.DeleteAppImageConfig'


class XAmzTarget62(Enum):
    SageMaker_DeleteArtifact = 'SageMaker.DeleteArtifact'


class XAmzTarget63(Enum):
    SageMaker_DeleteAssociation = 'SageMaker.DeleteAssociation'


class XAmzTarget64(Enum):
    SageMaker_DeleteCodeRepository = 'SageMaker.DeleteCodeRepository'


class XAmzTarget65(Enum):
    SageMaker_DeleteContext = 'SageMaker.DeleteContext'


class XAmzTarget66(Enum):
    SageMaker_DeleteDataQualityJobDefinition = (
        'SageMaker.DeleteDataQualityJobDefinition'
    )


class XAmzTarget67(Enum):
    SageMaker_DeleteDeviceFleet = 'SageMaker.DeleteDeviceFleet'


class XAmzTarget68(Enum):
    SageMaker_DeleteDomain = 'SageMaker.DeleteDomain'


class XAmzTarget69(Enum):
    SageMaker_DeleteEdgeDeploymentPlan = 'SageMaker.DeleteEdgeDeploymentPlan'


class XAmzTarget70(Enum):
    SageMaker_DeleteEdgeDeploymentStage = 'SageMaker.DeleteEdgeDeploymentStage'


class XAmzTarget71(Enum):
    SageMaker_DeleteEndpoint = 'SageMaker.DeleteEndpoint'


class XAmzTarget72(Enum):
    SageMaker_DeleteEndpointConfig = 'SageMaker.DeleteEndpointConfig'


class XAmzTarget73(Enum):
    SageMaker_DeleteExperiment = 'SageMaker.DeleteExperiment'


class XAmzTarget74(Enum):
    SageMaker_DeleteFeatureGroup = 'SageMaker.DeleteFeatureGroup'


class XAmzTarget75(Enum):
    SageMaker_DeleteFlowDefinition = 'SageMaker.DeleteFlowDefinition'


class XAmzTarget76(Enum):
    SageMaker_DeleteHub = 'SageMaker.DeleteHub'


class XAmzTarget77(Enum):
    SageMaker_DeleteHubContent = 'SageMaker.DeleteHubContent'


class XAmzTarget78(Enum):
    SageMaker_DeleteHumanTaskUi = 'SageMaker.DeleteHumanTaskUi'


class XAmzTarget79(Enum):
    SageMaker_DeleteImage = 'SageMaker.DeleteImage'


class XAmzTarget80(Enum):
    SageMaker_DeleteImageVersion = 'SageMaker.DeleteImageVersion'


class XAmzTarget81(Enum):
    SageMaker_DeleteInferenceExperiment = 'SageMaker.DeleteInferenceExperiment'


class XAmzTarget82(Enum):
    SageMaker_DeleteModel = 'SageMaker.DeleteModel'


class XAmzTarget83(Enum):
    SageMaker_DeleteModelBiasJobDefinition = 'SageMaker.DeleteModelBiasJobDefinition'


class XAmzTarget84(Enum):
    SageMaker_DeleteModelCard = 'SageMaker.DeleteModelCard'


class XAmzTarget85(Enum):
    SageMaker_DeleteModelExplainabilityJobDefinition = (
        'SageMaker.DeleteModelExplainabilityJobDefinition'
    )


class XAmzTarget86(Enum):
    SageMaker_DeleteModelPackage = 'SageMaker.DeleteModelPackage'


class XAmzTarget87(Enum):
    SageMaker_DeleteModelPackageGroup = 'SageMaker.DeleteModelPackageGroup'


class XAmzTarget88(Enum):
    SageMaker_DeleteModelPackageGroupPolicy = 'SageMaker.DeleteModelPackageGroupPolicy'


class XAmzTarget89(Enum):
    SageMaker_DeleteModelQualityJobDefinition = (
        'SageMaker.DeleteModelQualityJobDefinition'
    )


class XAmzTarget90(Enum):
    SageMaker_DeleteMonitoringSchedule = 'SageMaker.DeleteMonitoringSchedule'


class XAmzTarget91(Enum):
    SageMaker_DeleteNotebookInstance = 'SageMaker.DeleteNotebookInstance'


class XAmzTarget92(Enum):
    SageMaker_DeleteNotebookInstanceLifecycleConfig = (
        'SageMaker.DeleteNotebookInstanceLifecycleConfig'
    )


class XAmzTarget93(Enum):
    SageMaker_DeletePipeline = 'SageMaker.DeletePipeline'


class XAmzTarget94(Enum):
    SageMaker_DeleteProject = 'SageMaker.DeleteProject'


class XAmzTarget95(Enum):
    SageMaker_DeleteSpace = 'SageMaker.DeleteSpace'


class XAmzTarget96(Enum):
    SageMaker_DeleteStudioLifecycleConfig = 'SageMaker.DeleteStudioLifecycleConfig'


class XAmzTarget97(Enum):
    SageMaker_DeleteTags = 'SageMaker.DeleteTags'


class XAmzTarget98(Enum):
    SageMaker_DeleteTrial = 'SageMaker.DeleteTrial'


class XAmzTarget99(Enum):
    SageMaker_DeleteTrialComponent = 'SageMaker.DeleteTrialComponent'


class XAmzTarget100(Enum):
    SageMaker_DeleteUserProfile = 'SageMaker.DeleteUserProfile'


class XAmzTarget101(Enum):
    SageMaker_DeleteWorkforce = 'SageMaker.DeleteWorkforce'


class XAmzTarget102(Enum):
    SageMaker_DeleteWorkteam = 'SageMaker.DeleteWorkteam'


class XAmzTarget103(Enum):
    SageMaker_DeregisterDevices = 'SageMaker.DeregisterDevices'


class XAmzTarget104(Enum):
    SageMaker_DescribeAction = 'SageMaker.DescribeAction'


class XAmzTarget105(Enum):
    SageMaker_DescribeAlgorithm = 'SageMaker.DescribeAlgorithm'


class XAmzTarget106(Enum):
    SageMaker_DescribeApp = 'SageMaker.DescribeApp'


class XAmzTarget107(Enum):
    SageMaker_DescribeAppImageConfig = 'SageMaker.DescribeAppImageConfig'


class XAmzTarget108(Enum):
    SageMaker_DescribeArtifact = 'SageMaker.DescribeArtifact'


class XAmzTarget109(Enum):
    SageMaker_DescribeAutoMLJob = 'SageMaker.DescribeAutoMLJob'


class XAmzTarget110(Enum):
    SageMaker_DescribeAutoMLJobV2 = 'SageMaker.DescribeAutoMLJobV2'


class XAmzTarget111(Enum):
    SageMaker_DescribeCodeRepository = 'SageMaker.DescribeCodeRepository'


class XAmzTarget112(Enum):
    SageMaker_DescribeCompilationJob = 'SageMaker.DescribeCompilationJob'


class XAmzTarget113(Enum):
    SageMaker_DescribeContext = 'SageMaker.DescribeContext'


class XAmzTarget114(Enum):
    SageMaker_DescribeDataQualityJobDefinition = (
        'SageMaker.DescribeDataQualityJobDefinition'
    )


class XAmzTarget115(Enum):
    SageMaker_DescribeDevice = 'SageMaker.DescribeDevice'


class XAmzTarget116(Enum):
    SageMaker_DescribeDeviceFleet = 'SageMaker.DescribeDeviceFleet'


class XAmzTarget117(Enum):
    SageMaker_DescribeDomain = 'SageMaker.DescribeDomain'


class XAmzTarget118(Enum):
    SageMaker_DescribeEdgeDeploymentPlan = 'SageMaker.DescribeEdgeDeploymentPlan'


class XAmzTarget119(Enum):
    SageMaker_DescribeEdgePackagingJob = 'SageMaker.DescribeEdgePackagingJob'


class XAmzTarget120(Enum):
    SageMaker_DescribeEndpoint = 'SageMaker.DescribeEndpoint'


class XAmzTarget121(Enum):
    SageMaker_DescribeEndpointConfig = 'SageMaker.DescribeEndpointConfig'


class XAmzTarget122(Enum):
    SageMaker_DescribeExperiment = 'SageMaker.DescribeExperiment'


class XAmzTarget123(Enum):
    SageMaker_DescribeFeatureGroup = 'SageMaker.DescribeFeatureGroup'


class XAmzTarget124(Enum):
    SageMaker_DescribeFeatureMetadata = 'SageMaker.DescribeFeatureMetadata'


class XAmzTarget125(Enum):
    SageMaker_DescribeFlowDefinition = 'SageMaker.DescribeFlowDefinition'


class XAmzTarget126(Enum):
    SageMaker_DescribeHub = 'SageMaker.DescribeHub'


class XAmzTarget127(Enum):
    SageMaker_DescribeHubContent = 'SageMaker.DescribeHubContent'


class XAmzTarget128(Enum):
    SageMaker_DescribeHumanTaskUi = 'SageMaker.DescribeHumanTaskUi'


class XAmzTarget129(Enum):
    SageMaker_DescribeHyperParameterTuningJob = (
        'SageMaker.DescribeHyperParameterTuningJob'
    )


class XAmzTarget130(Enum):
    SageMaker_DescribeImage = 'SageMaker.DescribeImage'


class XAmzTarget131(Enum):
    SageMaker_DescribeImageVersion = 'SageMaker.DescribeImageVersion'


class XAmzTarget132(Enum):
    SageMaker_DescribeInferenceExperiment = 'SageMaker.DescribeInferenceExperiment'


class XAmzTarget133(Enum):
    SageMaker_DescribeInferenceRecommendationsJob = (
        'SageMaker.DescribeInferenceRecommendationsJob'
    )


class XAmzTarget134(Enum):
    SageMaker_DescribeLabelingJob = 'SageMaker.DescribeLabelingJob'


class XAmzTarget135(Enum):
    SageMaker_DescribeLineageGroup = 'SageMaker.DescribeLineageGroup'


class XAmzTarget136(Enum):
    SageMaker_DescribeModel = 'SageMaker.DescribeModel'


class XAmzTarget137(Enum):
    SageMaker_DescribeModelBiasJobDefinition = (
        'SageMaker.DescribeModelBiasJobDefinition'
    )


class XAmzTarget138(Enum):
    SageMaker_DescribeModelCard = 'SageMaker.DescribeModelCard'


class XAmzTarget139(Enum):
    SageMaker_DescribeModelCardExportJob = 'SageMaker.DescribeModelCardExportJob'


class XAmzTarget140(Enum):
    SageMaker_DescribeModelExplainabilityJobDefinition = (
        'SageMaker.DescribeModelExplainabilityJobDefinition'
    )


class XAmzTarget141(Enum):
    SageMaker_DescribeModelPackage = 'SageMaker.DescribeModelPackage'


class XAmzTarget142(Enum):
    SageMaker_DescribeModelPackageGroup = 'SageMaker.DescribeModelPackageGroup'


class XAmzTarget143(Enum):
    SageMaker_DescribeModelQualityJobDefinition = (
        'SageMaker.DescribeModelQualityJobDefinition'
    )


class XAmzTarget144(Enum):
    SageMaker_DescribeMonitoringSchedule = 'SageMaker.DescribeMonitoringSchedule'


class XAmzTarget145(Enum):
    SageMaker_DescribeNotebookInstance = 'SageMaker.DescribeNotebookInstance'


class XAmzTarget146(Enum):
    SageMaker_DescribeNotebookInstanceLifecycleConfig = (
        'SageMaker.DescribeNotebookInstanceLifecycleConfig'
    )


class XAmzTarget147(Enum):
    SageMaker_DescribePipeline = 'SageMaker.DescribePipeline'


class XAmzTarget148(Enum):
    SageMaker_DescribePipelineDefinitionForExecution = (
        'SageMaker.DescribePipelineDefinitionForExecution'
    )


class XAmzTarget149(Enum):
    SageMaker_DescribePipelineExecution = 'SageMaker.DescribePipelineExecution'


class XAmzTarget150(Enum):
    SageMaker_DescribeProcessingJob = 'SageMaker.DescribeProcessingJob'


class XAmzTarget151(Enum):
    SageMaker_DescribeProject = 'SageMaker.DescribeProject'


class XAmzTarget152(Enum):
    SageMaker_DescribeSpace = 'SageMaker.DescribeSpace'


class XAmzTarget153(Enum):
    SageMaker_DescribeStudioLifecycleConfig = 'SageMaker.DescribeStudioLifecycleConfig'


class XAmzTarget154(Enum):
    SageMaker_DescribeSubscribedWorkteam = 'SageMaker.DescribeSubscribedWorkteam'


class XAmzTarget155(Enum):
    SageMaker_DescribeTrainingJob = 'SageMaker.DescribeTrainingJob'


class XAmzTarget156(Enum):
    SageMaker_DescribeTransformJob = 'SageMaker.DescribeTransformJob'


class XAmzTarget157(Enum):
    SageMaker_DescribeTrial = 'SageMaker.DescribeTrial'


class XAmzTarget158(Enum):
    SageMaker_DescribeTrialComponent = 'SageMaker.DescribeTrialComponent'


class XAmzTarget159(Enum):
    SageMaker_DescribeUserProfile = 'SageMaker.DescribeUserProfile'


class XAmzTarget160(Enum):
    SageMaker_DescribeWorkforce = 'SageMaker.DescribeWorkforce'


class XAmzTarget161(Enum):
    SageMaker_DescribeWorkteam = 'SageMaker.DescribeWorkteam'


class XAmzTarget162(Enum):
    SageMaker_DisableSagemakerServicecatalogPortfolio = (
        'SageMaker.DisableSagemakerServicecatalogPortfolio'
    )


class XAmzTarget163(Enum):
    SageMaker_DisassociateTrialComponent = 'SageMaker.DisassociateTrialComponent'


class XAmzTarget164(Enum):
    SageMaker_EnableSagemakerServicecatalogPortfolio = (
        'SageMaker.EnableSagemakerServicecatalogPortfolio'
    )


class XAmzTarget165(Enum):
    SageMaker_GetDeviceFleetReport = 'SageMaker.GetDeviceFleetReport'


class XAmzTarget166(Enum):
    SageMaker_GetLineageGroupPolicy = 'SageMaker.GetLineageGroupPolicy'


class XAmzTarget167(Enum):
    SageMaker_GetModelPackageGroupPolicy = 'SageMaker.GetModelPackageGroupPolicy'


class XAmzTarget168(Enum):
    SageMaker_GetSagemakerServicecatalogPortfolioStatus = (
        'SageMaker.GetSagemakerServicecatalogPortfolioStatus'
    )


class XAmzTarget169(Enum):
    SageMaker_GetSearchSuggestions = 'SageMaker.GetSearchSuggestions'


class XAmzTarget170(Enum):
    SageMaker_ImportHubContent = 'SageMaker.ImportHubContent'


class XAmzTarget171(Enum):
    SageMaker_ListActions = 'SageMaker.ListActions'


class XAmzTarget172(Enum):
    SageMaker_ListAlgorithms = 'SageMaker.ListAlgorithms'


class XAmzTarget173(Enum):
    SageMaker_ListAliases = 'SageMaker.ListAliases'


class XAmzTarget174(Enum):
    SageMaker_ListAppImageConfigs = 'SageMaker.ListAppImageConfigs'


class XAmzTarget175(Enum):
    SageMaker_ListApps = 'SageMaker.ListApps'


class XAmzTarget176(Enum):
    SageMaker_ListArtifacts = 'SageMaker.ListArtifacts'


class XAmzTarget177(Enum):
    SageMaker_ListAssociations = 'SageMaker.ListAssociations'


class XAmzTarget178(Enum):
    SageMaker_ListAutoMLJobs = 'SageMaker.ListAutoMLJobs'


class XAmzTarget179(Enum):
    SageMaker_ListCandidatesForAutoMLJob = 'SageMaker.ListCandidatesForAutoMLJob'


class XAmzTarget180(Enum):
    SageMaker_ListCodeRepositories = 'SageMaker.ListCodeRepositories'


class XAmzTarget181(Enum):
    SageMaker_ListCompilationJobs = 'SageMaker.ListCompilationJobs'


class XAmzTarget182(Enum):
    SageMaker_ListContexts = 'SageMaker.ListContexts'


class XAmzTarget183(Enum):
    SageMaker_ListDataQualityJobDefinitions = 'SageMaker.ListDataQualityJobDefinitions'


class XAmzTarget184(Enum):
    SageMaker_ListDeviceFleets = 'SageMaker.ListDeviceFleets'


class XAmzTarget185(Enum):
    SageMaker_ListDevices = 'SageMaker.ListDevices'


class XAmzTarget186(Enum):
    SageMaker_ListDomains = 'SageMaker.ListDomains'


class XAmzTarget187(Enum):
    SageMaker_ListEdgeDeploymentPlans = 'SageMaker.ListEdgeDeploymentPlans'


class XAmzTarget188(Enum):
    SageMaker_ListEdgePackagingJobs = 'SageMaker.ListEdgePackagingJobs'


class XAmzTarget189(Enum):
    SageMaker_ListEndpointConfigs = 'SageMaker.ListEndpointConfigs'


class XAmzTarget190(Enum):
    SageMaker_ListEndpoints = 'SageMaker.ListEndpoints'


class XAmzTarget191(Enum):
    SageMaker_ListExperiments = 'SageMaker.ListExperiments'


class XAmzTarget192(Enum):
    SageMaker_ListFeatureGroups = 'SageMaker.ListFeatureGroups'


class XAmzTarget193(Enum):
    SageMaker_ListFlowDefinitions = 'SageMaker.ListFlowDefinitions'


class XAmzTarget194(Enum):
    SageMaker_ListHubContentVersions = 'SageMaker.ListHubContentVersions'


class XAmzTarget195(Enum):
    SageMaker_ListHubContents = 'SageMaker.ListHubContents'


class XAmzTarget196(Enum):
    SageMaker_ListHubs = 'SageMaker.ListHubs'


class XAmzTarget197(Enum):
    SageMaker_ListHumanTaskUis = 'SageMaker.ListHumanTaskUis'


class XAmzTarget198(Enum):
    SageMaker_ListHyperParameterTuningJobs = 'SageMaker.ListHyperParameterTuningJobs'


class XAmzTarget199(Enum):
    SageMaker_ListImageVersions = 'SageMaker.ListImageVersions'


class XAmzTarget200(Enum):
    SageMaker_ListImages = 'SageMaker.ListImages'


class XAmzTarget201(Enum):
    SageMaker_ListInferenceExperiments = 'SageMaker.ListInferenceExperiments'


class XAmzTarget202(Enum):
    SageMaker_ListInferenceRecommendationsJobSteps = (
        'SageMaker.ListInferenceRecommendationsJobSteps'
    )


class XAmzTarget203(Enum):
    SageMaker_ListInferenceRecommendationsJobs = (
        'SageMaker.ListInferenceRecommendationsJobs'
    )


class XAmzTarget204(Enum):
    SageMaker_ListLabelingJobs = 'SageMaker.ListLabelingJobs'


class XAmzTarget205(Enum):
    SageMaker_ListLabelingJobsForWorkteam = 'SageMaker.ListLabelingJobsForWorkteam'


class XAmzTarget206(Enum):
    SageMaker_ListLineageGroups = 'SageMaker.ListLineageGroups'


class XAmzTarget207(Enum):
    SageMaker_ListModelBiasJobDefinitions = 'SageMaker.ListModelBiasJobDefinitions'


class XAmzTarget208(Enum):
    SageMaker_ListModelCardExportJobs = 'SageMaker.ListModelCardExportJobs'


class XAmzTarget209(Enum):
    SageMaker_ListModelCardVersions = 'SageMaker.ListModelCardVersions'


class XAmzTarget210(Enum):
    SageMaker_ListModelCards = 'SageMaker.ListModelCards'


class XAmzTarget211(Enum):
    SageMaker_ListModelExplainabilityJobDefinitions = (
        'SageMaker.ListModelExplainabilityJobDefinitions'
    )


class XAmzTarget212(Enum):
    SageMaker_ListModelMetadata = 'SageMaker.ListModelMetadata'


class XAmzTarget213(Enum):
    SageMaker_ListModelPackageGroups = 'SageMaker.ListModelPackageGroups'


class XAmzTarget214(Enum):
    SageMaker_ListModelPackages = 'SageMaker.ListModelPackages'


class XAmzTarget215(Enum):
    SageMaker_ListModelQualityJobDefinitions = (
        'SageMaker.ListModelQualityJobDefinitions'
    )


class XAmzTarget216(Enum):
    SageMaker_ListModels = 'SageMaker.ListModels'


class XAmzTarget217(Enum):
    SageMaker_ListMonitoringAlertHistory = 'SageMaker.ListMonitoringAlertHistory'


class XAmzTarget218(Enum):
    SageMaker_ListMonitoringAlerts = 'SageMaker.ListMonitoringAlerts'


class XAmzTarget219(Enum):
    SageMaker_ListMonitoringExecutions = 'SageMaker.ListMonitoringExecutions'


class XAmzTarget220(Enum):
    SageMaker_ListMonitoringSchedules = 'SageMaker.ListMonitoringSchedules'


class XAmzTarget221(Enum):
    SageMaker_ListNotebookInstanceLifecycleConfigs = (
        'SageMaker.ListNotebookInstanceLifecycleConfigs'
    )


class XAmzTarget222(Enum):
    SageMaker_ListNotebookInstances = 'SageMaker.ListNotebookInstances'


class XAmzTarget223(Enum):
    SageMaker_ListPipelineExecutionSteps = 'SageMaker.ListPipelineExecutionSteps'


class XAmzTarget224(Enum):
    SageMaker_ListPipelineExecutions = 'SageMaker.ListPipelineExecutions'


class XAmzTarget225(Enum):
    SageMaker_ListPipelineParametersForExecution = (
        'SageMaker.ListPipelineParametersForExecution'
    )


class XAmzTarget226(Enum):
    SageMaker_ListPipelines = 'SageMaker.ListPipelines'


class XAmzTarget227(Enum):
    SageMaker_ListProcessingJobs = 'SageMaker.ListProcessingJobs'


class XAmzTarget228(Enum):
    SageMaker_ListProjects = 'SageMaker.ListProjects'


class XAmzTarget229(Enum):
    SageMaker_ListSpaces = 'SageMaker.ListSpaces'


class XAmzTarget230(Enum):
    SageMaker_ListStageDevices = 'SageMaker.ListStageDevices'


class XAmzTarget231(Enum):
    SageMaker_ListStudioLifecycleConfigs = 'SageMaker.ListStudioLifecycleConfigs'


class XAmzTarget232(Enum):
    SageMaker_ListSubscribedWorkteams = 'SageMaker.ListSubscribedWorkteams'


class XAmzTarget233(Enum):
    SageMaker_ListTags = 'SageMaker.ListTags'


class XAmzTarget234(Enum):
    SageMaker_ListTrainingJobs = 'SageMaker.ListTrainingJobs'


class XAmzTarget235(Enum):
    SageMaker_ListTrainingJobsForHyperParameterTuningJob = (
        'SageMaker.ListTrainingJobsForHyperParameterTuningJob'
    )


class XAmzTarget236(Enum):
    SageMaker_ListTransformJobs = 'SageMaker.ListTransformJobs'


class XAmzTarget237(Enum):
    SageMaker_ListTrialComponents = 'SageMaker.ListTrialComponents'


class XAmzTarget238(Enum):
    SageMaker_ListTrials = 'SageMaker.ListTrials'


class XAmzTarget239(Enum):
    SageMaker_ListUserProfiles = 'SageMaker.ListUserProfiles'


class XAmzTarget240(Enum):
    SageMaker_ListWorkforces = 'SageMaker.ListWorkforces'


class XAmzTarget241(Enum):
    SageMaker_ListWorkteams = 'SageMaker.ListWorkteams'


class XAmzTarget242(Enum):
    SageMaker_PutModelPackageGroupPolicy = 'SageMaker.PutModelPackageGroupPolicy'


class XAmzTarget243(Enum):
    SageMaker_QueryLineage = 'SageMaker.QueryLineage'


class XAmzTarget244(Enum):
    SageMaker_RegisterDevices = 'SageMaker.RegisterDevices'


class XAmzTarget245(Enum):
    SageMaker_RenderUiTemplate = 'SageMaker.RenderUiTemplate'


class XAmzTarget246(Enum):
    SageMaker_RetryPipelineExecution = 'SageMaker.RetryPipelineExecution'


class XAmzTarget247(Enum):
    SageMaker_Search = 'SageMaker.Search'


class XAmzTarget248(Enum):
    SageMaker_SendPipelineExecutionStepFailure = (
        'SageMaker.SendPipelineExecutionStepFailure'
    )


class XAmzTarget249(Enum):
    SageMaker_SendPipelineExecutionStepSuccess = (
        'SageMaker.SendPipelineExecutionStepSuccess'
    )


class XAmzTarget250(Enum):
    SageMaker_StartEdgeDeploymentStage = 'SageMaker.StartEdgeDeploymentStage'


class XAmzTarget251(Enum):
    SageMaker_StartInferenceExperiment = 'SageMaker.StartInferenceExperiment'


class XAmzTarget252(Enum):
    SageMaker_StartMonitoringSchedule = 'SageMaker.StartMonitoringSchedule'


class XAmzTarget253(Enum):
    SageMaker_StartNotebookInstance = 'SageMaker.StartNotebookInstance'


class XAmzTarget254(Enum):
    SageMaker_StartPipelineExecution = 'SageMaker.StartPipelineExecution'


class XAmzTarget255(Enum):
    SageMaker_StopAutoMLJob = 'SageMaker.StopAutoMLJob'


class XAmzTarget256(Enum):
    SageMaker_StopCompilationJob = 'SageMaker.StopCompilationJob'


class XAmzTarget257(Enum):
    SageMaker_StopEdgeDeploymentStage = 'SageMaker.StopEdgeDeploymentStage'


class XAmzTarget258(Enum):
    SageMaker_StopEdgePackagingJob = 'SageMaker.StopEdgePackagingJob'


class XAmzTarget259(Enum):
    SageMaker_StopHyperParameterTuningJob = 'SageMaker.StopHyperParameterTuningJob'


class XAmzTarget260(Enum):
    SageMaker_StopInferenceExperiment = 'SageMaker.StopInferenceExperiment'


class XAmzTarget261(Enum):
    SageMaker_StopInferenceRecommendationsJob = (
        'SageMaker.StopInferenceRecommendationsJob'
    )


class XAmzTarget262(Enum):
    SageMaker_StopLabelingJob = 'SageMaker.StopLabelingJob'


class XAmzTarget263(Enum):
    SageMaker_StopMonitoringSchedule = 'SageMaker.StopMonitoringSchedule'


class XAmzTarget264(Enum):
    SageMaker_StopNotebookInstance = 'SageMaker.StopNotebookInstance'


class XAmzTarget265(Enum):
    SageMaker_StopPipelineExecution = 'SageMaker.StopPipelineExecution'


class XAmzTarget266(Enum):
    SageMaker_StopProcessingJob = 'SageMaker.StopProcessingJob'


class XAmzTarget267(Enum):
    SageMaker_StopTrainingJob = 'SageMaker.StopTrainingJob'


class XAmzTarget268(Enum):
    SageMaker_StopTransformJob = 'SageMaker.StopTransformJob'


class XAmzTarget269(Enum):
    SageMaker_UpdateAction = 'SageMaker.UpdateAction'


class XAmzTarget270(Enum):
    SageMaker_UpdateAppImageConfig = 'SageMaker.UpdateAppImageConfig'


class XAmzTarget271(Enum):
    SageMaker_UpdateArtifact = 'SageMaker.UpdateArtifact'


class XAmzTarget272(Enum):
    SageMaker_UpdateCodeRepository = 'SageMaker.UpdateCodeRepository'


class XAmzTarget273(Enum):
    SageMaker_UpdateContext = 'SageMaker.UpdateContext'


class XAmzTarget274(Enum):
    SageMaker_UpdateDeviceFleet = 'SageMaker.UpdateDeviceFleet'


class XAmzTarget275(Enum):
    SageMaker_UpdateDevices = 'SageMaker.UpdateDevices'


class XAmzTarget276(Enum):
    SageMaker_UpdateDomain = 'SageMaker.UpdateDomain'


class XAmzTarget277(Enum):
    SageMaker_UpdateEndpoint = 'SageMaker.UpdateEndpoint'


class XAmzTarget278(Enum):
    SageMaker_UpdateEndpointWeightsAndCapacities = (
        'SageMaker.UpdateEndpointWeightsAndCapacities'
    )


class XAmzTarget279(Enum):
    SageMaker_UpdateExperiment = 'SageMaker.UpdateExperiment'


class XAmzTarget280(Enum):
    SageMaker_UpdateFeatureGroup = 'SageMaker.UpdateFeatureGroup'


class XAmzTarget281(Enum):
    SageMaker_UpdateFeatureMetadata = 'SageMaker.UpdateFeatureMetadata'


class XAmzTarget282(Enum):
    SageMaker_UpdateHub = 'SageMaker.UpdateHub'


class XAmzTarget283(Enum):
    SageMaker_UpdateImage = 'SageMaker.UpdateImage'


class XAmzTarget284(Enum):
    SageMaker_UpdateImageVersion = 'SageMaker.UpdateImageVersion'


class XAmzTarget285(Enum):
    SageMaker_UpdateInferenceExperiment = 'SageMaker.UpdateInferenceExperiment'


class XAmzTarget286(Enum):
    SageMaker_UpdateModelCard = 'SageMaker.UpdateModelCard'


class XAmzTarget287(Enum):
    SageMaker_UpdateModelPackage = 'SageMaker.UpdateModelPackage'


class XAmzTarget288(Enum):
    SageMaker_UpdateMonitoringAlert = 'SageMaker.UpdateMonitoringAlert'


class XAmzTarget289(Enum):
    SageMaker_UpdateMonitoringSchedule = 'SageMaker.UpdateMonitoringSchedule'


class XAmzTarget290(Enum):
    SageMaker_UpdateNotebookInstance = 'SageMaker.UpdateNotebookInstance'


class XAmzTarget291(Enum):
    SageMaker_UpdateNotebookInstanceLifecycleConfig = (
        'SageMaker.UpdateNotebookInstanceLifecycleConfig'
    )


class XAmzTarget292(Enum):
    SageMaker_UpdatePipeline = 'SageMaker.UpdatePipeline'


class XAmzTarget293(Enum):
    SageMaker_UpdatePipelineExecution = 'SageMaker.UpdatePipelineExecution'


class XAmzTarget294(Enum):
    SageMaker_UpdateProject = 'SageMaker.UpdateProject'


class XAmzTarget295(Enum):
    SageMaker_UpdateSpace = 'SageMaker.UpdateSpace'


class XAmzTarget296(Enum):
    SageMaker_UpdateTrainingJob = 'SageMaker.UpdateTrainingJob'


class XAmzTarget297(Enum):
    SageMaker_UpdateTrial = 'SageMaker.UpdateTrial'


class XAmzTarget298(Enum):
    SageMaker_UpdateTrialComponent = 'SageMaker.UpdateTrialComponent'


class XAmzTarget299(Enum):
    SageMaker_UpdateUserProfile = 'SageMaker.UpdateUserProfile'


class XAmzTarget300(Enum):
    SageMaker_UpdateWorkforce = 'SageMaker.UpdateWorkforce'


class XAmzTarget301(Enum):
    SageMaker_UpdateWorkteam = 'SageMaker.UpdateWorkteam'


class ActionSource(BaseModel):
    SourceId: Optional[String256] = None
    SourceType: Optional[String256] = None
    SourceUri: String2048


class ActionSummary(BaseModel):
    ActionArn_1: Optional[ActionArn] = Field(None, alias='ActionArn')
    ActionName: Optional[ExperimentEntityName] = None
    ActionType: Optional[String64] = None
    CreationTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None
    Source: Optional[ActionSource] = None
    Status: Optional[ActionStatus] = None


class AddAssociationRequest(BaseModel):
    AssociationType: Optional[AssociationEdgeType] = None
    DestinationArn: AssociationEntityArn
    SourceArn: AssociationEntityArn


class AddAssociationResponse(BaseModel):
    DestinationArn: Optional[AssociationEntityArn] = None
    SourceArn: Optional[AssociationEntityArn] = None


class AdditionalCodeRepositoryNamesOrUrls(RootModel[List[CodeRepositoryNameOrUrl]]):
    root: List[CodeRepositoryNameOrUrl] = Field(..., max_length=3)


class AgentVersion(BaseModel):
    AgentCount: Long
    Version: EdgeVersion


class AgentVersions(RootModel[List[AgentVersion]]):
    root: List[AgentVersion]


class Alarm(BaseModel):
    AlarmName_1: Optional[AlarmName] = Field(None, alias='AlarmName')


class AlarmList(RootModel[List[Alarm]]):
    root: List[Alarm] = Field(..., max_length=10, min_length=1)


class AlgorithmStatusItem(BaseModel):
    FailureReason: Optional[String] = None
    Name: EntityName
    Status: DetailedAlgorithmStatus


class AlgorithmStatusItemList(RootModel[List[AlgorithmStatusItem]]):
    root: List[AlgorithmStatusItem]


class AlgorithmSummary(BaseModel):
    AlgorithmArn_1: AlgorithmArn = Field(..., alias='AlgorithmArn')
    AlgorithmDescription: Optional[EntityDescription] = None
    AlgorithmName: EntityName
    AlgorithmStatus_1: AlgorithmStatus = Field(..., alias='AlgorithmStatus')
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')


class AlgorithmSummaryList(RootModel[List[AlgorithmSummary]]):
    root: List[AlgorithmSummary]


class AnnotationConsolidationConfig(BaseModel):
    AnnotationConsolidationLambdaArn: LambdaFunctionArn


class AppDetails(BaseModel):
    AppName_1: Optional[AppName] = Field(None, alias='AppName')
    AppType_1: Optional[AppType] = Field(None, alias='AppType')
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DomainId_1: Optional[DomainId] = Field(None, alias='DomainId')
    SpaceName_1: Optional[SpaceName] = Field(None, alias='SpaceName')
    Status: Optional[AppStatus] = None
    UserProfileName_1: Optional[UserProfileName] = Field(None, alias='UserProfileName')


class AppList(RootModel[List[AppDetails]]):
    root: List[AppDetails]


class ArtifactSourceType(BaseModel):
    SourceIdType: ArtifactSourceIdType
    Value: String256


class ArtifactSourceTypes(RootModel[List[ArtifactSourceType]]):
    root: List[ArtifactSourceType]


class AssociateTrialComponentRequest(BaseModel):
    TrialComponentName: ExperimentEntityName
    TrialName: ExperimentEntityName


class AssociateTrialComponentResponse(BaseModel):
    TrialArn_1: Optional[TrialArn] = Field(None, alias='TrialArn')
    TrialComponentArn_1: Optional[TrialComponentArn] = Field(
        None, alias='TrialComponentArn'
    )


class AsyncInferenceClientConfig(BaseModel):
    MaxConcurrentInvocationsPerInstance_1: Optional[
        MaxConcurrentInvocationsPerInstance
    ] = Field(None, alias='MaxConcurrentInvocationsPerInstance')


class AsyncNotificationTopicTypeList(RootModel[List[AsyncNotificationTopicTypes]]):
    root: List[AsyncNotificationTopicTypes] = Field(..., max_length=2, min_length=0)


class AthenaDatasetDefinition(BaseModel):
    Catalog: AthenaCatalog
    Database: AthenaDatabase
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    OutputCompression: Optional[AthenaResultCompressionType] = None
    OutputFormat: AthenaResultFormat
    OutputS3Uri: S3Uri
    QueryString: AthenaQueryString
    WorkGroup: Optional[AthenaWorkGroup] = None


class AutoMLAlgorithmConfig(BaseModel):
    AutoMLAlgorithms_1: AutoMLAlgorithms = Field(..., alias='AutoMLAlgorithms')


class AutoMLAlgorithmsConfig(RootModel[List[AutoMLAlgorithmConfig]]):
    root: List[AutoMLAlgorithmConfig] = Field(..., max_length=1)


class AutoMLCandidateGenerationConfig(BaseModel):
    AlgorithmsConfig: Optional[AutoMLAlgorithmsConfig] = None
    FeatureSpecificationS3Uri: Optional[S3Uri] = None


class AutoMLCandidateStep(BaseModel):
    CandidateStepArn_1: CandidateStepArn = Field(..., alias='CandidateStepArn')
    CandidateStepName_1: CandidateStepName = Field(..., alias='CandidateStepName')
    CandidateStepType_1: CandidateStepType = Field(..., alias='CandidateStepType')


class AutoMLDataSplitConfig(BaseModel):
    ValidationFraction_1: Optional[ValidationFraction] = Field(
        None, alias='ValidationFraction'
    )


class AutoMLJobArtifacts(BaseModel):
    CandidateDefinitionNotebookLocation_1: Optional[
        CandidateDefinitionNotebookLocation
    ] = Field(None, alias='CandidateDefinitionNotebookLocation')
    DataExplorationNotebookLocation_1: Optional[DataExplorationNotebookLocation] = (
        Field(None, alias='DataExplorationNotebookLocation')
    )


class AutoMLJobCompletionCriteria(BaseModel):
    MaxAutoMLJobRuntimeInSeconds_1: Optional[MaxAutoMLJobRuntimeInSeconds] = Field(
        None, alias='MaxAutoMLJobRuntimeInSeconds'
    )
    MaxCandidates_1: Optional[MaxCandidates] = Field(None, alias='MaxCandidates')
    MaxRuntimePerTrainingJobInSeconds_1: Optional[MaxRuntimePerTrainingJobInSeconds] = (
        Field(None, alias='MaxRuntimePerTrainingJobInSeconds')
    )


class AutoMLJobObjective(BaseModel):
    MetricName: AutoMLMetricEnum


class AutoMLJobSummary(BaseModel):
    AutoMLJobArn_1: AutoMLJobArn = Field(..., alias='AutoMLJobArn')
    AutoMLJobName_1: AutoMLJobName = Field(..., alias='AutoMLJobName')
    AutoMLJobSecondaryStatus_1: AutoMLJobSecondaryStatus = Field(
        ..., alias='AutoMLJobSecondaryStatus'
    )
    AutoMLJobStatus_1: AutoMLJobStatus = Field(..., alias='AutoMLJobStatus')
    CreationTime: Timestamp
    EndTime: Optional[Timestamp] = None
    FailureReason: Optional[AutoMLFailureReason] = None
    LastModifiedTime: Timestamp
    PartialFailureReasons: Optional[AutoMLPartialFailureReasons] = None


class AutoMLOutputDataConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    S3OutputPath: S3Uri


class AutoMLS3DataSource(BaseModel):
    S3DataType: AutoMLS3DataType
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class AutoRollbackConfig(BaseModel):
    Alarms: Optional[AlarmList] = None


class BatchDataCaptureConfig(BaseModel):
    DestinationS3Uri: S3Uri
    GenerateInferenceId: Optional[Boolean] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')


class BatchDescribeModelPackageError(BaseModel):
    ErrorCode: String
    ErrorResponse: String


class BatchDescribeModelPackageErrorMap(
    RootModel[Optional[Dict[str, BatchDescribeModelPackageError]]]
):
    root: Optional[Dict[str, BatchDescribeModelPackageError]] = None


class BatchDescribeModelPackageInput(BaseModel):
    ModelPackageArnList_1: ModelPackageArnList = Field(..., alias='ModelPackageArnList')


class BestObjectiveNotImproving(BaseModel):
    MaxNumberOfTrainingJobsNotImproving_1: Optional[
        MaxNumberOfTrainingJobsNotImproving
    ] = Field(None, alias='MaxNumberOfTrainingJobsNotImproving')


class CacheHitResult(BaseModel):
    SourcePipelineExecutionArn: Optional[PipelineExecutionArn] = None


class CandidateArtifactLocations(BaseModel):
    Explainability: ExplainabilityLocation
    ModelInsights: Optional[ModelInsightsLocation] = None


class CandidateSteps(RootModel[List[AutoMLCandidateStep]]):
    root: List[AutoMLCandidateStep]


class CapacitySize(BaseModel):
    Type: CapacitySizeType
    Value: CapacitySizeValue


class CaptureContentTypeHeader(BaseModel):
    CsvContentTypes_1: Optional[CsvContentTypes] = Field(None, alias='CsvContentTypes')
    JsonContentTypes_1: Optional[JsonContentTypes] = Field(
        None, alias='JsonContentTypes'
    )


class CategoricalParameterRange(BaseModel):
    Name: ParameterKey
    Values: ParameterValues


class CategoricalParameterRangeSpecification(BaseModel):
    Values: ParameterValues


class CategoricalParameterRangeValues(RootModel[List[String128]]):
    root: List[String128] = Field(..., max_length=3, min_length=1)


class CategoricalParameterRanges(RootModel[List[CategoricalParameterRange]]):
    root: List[CategoricalParameterRange] = Field(..., max_length=30, min_length=0)


class CheckpointConfig(BaseModel):
    LocalPath: Optional[DirectoryPath] = None
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class ClarifyCheckStepMetadata(BaseModel):
    BaselineUsedForDriftCheckConstraints: Optional[String1024] = None
    CalculatedBaselineConstraints: Optional[String1024] = None
    CheckJobArn: Optional[String256] = None
    CheckType: Optional[String256] = None
    ModelPackageGroupName: Optional[String256] = None
    RegisterNewBaseline: Optional[Boolean] = None
    SkipCheck: Optional[Boolean] = None
    ViolationReport: Optional[String1024] = None


class ClarifyFeatureHeaders(RootModel[List[ClarifyHeader]]):
    root: List[ClarifyHeader] = Field(..., max_length=256, min_length=1)


class ClarifyInferenceConfig(BaseModel):
    ContentTemplate: Optional[ClarifyContentTemplate] = None
    FeatureHeaders: Optional[ClarifyFeatureHeaders] = None
    FeatureTypes: Optional[ClarifyFeatureTypes] = None
    FeaturesAttribute: Optional[ClarifyFeaturesAttribute] = None
    LabelAttribute: Optional[ClarifyLabelAttribute] = None
    LabelHeaders: Optional[ClarifyLabelHeaders] = None
    LabelIndex: Optional[ClarifyLabelIndex] = None
    MaxPayloadInMB: Optional[ClarifyMaxPayloadInMB] = None
    MaxRecordCount: Optional[ClarifyMaxRecordCount] = None
    ProbabilityAttribute: Optional[ClarifyProbabilityAttribute] = None
    ProbabilityIndex: Optional[ClarifyProbabilityIndex] = None


class ClarifyShapBaselineConfig(BaseModel):
    MimeType: Optional[ClarifyMimeType] = None
    ShapBaseline: Optional[ClarifyShapBaseline] = None
    ShapBaselineUri: Optional[Url] = None


class ClarifyTextConfig(BaseModel):
    Granularity: ClarifyTextGranularity
    Language: ClarifyTextLanguage


class CodeRepository(BaseModel):
    RepositoryUrl_1: RepositoryUrl = Field(..., alias='RepositoryUrl')


class CognitoConfig(BaseModel):
    ClientId_1: ClientId = Field(..., alias='ClientId')
    UserPool: CognitoUserPool


class CognitoMemberDefinition(BaseModel):
    ClientId_1: ClientId = Field(..., alias='ClientId')
    UserGroup: CognitoUserGroup
    UserPool: CognitoUserPool


class CollectionParameters(RootModel[Optional[Dict[str, ConfigValue]]]):
    root: Optional[Dict[str, ConfigValue]] = None


class CompilationJobSummary(BaseModel):
    CompilationEndTime: Optional[Timestamp] = None
    CompilationJobArn_1: CompilationJobArn = Field(..., alias='CompilationJobArn')
    CompilationJobName: EntityName
    CompilationJobStatus_1: CompilationJobStatus = Field(
        ..., alias='CompilationJobStatus'
    )
    CompilationStartTime: Optional[Timestamp] = None
    CompilationTargetDevice: Optional[TargetDevice] = None
    CompilationTargetPlatformAccelerator: Optional[TargetPlatformAccelerator] = None
    CompilationTargetPlatformArch: Optional[TargetPlatformArch] = None
    CompilationTargetPlatformOs: Optional[TargetPlatformOs] = None
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )


class ContainerEntrypoint(RootModel[List[ContainerEntrypointString]]):
    root: List[ContainerEntrypointString] = Field(..., max_length=100, min_length=1)


class ContextSource(BaseModel):
    SourceId: Optional[String256] = None
    SourceType: Optional[String256] = None
    SourceUri: String2048


class ContextSummary(BaseModel):
    ContextArn_1: Optional[ContextArn] = Field(None, alias='ContextArn')
    ContextName: Optional[ExperimentEntityName] = None
    ContextType: Optional[String256] = None
    CreationTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None
    Source: Optional[ContextSource] = None


class ContinuousParameterRange(BaseModel):
    MaxValue: ParameterValue
    MinValue: ParameterValue
    Name: ParameterKey
    ScalingType: Optional[HyperParameterScalingType] = None


class ContinuousParameterRangeSpecification(BaseModel):
    MaxValue: ParameterValue
    MinValue: ParameterValue


class ContinuousParameterRanges(RootModel[List[ContinuousParameterRange]]):
    root: List[ContinuousParameterRange] = Field(..., max_length=30, min_length=0)


class CreateDataQualityJobDefinitionResponse(BaseModel):
    JobDefinitionArn: MonitoringJobDefinitionArn


class CreateDomainResponse(BaseModel):
    DomainArn_1: Optional[DomainArn] = Field(None, alias='DomainArn')
    Url: Optional[String1024] = None


class CreateEdgeDeploymentPlanResponse(BaseModel):
    EdgeDeploymentPlanArn_1: EdgeDeploymentPlanArn = Field(
        ..., alias='EdgeDeploymentPlanArn'
    )


class CreateEndpointConfigOutput(BaseModel):
    EndpointConfigArn_1: EndpointConfigArn = Field(..., alias='EndpointConfigArn')


class CreateEndpointOutput(BaseModel):
    EndpointArn_1: EndpointArn = Field(..., alias='EndpointArn')


class CreateExperimentResponse(BaseModel):
    ExperimentArn_1: Optional[ExperimentArn] = Field(None, alias='ExperimentArn')


class CreateFeatureGroupResponse(BaseModel):
    FeatureGroupArn_1: FeatureGroupArn = Field(..., alias='FeatureGroupArn')


class CreateFlowDefinitionResponse(BaseModel):
    FlowDefinitionArn_1: FlowDefinitionArn = Field(..., alias='FlowDefinitionArn')


class CreateHubResponse(BaseModel):
    HubArn_1: HubArn = Field(..., alias='HubArn')


class CreateHumanTaskUiResponse(BaseModel):
    HumanTaskUiArn_1: HumanTaskUiArn = Field(..., alias='HumanTaskUiArn')


class CreateHyperParameterTuningJobResponse(BaseModel):
    HyperParameterTuningJobArn_1: HyperParameterTuningJobArn = Field(
        ..., alias='HyperParameterTuningJobArn'
    )


class CreateImageResponse(BaseModel):
    ImageArn_1: Optional[ImageArn] = Field(None, alias='ImageArn')


class CreateImageVersionRequest(BaseModel):
    Aliases: Optional[SageMakerImageVersionAliases] = None
    BaseImage: ImageBaseImage
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    Horovod_1: Optional[Horovod] = Field(None, alias='Horovod')
    ImageName_1: ImageName = Field(..., alias='ImageName')
    JobType_1: Optional[JobType] = Field(None, alias='JobType')
    MLFramework_1: Optional[MLFramework] = Field(None, alias='MLFramework')
    Processor_1: Optional[Processor] = Field(None, alias='Processor')
    ProgrammingLang_1: Optional[ProgrammingLang] = Field(None, alias='ProgrammingLang')
    ReleaseNotes_1: Optional[ReleaseNotes] = Field(None, alias='ReleaseNotes')
    VendorGuidance_1: Optional[VendorGuidance] = Field(None, alias='VendorGuidance')


class CreateImageVersionResponse(BaseModel):
    ImageVersionArn_1: Optional[ImageVersionArn] = Field(None, alias='ImageVersionArn')


class CreateInferenceExperimentResponse(BaseModel):
    InferenceExperimentArn_1: InferenceExperimentArn = Field(
        ..., alias='InferenceExperimentArn'
    )


class CreateInferenceRecommendationsJobResponse(BaseModel):
    JobArn: RecommendationJobArn


class CreateLabelingJobResponse(BaseModel):
    LabelingJobArn_1: LabelingJobArn = Field(..., alias='LabelingJobArn')


class CreateModelBiasJobDefinitionResponse(BaseModel):
    JobDefinitionArn: MonitoringJobDefinitionArn


class CreateModelCardExportJobResponse(BaseModel):
    ModelCardExportJobArn_1: ModelCardExportJobArn = Field(
        ..., alias='ModelCardExportJobArn'
    )


class CreateModelCardResponse(BaseModel):
    ModelCardArn_1: ModelCardArn = Field(..., alias='ModelCardArn')


class CreateModelExplainabilityJobDefinitionResponse(BaseModel):
    JobDefinitionArn: MonitoringJobDefinitionArn


class CreateModelOutput(BaseModel):
    ModelArn_1: ModelArn = Field(..., alias='ModelArn')


class CreateModelPackageGroupOutput(BaseModel):
    ModelPackageGroupArn_1: ModelPackageGroupArn = Field(
        ..., alias='ModelPackageGroupArn'
    )


class CreateModelPackageOutput(BaseModel):
    ModelPackageArn_1: ModelPackageArn = Field(..., alias='ModelPackageArn')


class CreateModelQualityJobDefinitionResponse(BaseModel):
    JobDefinitionArn: MonitoringJobDefinitionArn


class CreateMonitoringScheduleResponse(BaseModel):
    MonitoringScheduleArn_1: MonitoringScheduleArn = Field(
        ..., alias='MonitoringScheduleArn'
    )


class CreateNotebookInstanceLifecycleConfigOutput(BaseModel):
    NotebookInstanceLifecycleConfigArn_1: Optional[
        NotebookInstanceLifecycleConfigArn
    ] = Field(None, alias='NotebookInstanceLifecycleConfigArn')


class CreateNotebookInstanceOutput(BaseModel):
    NotebookInstanceArn_1: Optional[NotebookInstanceArn] = Field(
        None, alias='NotebookInstanceArn'
    )


class CreatePipelineResponse(BaseModel):
    PipelineArn_1: Optional[PipelineArn] = Field(None, alias='PipelineArn')


class CreatePresignedDomainUrlRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    ExpiresInSeconds_1: Optional[ExpiresInSeconds] = Field(
        None, alias='ExpiresInSeconds'
    )
    SessionExpirationDurationInSeconds_1: Optional[
        SessionExpirationDurationInSeconds
    ] = Field(None, alias='SessionExpirationDurationInSeconds')
    SpaceName_1: Optional[SpaceName] = Field(None, alias='SpaceName')
    UserProfileName_1: UserProfileName = Field(..., alias='UserProfileName')


class CreatePresignedDomainUrlResponse(BaseModel):
    AuthorizedUrl: Optional[PresignedDomainUrl] = None


class CreatePresignedNotebookInstanceUrlInput(BaseModel):
    NotebookInstanceName_1: NotebookInstanceName = Field(
        ..., alias='NotebookInstanceName'
    )
    SessionExpirationDurationInSeconds_1: Optional[
        SessionExpirationDurationInSeconds
    ] = Field(None, alias='SessionExpirationDurationInSeconds')


class CreatePresignedNotebookInstanceUrlOutput(BaseModel):
    AuthorizedUrl: Optional[NotebookInstanceUrl] = None


class CreateProcessingJobResponse(BaseModel):
    ProcessingJobArn_1: ProcessingJobArn = Field(..., alias='ProcessingJobArn')


class CreateProjectOutput(BaseModel):
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')
    ProjectId_1: ProjectId = Field(..., alias='ProjectId')


class CreateSpaceResponse(BaseModel):
    SpaceArn_1: Optional[SpaceArn] = Field(None, alias='SpaceArn')


class CreateStudioLifecycleConfigResponse(BaseModel):
    StudioLifecycleConfigArn_1: Optional[StudioLifecycleConfigArn] = Field(
        None, alias='StudioLifecycleConfigArn'
    )


class CreateTrainingJobResponse(BaseModel):
    TrainingJobArn_1: TrainingJobArn = Field(..., alias='TrainingJobArn')


class CreateTransformJobResponse(BaseModel):
    TransformJobArn_1: TransformJobArn = Field(..., alias='TransformJobArn')


class CreateTrialComponentResponse(BaseModel):
    TrialComponentArn_1: Optional[TrialComponentArn] = Field(
        None, alias='TrialComponentArn'
    )


class CreateTrialResponse(BaseModel):
    TrialArn_1: Optional[TrialArn] = Field(None, alias='TrialArn')


class CreateUserProfileResponse(BaseModel):
    UserProfileArn_1: Optional[UserProfileArn] = Field(None, alias='UserProfileArn')


class CreateWorkforceResponse(BaseModel):
    WorkforceArn_1: WorkforceArn = Field(..., alias='WorkforceArn')


class CreateWorkteamResponse(BaseModel):
    WorkteamArn_1: Optional[WorkteamArn] = Field(None, alias='WorkteamArn')


class CustomImage(BaseModel):
    AppImageConfigName_1: AppImageConfigName = Field(..., alias='AppImageConfigName')
    ImageName_1: ImageName = Field(..., alias='ImageName')
    ImageVersionNumber_1: Optional[ImageVersionNumber] = Field(
        None, alias='ImageVersionNumber'
    )


class CustomImages(RootModel[List[CustomImage]]):
    root: List[CustomImage] = Field(..., max_length=200)


class CustomerMetadataMap(RootModel[Optional[Dict[str, CustomerMetadataValue]]]):
    root: Optional[Dict[str, CustomerMetadataValue]] = None


class DataCaptureConfig(BaseModel):
    CaptureContentTypeHeader_1: Optional[CaptureContentTypeHeader] = Field(
        None, alias='CaptureContentTypeHeader'
    )
    CaptureOptions: CaptureOptionList
    DestinationS3Uri_1: DestinationS3Uri = Field(..., alias='DestinationS3Uri')
    EnableCapture_1: Optional[EnableCapture] = Field(None, alias='EnableCapture')
    InitialSamplingPercentage: SamplingPercentage
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')


class DataCaptureConfigSummary(BaseModel):
    CaptureStatus_1: CaptureStatus = Field(..., alias='CaptureStatus')
    CurrentSamplingPercentage: SamplingPercentage
    DestinationS3Uri_1: DestinationS3Uri = Field(..., alias='DestinationS3Uri')
    EnableCapture_1: EnableCapture = Field(..., alias='EnableCapture')
    KmsKeyId_1: KmsKeyId = Field(..., alias='KmsKeyId')


class DataCatalogConfig(BaseModel):
    Catalog_1: Catalog = Field(..., alias='Catalog')
    Database_1: Database = Field(..., alias='Database')
    TableName_1: TableName = Field(..., alias='TableName')


class DataProcessing(BaseModel):
    InputFilter: Optional[JsonPath] = None
    JoinSource_1: Optional[JoinSource] = Field(None, alias='JoinSource')
    OutputFilter: Optional[JsonPath] = None


class DebugRuleConfiguration(BaseModel):
    InstanceType: Optional[ProcessingInstanceType] = None
    LocalPath: Optional[DirectoryPath] = None
    RuleConfigurationName_1: RuleConfigurationName = Field(
        ..., alias='RuleConfigurationName'
    )
    RuleEvaluatorImage: AlgorithmImage
    RuleParameters_1: Optional[RuleParameters] = Field(None, alias='RuleParameters')
    S3OutputPath: Optional[S3Uri] = None
    VolumeSizeInGB: Optional[OptionalVolumeSizeInGB] = None


class DebugRuleConfigurations(RootModel[List[DebugRuleConfiguration]]):
    root: List[DebugRuleConfiguration] = Field(..., max_length=20, min_length=0)


class DebugRuleEvaluationStatus(BaseModel):
    LastModifiedTime: Optional[Timestamp] = None
    RuleConfigurationName_1: Optional[RuleConfigurationName] = Field(
        None, alias='RuleConfigurationName'
    )
    RuleEvaluationJobArn: Optional[ProcessingJobArn] = None
    RuleEvaluationStatus_1: Optional[RuleEvaluationStatus] = Field(
        None, alias='RuleEvaluationStatus'
    )
    StatusDetails_1: Optional[StatusDetails] = Field(None, alias='StatusDetails')


class DebugRuleEvaluationStatuses(RootModel[List[DebugRuleEvaluationStatus]]):
    root: List[DebugRuleEvaluationStatus] = Field(..., max_length=20, min_length=0)


class DeleteActionRequest(BaseModel):
    ActionName: ExperimentEntityName


class DeleteAlgorithmInput(BaseModel):
    AlgorithmName: EntityName


class DeleteAppRequest(BaseModel):
    AppName_1: AppName = Field(..., alias='AppName')
    AppType_1: AppType = Field(..., alias='AppType')
    DomainId_1: DomainId = Field(..., alias='DomainId')
    SpaceName_1: Optional[SpaceName] = Field(None, alias='SpaceName')
    UserProfileName_1: Optional[UserProfileName] = Field(None, alias='UserProfileName')


class DeleteCodeRepositoryInput(BaseModel):
    CodeRepositoryName: EntityName


class DeleteContextRequest(BaseModel):
    ContextName: ExperimentEntityName


class DeleteDataQualityJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName


class DeleteDeviceFleetRequest(BaseModel):
    DeviceFleetName: EntityName


class DeleteEdgeDeploymentPlanRequest(BaseModel):
    EdgeDeploymentPlanName: EntityName


class DeleteEdgeDeploymentStageRequest(BaseModel):
    EdgeDeploymentPlanName: EntityName
    StageName: EntityName


class DeleteEndpointConfigInput(BaseModel):
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')


class DeleteEndpointInput(BaseModel):
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')


class DeleteExperimentRequest(BaseModel):
    ExperimentName: ExperimentEntityName


class DeleteExperimentResponse(BaseModel):
    ExperimentArn_1: Optional[ExperimentArn] = Field(None, alias='ExperimentArn')


class DeleteFeatureGroupRequest(BaseModel):
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')


class DeleteFlowDefinitionRequest(BaseModel):
    FlowDefinitionName_1: FlowDefinitionName = Field(..., alias='FlowDefinitionName')


class DeleteHubContentRequest(BaseModel):
    HubContentName_1: HubContentName = Field(..., alias='HubContentName')
    HubContentType_1: HubContentType = Field(..., alias='HubContentType')
    HubContentVersion_1: HubContentVersion = Field(..., alias='HubContentVersion')
    HubName_1: HubName = Field(..., alias='HubName')


class DeleteHubRequest(BaseModel):
    HubName_1: HubName = Field(..., alias='HubName')


class DeleteHumanTaskUiRequest(BaseModel):
    HumanTaskUiName_1: HumanTaskUiName = Field(..., alias='HumanTaskUiName')


class DeleteImageRequest(BaseModel):
    ImageName_1: ImageName = Field(..., alias='ImageName')


class DeleteImageVersionRequest(BaseModel):
    Alias: Optional[SageMakerImageVersionAlias] = None
    ImageName_1: ImageName = Field(..., alias='ImageName')
    Version: Optional[ImageVersionNumber] = None


class DeleteInferenceExperimentRequest(BaseModel):
    Name: InferenceExperimentName


class DeleteInferenceExperimentResponse(BaseModel):
    InferenceExperimentArn_1: InferenceExperimentArn = Field(
        ..., alias='InferenceExperimentArn'
    )


class DeleteModelBiasJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName


class DeleteModelCardRequest(BaseModel):
    ModelCardName: EntityName


class DeleteModelExplainabilityJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName


class DeleteModelInput(BaseModel):
    ModelName_1: ModelName = Field(..., alias='ModelName')


class DeleteModelPackageGroupPolicyInput(BaseModel):
    ModelPackageGroupName: EntityName


class DeleteModelPackageInput(BaseModel):
    ModelPackageName: VersionedArnOrName


class DeleteModelQualityJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName


class DeleteMonitoringScheduleRequest(BaseModel):
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )


class DeleteNotebookInstanceInput(BaseModel):
    NotebookInstanceName_1: NotebookInstanceName = Field(
        ..., alias='NotebookInstanceName'
    )


class DeleteNotebookInstanceLifecycleConfigInput(BaseModel):
    NotebookInstanceLifecycleConfigName_1: NotebookInstanceLifecycleConfigName = Field(
        ..., alias='NotebookInstanceLifecycleConfigName'
    )


class DeletePipelineRequest(BaseModel):
    ClientRequestToken: IdempotencyToken
    PipelineName_1: PipelineName = Field(..., alias='PipelineName')


class DeletePipelineResponse(BaseModel):
    PipelineArn_1: Optional[PipelineArn] = Field(None, alias='PipelineArn')


class DeleteProjectInput(BaseModel):
    ProjectName: ProjectEntityName


class DeleteSpaceRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    SpaceName_1: SpaceName = Field(..., alias='SpaceName')


class DeleteStudioLifecycleConfigRequest(BaseModel):
    StudioLifecycleConfigName_1: StudioLifecycleConfigName = Field(
        ..., alias='StudioLifecycleConfigName'
    )


class DeleteTagsInput(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    TagKeys: TagKeyList


class DeleteTrialComponentRequest(BaseModel):
    TrialComponentName: ExperimentEntityName


class DeleteTrialComponentResponse(BaseModel):
    TrialComponentArn_1: Optional[TrialComponentArn] = Field(
        None, alias='TrialComponentArn'
    )


class DeleteTrialRequest(BaseModel):
    TrialName: ExperimentEntityName


class DeleteTrialResponse(BaseModel):
    TrialArn_1: Optional[TrialArn] = Field(None, alias='TrialArn')


class DeleteUserProfileRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    UserProfileName_1: UserProfileName = Field(..., alias='UserProfileName')


class DeleteWorkforceRequest(BaseModel):
    WorkforceName_1: WorkforceName = Field(..., alias='WorkforceName')


class DeleteWorkteamRequest(BaseModel):
    WorkteamName_1: WorkteamName = Field(..., alias='WorkteamName')


class DeleteWorkteamResponse(BaseModel):
    Success_1: Success = Field(..., alias='Success')


class DeployedImage(BaseModel):
    ResolutionTime: Optional[Timestamp] = None
    ResolvedImage: Optional[ContainerImage] = None
    SpecifiedImage: Optional[ContainerImage] = None


class DeployedImages(RootModel[List[DeployedImage]]):
    root: List[DeployedImage]


class DeregisterDevicesRequest(BaseModel):
    DeviceFleetName: EntityName
    DeviceNames_1: DeviceNames = Field(..., alias='DeviceNames')


class DescribeActionRequest(BaseModel):
    ActionName: ExperimentEntityName


class DescribeAppRequest(BaseModel):
    AppName_1: AppName = Field(..., alias='AppName')
    AppType_1: AppType = Field(..., alias='AppType')
    DomainId_1: DomainId = Field(..., alias='DomainId')
    SpaceName_1: Optional[SpaceName] = Field(None, alias='SpaceName')
    UserProfileName_1: Optional[UserProfileName] = Field(None, alias='UserProfileName')


class DescribeCodeRepositoryInput(BaseModel):
    CodeRepositoryName: EntityName


class DescribeCompilationJobRequest(BaseModel):
    CompilationJobName: EntityName


class DescribeContextRequest(BaseModel):
    ContextName: ExperimentEntityNameOrArn


class DescribeDataQualityJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName


class DescribeDeviceFleetRequest(BaseModel):
    DeviceFleetName: EntityName


class DescribeDeviceRequest(BaseModel):
    DeviceFleetName: EntityName
    DeviceName: EntityName
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeDomainRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')


class DescribeEdgeDeploymentPlanRequest(BaseModel):
    EdgeDeploymentPlanName: EntityName
    MaxResults: Optional[DeploymentStageMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeEdgePackagingJobRequest(BaseModel):
    EdgePackagingJobName: EntityName


class DescribeEndpointConfigInput(BaseModel):
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')


class DescribeEndpointInput(BaseModel):
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')


class DescribeExperimentRequest(BaseModel):
    ExperimentName: ExperimentEntityName


class DescribeFeatureGroupRequest(BaseModel):
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFeatureMetadataRequest(BaseModel):
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')
    FeatureName_1: FeatureName = Field(..., alias='FeatureName')


class DescribeFlowDefinitionRequest(BaseModel):
    FlowDefinitionName_1: FlowDefinitionName = Field(..., alias='FlowDefinitionName')


class DescribeHubContentRequest(BaseModel):
    HubContentName_1: HubContentName = Field(..., alias='HubContentName')
    HubContentType_1: HubContentType = Field(..., alias='HubContentType')
    HubContentVersion_1: Optional[HubContentVersion] = Field(
        None, alias='HubContentVersion'
    )
    HubName_1: HubName = Field(..., alias='HubName')


class DescribeHubRequest(BaseModel):
    HubName_1: HubName = Field(..., alias='HubName')


class DescribeHumanTaskUiRequest(BaseModel):
    HumanTaskUiName_1: HumanTaskUiName = Field(..., alias='HumanTaskUiName')


class DescribeHumanTaskUiResponse(BaseModel):
    CreationTime: Timestamp
    HumanTaskUiArn_1: HumanTaskUiArn = Field(..., alias='HumanTaskUiArn')
    HumanTaskUiName_1: HumanTaskUiName = Field(..., alias='HumanTaskUiName')
    HumanTaskUiStatus_1: Optional[HumanTaskUiStatus] = Field(
        None, alias='HumanTaskUiStatus'
    )
    UiTemplate: UiTemplateInfo


class DescribeHyperParameterTuningJobRequest(BaseModel):
    HyperParameterTuningJobName_1: HyperParameterTuningJobName = Field(
        ..., alias='HyperParameterTuningJobName'
    )


class DescribeImageRequest(BaseModel):
    ImageName_1: ImageName = Field(..., alias='ImageName')


class DescribeImageResponse(BaseModel):
    CreationTime: Optional[Timestamp] = None
    Description: Optional[ImageDescription] = None
    DisplayName: Optional[ImageDisplayName] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    ImageArn_1: Optional[ImageArn] = Field(None, alias='ImageArn')
    ImageName_1: Optional[ImageName] = Field(None, alias='ImageName')
    ImageStatus_1: Optional[ImageStatus] = Field(None, alias='ImageStatus')
    LastModifiedTime: Optional[Timestamp] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class DescribeImageVersionRequest(BaseModel):
    Alias: Optional[SageMakerImageVersionAlias] = None
    ImageName_1: ImageName = Field(..., alias='ImageName')
    Version: Optional[ImageVersionNumber] = None


class DescribeImageVersionResponse(BaseModel):
    BaseImage: Optional[ImageBaseImage] = None
    ContainerImage: Optional[ImageContainerImage] = None
    CreationTime: Optional[Timestamp] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    Horovod_1: Optional[Horovod] = Field(None, alias='Horovod')
    ImageArn_1: Optional[ImageArn] = Field(None, alias='ImageArn')
    ImageVersionArn_1: Optional[ImageVersionArn] = Field(None, alias='ImageVersionArn')
    ImageVersionStatus_1: Optional[ImageVersionStatus] = Field(
        None, alias='ImageVersionStatus'
    )
    JobType_1: Optional[JobType] = Field(None, alias='JobType')
    LastModifiedTime: Optional[Timestamp] = None
    MLFramework_1: Optional[MLFramework] = Field(None, alias='MLFramework')
    Processor_1: Optional[Processor] = Field(None, alias='Processor')
    ProgrammingLang_1: Optional[ProgrammingLang] = Field(None, alias='ProgrammingLang')
    ReleaseNotes_1: Optional[ReleaseNotes] = Field(None, alias='ReleaseNotes')
    VendorGuidance_1: Optional[VendorGuidance] = Field(None, alias='VendorGuidance')
    Version: Optional[ImageVersionNumber] = None


class DescribeInferenceExperimentRequest(BaseModel):
    Name: InferenceExperimentName


class DescribeInferenceRecommendationsJobRequest(BaseModel):
    JobName: RecommendationJobName


class DescribeLabelingJobRequest(BaseModel):
    LabelingJobName_1: LabelingJobName = Field(..., alias='LabelingJobName')


class DescribeLineageGroupRequest(BaseModel):
    LineageGroupName: ExperimentEntityName


class DescribeModelBiasJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName


class DescribeModelCardExportJobRequest(BaseModel):
    ModelCardExportJobArn_1: ModelCardExportJobArn = Field(
        ..., alias='ModelCardExportJobArn'
    )


class DescribeModelCardRequest(BaseModel):
    ModelCardName: EntityName
    ModelCardVersion: Optional[Integer] = None


class DescribeModelExplainabilityJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName


class DescribeModelInput(BaseModel):
    ModelName_1: ModelName = Field(..., alias='ModelName')


class DescribeModelPackageInput(BaseModel):
    ModelPackageName: VersionedArnOrName


class DescribeModelQualityJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName


class DescribeMonitoringScheduleRequest(BaseModel):
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )


class DescribeNotebookInstanceInput(BaseModel):
    NotebookInstanceName_1: NotebookInstanceName = Field(
        ..., alias='NotebookInstanceName'
    )


class DescribeNotebookInstanceLifecycleConfigInput(BaseModel):
    NotebookInstanceLifecycleConfigName_1: NotebookInstanceLifecycleConfigName = Field(
        ..., alias='NotebookInstanceLifecycleConfigName'
    )


class DescribePipelineDefinitionForExecutionRequest(BaseModel):
    PipelineExecutionArn_1: PipelineExecutionArn = Field(
        ..., alias='PipelineExecutionArn'
    )


class DescribePipelineDefinitionForExecutionResponse(BaseModel):
    CreationTime: Optional[Timestamp] = None
    PipelineDefinition_1: Optional[PipelineDefinition] = Field(
        None, alias='PipelineDefinition'
    )


class DescribePipelineExecutionRequest(BaseModel):
    PipelineExecutionArn_1: PipelineExecutionArn = Field(
        ..., alias='PipelineExecutionArn'
    )


class DescribePipelineRequest(BaseModel):
    PipelineName: PipelineNameOrArn


class DescribeProcessingJobRequest(BaseModel):
    ProcessingJobName_1: ProcessingJobName = Field(..., alias='ProcessingJobName')


class DescribeProjectInput(BaseModel):
    ProjectName: ProjectEntityName


class DescribeSpaceRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    SpaceName_1: SpaceName = Field(..., alias='SpaceName')


class DescribeStudioLifecycleConfigRequest(BaseModel):
    StudioLifecycleConfigName_1: StudioLifecycleConfigName = Field(
        ..., alias='StudioLifecycleConfigName'
    )


class DescribeStudioLifecycleConfigResponse(BaseModel):
    CreationTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None
    StudioLifecycleConfigAppType_1: Optional[StudioLifecycleConfigAppType] = Field(
        None, alias='StudioLifecycleConfigAppType'
    )
    StudioLifecycleConfigArn_1: Optional[StudioLifecycleConfigArn] = Field(
        None, alias='StudioLifecycleConfigArn'
    )
    StudioLifecycleConfigContent_1: Optional[StudioLifecycleConfigContent] = Field(
        None, alias='StudioLifecycleConfigContent'
    )
    StudioLifecycleConfigName_1: Optional[StudioLifecycleConfigName] = Field(
        None, alias='StudioLifecycleConfigName'
    )


class DescribeSubscribedWorkteamRequest(BaseModel):
    WorkteamArn_1: WorkteamArn = Field(..., alias='WorkteamArn')


class DescribeTrainingJobRequest(BaseModel):
    TrainingJobName_1: TrainingJobName = Field(..., alias='TrainingJobName')


class DescribeTransformJobRequest(BaseModel):
    TransformJobName_1: TransformJobName = Field(..., alias='TransformJobName')


class DescribeTrialComponentRequest(BaseModel):
    TrialComponentName: ExperimentEntityNameOrArn


class DescribeTrialRequest(BaseModel):
    TrialName: ExperimentEntityName


class DescribeUserProfileRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    UserProfileName_1: UserProfileName = Field(..., alias='UserProfileName')


class DescribeWorkforceRequest(BaseModel):
    WorkforceName_1: WorkforceName = Field(..., alias='WorkforceName')


class DescribeWorkteamRequest(BaseModel):
    WorkteamName_1: WorkteamName = Field(..., alias='WorkteamName')


class DesiredWeightAndCapacity(BaseModel):
    DesiredInstanceCount: Optional[TaskCount] = None
    DesiredWeight: Optional[VariantWeight] = None
    VariantName_1: VariantName = Field(..., alias='VariantName')


class DesiredWeightAndCapacityList(RootModel[List[DesiredWeightAndCapacity]]):
    root: List[DesiredWeightAndCapacity] = Field(..., min_length=1)


class Device(BaseModel):
    Description: Optional[DeviceDescription] = None
    DeviceName_1: DeviceName = Field(..., alias='DeviceName')
    IotThingName: Optional[ThingName] = None


class DeviceDeploymentSummary(BaseModel):
    DeployedStageName: Optional[EntityName] = None
    DeploymentStartTime: Optional[Timestamp] = None
    Description: Optional[DeviceDescription] = None
    DeviceArn_1: DeviceArn = Field(..., alias='DeviceArn')
    DeviceDeploymentStatus_1: Optional[DeviceDeploymentStatus] = Field(
        None, alias='DeviceDeploymentStatus'
    )
    DeviceDeploymentStatusMessage: Optional[String] = None
    DeviceFleetName: Optional[EntityName] = None
    DeviceName_1: DeviceName = Field(..., alias='DeviceName')
    EdgeDeploymentPlanArn_1: EdgeDeploymentPlanArn = Field(
        ..., alias='EdgeDeploymentPlanArn'
    )
    EdgeDeploymentPlanName: EntityName
    StageName: EntityName


class DeviceFleetSummary(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DeviceFleetArn_1: DeviceFleetArn = Field(..., alias='DeviceFleetArn')
    DeviceFleetName: EntityName
    LastModifiedTime: Optional[Timestamp] = None


class DeviceSelectionConfig(BaseModel):
    DeviceNameContains: Optional[DeviceName] = None
    DeviceNames_1: Optional[DeviceNames] = Field(None, alias='DeviceNames')
    DeviceSubsetType_1: DeviceSubsetType = Field(..., alias='DeviceSubsetType')
    Percentage_1: Optional[Percentage] = Field(None, alias='Percentage')


class DeviceStats(BaseModel):
    ConnectedDeviceCount: Long
    RegisteredDeviceCount: Long


class Devices(RootModel[List[Device]]):
    root: List[Device]


class DisassociateTrialComponentRequest(BaseModel):
    TrialComponentName: ExperimentEntityName
    TrialName: ExperimentEntityName


class DisassociateTrialComponentResponse(BaseModel):
    TrialArn_1: Optional[TrialArn] = Field(None, alias='TrialArn')
    TrialComponentArn_1: Optional[TrialComponentArn] = Field(
        None, alias='TrialComponentArn'
    )


class DomainDetails(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DomainArn_1: Optional[DomainArn] = Field(None, alias='DomainArn')
    DomainId_1: Optional[DomainId] = Field(None, alias='DomainId')
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    Status: Optional[DomainStatus] = None
    Url: Optional[String1024] = None


class DomainList(RootModel[List[DomainDetails]]):
    root: List[DomainDetails]


class DomainSecurityGroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., max_length=3)


class EMRStepMetadata(BaseModel):
    ClusterId: Optional[String256] = None
    LogFilePath: Optional[String1024] = None
    StepId: Optional[String256] = None
    StepName: Optional[String256] = None


class EdgeDeploymentConfig(BaseModel):
    FailureHandlingPolicy_1: FailureHandlingPolicy = Field(
        ..., alias='FailureHandlingPolicy'
    )


class EdgeDeploymentModelConfig(BaseModel):
    EdgePackagingJobName: EntityName
    ModelHandle: EntityName


class EdgeDeploymentModelConfigs(RootModel[List[EdgeDeploymentModelConfig]]):
    root: List[EdgeDeploymentModelConfig]


class EdgeDeploymentPlanSummary(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DeviceFleetName: EntityName
    EdgeDeploymentFailed: Integer
    EdgeDeploymentPending: Integer
    EdgeDeploymentPlanArn_1: EdgeDeploymentPlanArn = Field(
        ..., alias='EdgeDeploymentPlanArn'
    )
    EdgeDeploymentPlanName: EntityName
    EdgeDeploymentSuccess: Integer
    LastModifiedTime: Optional[Timestamp] = None


class EdgeDeploymentStatus(BaseModel):
    EdgeDeploymentFailedInStage: Integer
    EdgeDeploymentPendingInStage: Integer
    EdgeDeploymentStageStartTime: Optional[Timestamp] = None
    EdgeDeploymentStatusMessage: Optional[String] = None
    EdgeDeploymentSuccessInStage: Integer
    StageStatus_1: StageStatus = Field(..., alias='StageStatus')


class EdgeModel(BaseModel):
    LatestInference: Optional[Timestamp] = None
    LatestSampleTime: Optional[Timestamp] = None
    ModelName: EntityName
    ModelVersion: EdgeVersion


class EdgeModelStat(BaseModel):
    ActiveDeviceCount: Long
    ConnectedDeviceCount: Long
    ModelName: EntityName
    ModelVersion: EdgeVersion
    OfflineDeviceCount: Long
    SamplingDeviceCount: Long


class EdgeModelStats(RootModel[List[EdgeModelStat]]):
    root: List[EdgeModelStat]


class EdgeModelSummary(BaseModel):
    ModelName: EntityName
    ModelVersion: EdgeVersion


class EdgeModels(RootModel[List[EdgeModel]]):
    root: List[EdgeModel]


class EdgeOutputConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    PresetDeploymentConfig: Optional[String] = None
    PresetDeploymentType: Optional[EdgePresetDeploymentType] = None
    S3OutputLocation: S3Uri


class EdgePackagingJobSummary(BaseModel):
    CompilationJobName: Optional[EntityName] = None
    CreationTime: Optional[Timestamp] = None
    EdgePackagingJobArn_1: EdgePackagingJobArn = Field(..., alias='EdgePackagingJobArn')
    EdgePackagingJobName: EntityName
    EdgePackagingJobStatus_1: EdgePackagingJobStatus = Field(
        ..., alias='EdgePackagingJobStatus'
    )
    LastModifiedTime: Optional[Timestamp] = None
    ModelName: Optional[EntityName] = None
    ModelVersion: Optional[EdgeVersion] = None


class EdgePresetDeploymentOutput(BaseModel):
    Artifact: Optional[EdgePresetDeploymentArtifact] = None
    Status: Optional[EdgePresetDeploymentStatus] = None
    StatusMessage: Optional[String] = None
    Type: EdgePresetDeploymentType


class EndpointConfigSummary(BaseModel):
    CreationTime: Timestamp
    EndpointConfigArn_1: EndpointConfigArn = Field(..., alias='EndpointConfigArn')
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')


class EndpointConfigSummaryList(RootModel[List[EndpointConfigSummary]]):
    root: List[EndpointConfigSummary]


class EndpointInfo(BaseModel):
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')


class EndpointInput(BaseModel):
    EndTimeOffset: Optional[MonitoringTimeOffsetString] = None
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    FeaturesAttribute: Optional[String] = None
    InferenceAttribute: Optional[String] = None
    LocalPath: ProcessingLocalPath
    ProbabilityAttribute: Optional[String] = None
    ProbabilityThresholdAttribute_1: Optional[ProbabilityThresholdAttribute] = Field(
        None, alias='ProbabilityThresholdAttribute'
    )
    S3DataDistributionType: Optional[ProcessingS3DataDistributionType] = None
    S3InputMode: Optional[ProcessingS3InputMode] = None
    StartTimeOffset: Optional[MonitoringTimeOffsetString] = None


class EndpointMetadata(BaseModel):
    EndpointConfigName_1: Optional[EndpointConfigName] = Field(
        None, alias='EndpointConfigName'
    )
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    EndpointStatus_1: Optional[EndpointStatus] = Field(None, alias='EndpointStatus')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')


class EndpointOutputConfiguration(BaseModel):
    EndpointName: String
    InitialInstanceCount: Integer
    InstanceType: ProductionVariantInstanceType
    VariantName: String


class EndpointSummary(BaseModel):
    CreationTime: Timestamp
    EndpointArn_1: EndpointArn = Field(..., alias='EndpointArn')
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    EndpointStatus_1: EndpointStatus = Field(..., alias='EndpointStatus')
    LastModifiedTime: Timestamp


class EndpointSummaryList(RootModel[List[EndpointSummary]]):
    root: List[EndpointSummary]


class Endpoints(RootModel[List[EndpointInfo]]):
    root: List[EndpointInfo] = Field(..., max_length=1)


class EnvironmentMap(RootModel[Optional[Dict[str, EnvironmentValue]]]):
    root: Optional[Dict[str, EnvironmentValue]] = None


class EnvironmentParameter(BaseModel):
    Key: String
    Value: String
    ValueType: String


class EnvironmentParameters(RootModel[List[EnvironmentParameter]]):
    root: List[EnvironmentParameter] = Field(..., max_length=10, min_length=1)


class ExperimentConfig(BaseModel):
    ExperimentName: Optional[ExperimentEntityName] = None
    RunName: Optional[ExperimentEntityName] = None
    TrialComponentDisplayName: Optional[ExperimentEntityName] = None
    TrialName: Optional[ExperimentEntityName] = None


class ExperimentSource(BaseModel):
    SourceArn: ExperimentSourceArn
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')


class ExperimentSummary(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DisplayName: Optional[ExperimentEntityName] = None
    ExperimentArn_1: Optional[ExperimentArn] = Field(None, alias='ExperimentArn')
    ExperimentName: Optional[ExperimentEntityName] = None
    ExperimentSource_1: Optional[ExperimentSource] = Field(
        None, alias='ExperimentSource'
    )
    LastModifiedTime: Optional[Timestamp] = None


class FailStepMetadata(BaseModel):
    ErrorMessage: Optional[String3072] = None


class FeatureDefinition(BaseModel):
    FeatureName_1: Optional[FeatureName] = Field(None, alias='FeatureName')
    FeatureType_1: Optional[FeatureType] = Field(None, alias='FeatureType')


class FeatureDefinitions(RootModel[List[FeatureDefinition]]):
    root: List[FeatureDefinition] = Field(..., max_length=2500, min_length=1)


class FeatureParameter(BaseModel):
    Key: Optional[FeatureParameterKey] = None
    Value: Optional[FeatureParameterValue] = None


class FeatureParameterAdditions(RootModel[List[FeatureParameter]]):
    root: List[FeatureParameter] = Field(..., max_length=25)


class FeatureParameters(RootModel[List[FeatureParameter]]):
    root: List[FeatureParameter] = Field(..., max_length=25, min_length=0)


class FileSource(BaseModel):
    ContentDigest_1: Optional[ContentDigest] = Field(None, alias='ContentDigest')
    ContentType_1: Optional[ContentType] = Field(None, alias='ContentType')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class FileSystemConfig(BaseModel):
    DefaultGid_1: Optional[DefaultGid] = Field(None, alias='DefaultGid')
    DefaultUid_1: Optional[DefaultUid] = Field(None, alias='DefaultUid')
    MountPath_1: Optional[MountPath] = Field(None, alias='MountPath')


class FileSystemDataSource(BaseModel):
    DirectoryPath_1: DirectoryPath = Field(..., alias='DirectoryPath')
    FileSystemAccessMode_1: FileSystemAccessMode = Field(
        ..., alias='FileSystemAccessMode'
    )
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')
    FileSystemType_1: FileSystemType = Field(..., alias='FileSystemType')


class Filter(BaseModel):
    Name: ResourcePropertyName
    Operator_1: Optional[Operator] = Field(None, alias='Operator')
    Value: Optional[FilterValue] = None


class FilterList(RootModel[List[Filter]]):
    root: List[Filter] = Field(..., max_length=20, min_length=1)


class FinalAutoMLJobObjectiveMetric(BaseModel):
    MetricName: AutoMLMetricEnum
    StandardMetricName: Optional[AutoMLMetricEnum] = None
    Type: Optional[AutoMLJobObjectiveType] = None
    Value: MetricValue


class FinalHyperParameterTuningJobObjectiveMetric(BaseModel):
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Type: Optional[HyperParameterTuningJobObjectiveType] = None
    Value: MetricValue


class FlowDefinitionOutputConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    S3OutputPath: S3Uri


class FlowDefinitionSummary(BaseModel):
    CreationTime: Timestamp
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    FlowDefinitionArn_1: FlowDefinitionArn = Field(..., alias='FlowDefinitionArn')
    FlowDefinitionName_1: FlowDefinitionName = Field(..., alias='FlowDefinitionName')
    FlowDefinitionStatus_1: FlowDefinitionStatus = Field(
        ..., alias='FlowDefinitionStatus'
    )


class GetDeviceFleetReportResponse(BaseModel):
    AgentVersions_1: Optional[AgentVersions] = Field(None, alias='AgentVersions')
    Description: Optional[DeviceFleetDescription] = None
    DeviceFleetArn_1: DeviceFleetArn = Field(..., alias='DeviceFleetArn')
    DeviceFleetName: EntityName
    DeviceStats_1: Optional[DeviceStats] = Field(None, alias='DeviceStats')
    ModelStats: Optional[EdgeModelStats] = None
    OutputConfig: Optional[EdgeOutputConfig] = None
    ReportGenerated: Optional[Timestamp] = None


class GetLineageGroupPolicyRequest(BaseModel):
    LineageGroupName: LineageGroupNameOrArn


class GetLineageGroupPolicyResponse(BaseModel):
    LineageGroupArn_1: Optional[LineageGroupArn] = Field(None, alias='LineageGroupArn')
    ResourcePolicy: Optional[ResourcePolicyString] = None


class GetModelPackageGroupPolicyOutput(BaseModel):
    ResourcePolicy: PolicyString


class GetSagemakerServicecatalogPortfolioStatusOutput(BaseModel):
    Status: Optional[SagemakerServicecatalogStatus] = None


class GetSearchSuggestionsRequest(BaseModel):
    Resource: ResourceType
    SuggestionQuery_1: Optional[SuggestionQuery] = Field(None, alias='SuggestionQuery')


class GitConfig(BaseModel):
    Branch_1: Optional[Branch] = Field(None, alias='Branch')
    RepositoryUrl: GitConfigUrl
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')


class GitConfigForUpdate(BaseModel):
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')


class HubContentSearchKeywordList(RootModel[List[HubSearchKeyword]]):
    root: List[HubSearchKeyword] = Field(..., max_length=50)


class HubInfo(BaseModel):
    CreationTime: Timestamp
    HubArn_1: HubArn = Field(..., alias='HubArn')
    HubDescription_1: Optional[HubDescription] = Field(None, alias='HubDescription')
    HubDisplayName_1: Optional[HubDisplayName] = Field(None, alias='HubDisplayName')
    HubName_1: HubName = Field(..., alias='HubName')
    HubSearchKeywords: Optional[HubSearchKeywordList] = None
    HubStatus_1: HubStatus = Field(..., alias='HubStatus')
    LastModifiedTime: Timestamp


class HubInfoList(RootModel[List[HubInfo]]):
    root: List[HubInfo]


class HubS3StorageConfig(BaseModel):
    S3OutputPath_1: Optional[S3OutputPath] = Field(None, alias='S3OutputPath')


class HumanTaskUiSummary(BaseModel):
    CreationTime: Timestamp
    HumanTaskUiArn_1: HumanTaskUiArn = Field(..., alias='HumanTaskUiArn')
    HumanTaskUiName_1: HumanTaskUiName = Field(..., alias='HumanTaskUiName')


class HyperParameterTrainingJobEnvironmentMap(
    RootModel[Optional[Dict[str, HyperParameterTrainingJobEnvironmentValue]]]
):
    root: Optional[Dict[str, HyperParameterTrainingJobEnvironmentValue]] = None


class HyperParameterTrainingJobSummary(BaseModel):
    CreationTime: Timestamp
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    FinalHyperParameterTuningJobObjectiveMetric_1: Optional[
        FinalHyperParameterTuningJobObjectiveMetric
    ] = Field(None, alias='FinalHyperParameterTuningJobObjectiveMetric')
    ObjectiveStatus_1: Optional[ObjectiveStatus] = Field(None, alias='ObjectiveStatus')
    TrainingEndTime: Optional[Timestamp] = None
    TrainingJobArn_1: TrainingJobArn = Field(..., alias='TrainingJobArn')
    TrainingJobDefinitionName: Optional[HyperParameterTrainingJobDefinitionName] = None
    TrainingJobName_1: TrainingJobName = Field(..., alias='TrainingJobName')
    TrainingJobStatus_1: TrainingJobStatus = Field(..., alias='TrainingJobStatus')
    TrainingStartTime: Optional[Timestamp] = None
    TunedHyperParameters: HyperParameters
    TuningJobName: Optional[HyperParameterTuningJobName] = None


class HyperParameterTuningInstanceConfig(BaseModel):
    InstanceCount: TrainingInstanceCount
    InstanceType: TrainingInstanceType
    VolumeSizeInGB_1: VolumeSizeInGB = Field(..., alias='VolumeSizeInGB')


class HyperParameterTuningInstanceConfigs(
    RootModel[List[HyperParameterTuningInstanceConfig]]
):
    root: List[HyperParameterTuningInstanceConfig] = Field(
        ..., max_length=6, min_length=1
    )


class HyperParameterTuningJobCompletionDetails(BaseModel):
    ConvergenceDetectedTime: Optional[Timestamp] = None
    NumberOfTrainingJobsObjectiveNotImproving: Optional[Integer] = None


class HyperParameterTuningJobConsumedResources(BaseModel):
    RuntimeInSeconds: Optional[Integer] = None


class HyperParameterTuningJobObjective(BaseModel):
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Type: HyperParameterTuningJobObjectiveType


class HyperParameterTuningJobObjectives(
    RootModel[List[HyperParameterTuningJobObjective]]
):
    root: List[HyperParameterTuningJobObjective]


class HyperParameterTuningJobSummary(BaseModel):
    CreationTime: Timestamp
    HyperParameterTuningEndTime: Optional[Timestamp] = None
    HyperParameterTuningJobArn_1: HyperParameterTuningJobArn = Field(
        ..., alias='HyperParameterTuningJobArn'
    )
    HyperParameterTuningJobName_1: HyperParameterTuningJobName = Field(
        ..., alias='HyperParameterTuningJobName'
    )
    HyperParameterTuningJobStatus_1: HyperParameterTuningJobStatus = Field(
        ..., alias='HyperParameterTuningJobStatus'
    )
    LastModifiedTime: Optional[Timestamp] = None
    ObjectiveStatusCounters_1: ObjectiveStatusCounters = Field(
        ..., alias='ObjectiveStatusCounters'
    )
    ResourceLimits_1: Optional[ResourceLimits] = Field(None, alias='ResourceLimits')
    Strategy: HyperParameterTuningJobStrategyType
    TrainingJobStatusCounters_1: TrainingJobStatusCounters = Field(
        ..., alias='TrainingJobStatusCounters'
    )


class HyperParameterTuningJobWarmStartConfig(BaseModel):
    ParentHyperParameterTuningJobs_1: ParentHyperParameterTuningJobs = Field(
        ..., alias='ParentHyperParameterTuningJobs'
    )
    WarmStartType: HyperParameterTuningJobWarmStartType


class HyperParameterTuningResourceConfig(BaseModel):
    AllocationStrategy: Optional[HyperParameterTuningAllocationStrategy] = None
    InstanceConfigs: Optional[HyperParameterTuningInstanceConfigs] = None
    InstanceCount: Optional[TrainingInstanceCount] = None
    InstanceType: Optional[TrainingInstanceType] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VolumeSizeInGB: Optional[OptionalVolumeSizeInGB] = None


class HyperbandStrategyConfig(BaseModel):
    MaxResource: Optional[HyperbandStrategyMaxResource] = None
    MinResource: Optional[HyperbandStrategyMinResource] = None


class IamIdentity(BaseModel):
    Arn: Optional[String] = None
    PrincipalId: Optional[String] = None
    SourceIdentity: Optional[String] = None


class Image(BaseModel):
    CreationTime: Timestamp
    Description: Optional[ImageDescription] = None
    DisplayName: Optional[ImageDisplayName] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    ImageArn_1: ImageArn = Field(..., alias='ImageArn')
    ImageName_1: ImageName = Field(..., alias='ImageName')
    ImageStatus_1: ImageStatus = Field(..., alias='ImageStatus')
    LastModifiedTime: Timestamp


class ImageClassificationJobConfig(BaseModel):
    CompletionCriteria: Optional[AutoMLJobCompletionCriteria] = None


class ImageVersion(BaseModel):
    CreationTime: Timestamp
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    ImageArn_1: ImageArn = Field(..., alias='ImageArn')
    ImageVersionArn_1: ImageVersionArn = Field(..., alias='ImageVersionArn')
    ImageVersionStatus_1: ImageVersionStatus = Field(..., alias='ImageVersionStatus')
    LastModifiedTime: Timestamp
    Version: ImageVersionNumber


class ImageVersions(RootModel[List[ImageVersion]]):
    root: List[ImageVersion]


class Images(RootModel[List[Image]]):
    root: List[Image]


class InferenceExecutionConfig(BaseModel):
    Mode: InferenceExecutionMode


class InferenceExperimentDataStorageConfig(BaseModel):
    ContentType: Optional[CaptureContentTypeHeader] = None
    Destination: DestinationS3Uri
    KmsKey: Optional[KmsKeyId] = None


class InferenceExperimentSchedule(BaseModel):
    EndTime: Optional[Timestamp] = None
    StartTime: Optional[Timestamp] = None


class InferenceExperimentSummary(BaseModel):
    CompletionTime: Optional[Timestamp] = None
    CreationTime: Timestamp
    Description: Optional[InferenceExperimentDescription] = None
    LastModifiedTime: Timestamp
    Name: InferenceExperimentName
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Schedule: Optional[InferenceExperimentSchedule] = None
    Status: InferenceExperimentStatus
    StatusReason: Optional[InferenceExperimentStatusReason] = None
    Type: InferenceExperimentType


class InferenceMetrics(BaseModel):
    MaxInvocations: Integer
    ModelLatency: Integer


class InferenceRecommendationsJob(BaseModel):
    CompletionTime: Optional[Timestamp] = None
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    JobArn: RecommendationJobArn
    JobDescription: RecommendationJobDescription
    JobName: RecommendationJobName
    JobType: RecommendationJobType
    LastModifiedTime_1: LastModifiedTime = Field(..., alias='LastModifiedTime')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Status: RecommendationJobStatus


class InferenceRecommendationsJobs(RootModel[List[InferenceRecommendationsJob]]):
    root: List[InferenceRecommendationsJob]


class InputConfig(BaseModel):
    DataInputConfig_1: DataInputConfig = Field(..., alias='DataInputConfig')
    Framework_1: Framework = Field(..., alias='Framework')
    FrameworkVersion_1: Optional[FrameworkVersion] = Field(
        None, alias='FrameworkVersion'
    )
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class InputModes(RootModel[List[TrainingInputMode]]):
    root: List[TrainingInputMode] = Field(..., min_length=1)


class InstanceGroup(BaseModel):
    InstanceCount: TrainingInstanceCount
    InstanceGroupName_1: InstanceGroupName = Field(..., alias='InstanceGroupName')
    InstanceType: TrainingInstanceType


class InstanceGroups(RootModel[List[InstanceGroup]]):
    root: List[InstanceGroup] = Field(..., max_length=5)


class InstanceMetadataServiceConfiguration(BaseModel):
    MinimumInstanceMetadataServiceVersion_1: MinimumInstanceMetadataServiceVersion = (
        Field(..., alias='MinimumInstanceMetadataServiceVersion')
    )


class IntegerParameterRange(BaseModel):
    MaxValue: ParameterValue
    MinValue: ParameterValue
    Name: ParameterKey
    ScalingType: Optional[HyperParameterScalingType] = None


class IntegerParameterRangeSpecification(BaseModel):
    MaxValue: ParameterValue
    MinValue: ParameterValue


class IntegerParameterRanges(RootModel[List[IntegerParameterRange]]):
    root: List[IntegerParameterRange] = Field(..., max_length=30, min_length=0)


class KernelGatewayImageConfig(BaseModel):
    FileSystemConfig_1: Optional[FileSystemConfig] = Field(
        None, alias='FileSystemConfig'
    )
    KernelSpecs_1: KernelSpecs = Field(..., alias='KernelSpecs')


class LabelingJobForWorkteamSummary(BaseModel):
    CreationTime: Timestamp
    JobReferenceCode_1: JobReferenceCode = Field(..., alias='JobReferenceCode')
    LabelCounters: Optional[LabelCountersForWorkteam] = None
    LabelingJobName_1: Optional[LabelingJobName] = Field(None, alias='LabelingJobName')
    NumberOfHumanWorkersPerDataObject_1: Optional[NumberOfHumanWorkersPerDataObject] = (
        Field(None, alias='NumberOfHumanWorkersPerDataObject')
    )
    WorkRequesterAccountId: AccountId


class LabelingJobForWorkteamSummaryList(RootModel[List[LabelingJobForWorkteamSummary]]):
    root: List[LabelingJobForWorkteamSummary]


class LabelingJobOutput(BaseModel):
    FinalActiveLearningModelArn: Optional[ModelArn] = None
    OutputDatasetS3Uri: S3Uri


class LabelingJobOutputConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    S3OutputPath: S3Uri
    SnsTopicArn_1: Optional[SnsTopicArn] = Field(None, alias='SnsTopicArn')


class LabelingJobS3DataSource(BaseModel):
    ManifestS3Uri: S3Uri


class LabelingJobSnsDataSource(BaseModel):
    SnsTopicArn_1: SnsTopicArn = Field(..., alias='SnsTopicArn')


class LabelingJobStoppingConditions(BaseModel):
    MaxHumanLabeledObjectCount_1: Optional[MaxHumanLabeledObjectCount] = Field(
        None, alias='MaxHumanLabeledObjectCount'
    )
    MaxPercentageOfInputDatasetLabeled_1: Optional[
        MaxPercentageOfInputDatasetLabeled
    ] = Field(None, alias='MaxPercentageOfInputDatasetLabeled')


class LastUpdateStatus(BaseModel):
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    Status: LastUpdateStatusValue


class LifecycleConfigArns(RootModel[List[StudioLifecycleConfigArn]]):
    root: List[StudioLifecycleConfigArn]


class LineageEntityParameters(RootModel[Optional[Dict[str, StringParameterValue]]]):
    root: Optional[Dict[str, StringParameterValue]] = None


class LineageGroupSummary(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DisplayName: Optional[ExperimentEntityName] = None
    LastModifiedTime: Optional[Timestamp] = None
    LineageGroupArn_1: Optional[LineageGroupArn] = Field(None, alias='LineageGroupArn')
    LineageGroupName: Optional[ExperimentEntityName] = None


class ListActionsRequest(BaseModel):
    ActionType: Optional[String256] = None
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortActionsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    SourceUri_1: Optional[SourceUri] = Field(None, alias='SourceUri')


class ListAlgorithmsInput(BaseModel):
    CreationTimeAfter: Optional[CreationTime] = None
    CreationTimeBefore: Optional[CreationTime] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[AlgorithmSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListAlgorithmsOutput(BaseModel):
    AlgorithmSummaryList_1: AlgorithmSummaryList = Field(
        ..., alias='AlgorithmSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAliasesRequest(BaseModel):
    Alias: Optional[SageMakerImageVersionAlias] = None
    ImageName_1: ImageName = Field(..., alias='ImageName')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Version: Optional[ImageVersionNumber] = None


class ListAliasesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SageMakerImageVersionAliases_1: Optional[SageMakerImageVersionAliases] = Field(
        None, alias='SageMakerImageVersionAliases'
    )


class ListAppImageConfigsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    ModifiedTimeAfter: Optional[Timestamp] = None
    ModifiedTimeBefore: Optional[Timestamp] = None
    NameContains: Optional[AppImageConfigName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[AppImageConfigSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListAppsRequest(BaseModel):
    DomainIdEquals: Optional[DomainId] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[AppSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    SpaceNameEquals: Optional[SpaceName] = None
    UserProfileNameEquals: Optional[UserProfileName] = None


class ListAppsResponse(BaseModel):
    Apps: Optional[AppList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListArtifactsRequest(BaseModel):
    ArtifactType: Optional[String256] = None
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortArtifactsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    SourceUri_1: Optional[SourceUri] = Field(None, alias='SourceUri')


class ListAssociationsRequest(BaseModel):
    AssociationType: Optional[AssociationEdgeType] = None
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    DestinationArn: Optional[AssociationEntityArn] = None
    DestinationType: Optional[String256] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortAssociationsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    SourceArn: Optional[AssociationEntityArn] = None
    SourceType: Optional[String256] = None


class ListAutoMLJobsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults: Optional[AutoMLMaxResults] = None
    NameContains: Optional[AutoMLNameContains] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[AutoMLSortBy] = None
    SortOrder: Optional[AutoMLSortOrder] = None
    StatusEquals: Optional[AutoMLJobStatus] = None


class ListCandidatesForAutoMLJobRequest(BaseModel):
    AutoMLJobName_1: AutoMLJobName = Field(..., alias='AutoMLJobName')
    CandidateNameEquals: Optional[CandidateName] = None
    MaxResults: Optional[AutoMLMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[CandidateSortBy] = None
    SortOrder: Optional[AutoMLSortOrder] = None
    StatusEquals: Optional[CandidateStatus] = None


class ListCodeRepositoriesInput(BaseModel):
    CreationTimeAfter: Optional[CreationTime] = None
    CreationTimeBefore: Optional[CreationTime] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[CodeRepositoryNameContains] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[CodeRepositorySortBy] = None
    SortOrder: Optional[CodeRepositorySortOrder] = None


class ListCompilationJobsRequest(BaseModel):
    CreationTimeAfter: Optional[CreationTime] = None
    CreationTimeBefore: Optional[CreationTime] = None
    LastModifiedTimeAfter: Optional[LastModifiedTime] = None
    LastModifiedTimeBefore: Optional[LastModifiedTime] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ListCompilationJobsSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[CompilationJobStatus] = None


class ListContextsRequest(BaseModel):
    ContextType: Optional[String256] = None
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortContextsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    SourceUri_1: Optional[SourceUri] = Field(None, alias='SourceUri')


class ListDataQualityJobDefinitionsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[MonitoringJobDefinitionSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListDeviceFleetsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults: Optional[ListMaxResults] = None
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ListDeviceFleetsSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListDevicesRequest(BaseModel):
    DeviceFleetName: Optional[EntityName] = None
    LatestHeartbeatAfter: Optional[Timestamp] = None
    MaxResults: Optional[ListMaxResults] = None
    ModelName: Optional[EntityName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDomainsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDomainsResponse(BaseModel):
    Domains: Optional[DomainList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEdgeDeploymentPlansRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    DeviceFleetNameContains: Optional[NameContains] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults: Optional[ListMaxResults] = None
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ListEdgeDeploymentPlansSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListEdgePackagingJobsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults: Optional[ListMaxResults] = None
    ModelNameContains: Optional[NameContains] = None
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ListEdgePackagingJobsSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[EdgePackagingJobStatus] = None


class ListEndpointConfigsInput(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[EndpointConfigNameContains] = None
    NextToken: Optional[PaginationToken] = None
    SortBy: Optional[EndpointConfigSortKey] = None
    SortOrder: Optional[OrderKey] = None


class ListEndpointConfigsOutput(BaseModel):
    EndpointConfigs: EndpointConfigSummaryList
    NextToken: Optional[PaginationToken] = None


class ListEndpointsInput(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[EndpointNameContains] = None
    NextToken: Optional[PaginationToken] = None
    SortBy: Optional[EndpointSortKey] = None
    SortOrder: Optional[OrderKey] = None
    StatusEquals: Optional[EndpointStatus] = None


class ListEndpointsOutput(BaseModel):
    Endpoints: EndpointSummaryList
    NextToken: Optional[PaginationToken] = None


class ListExperimentsRequest(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortExperimentsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListFeatureGroupsRequest(BaseModel):
    CreationTimeAfter: Optional[CreationTime] = None
    CreationTimeBefore: Optional[CreationTime] = None
    FeatureGroupStatusEquals: Optional[FeatureGroupStatus] = None
    MaxResults: Optional[FeatureGroupMaxResults] = None
    NameContains: Optional[FeatureGroupNameContains] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OfflineStoreStatusEquals: Optional[OfflineStoreStatusValue] = None
    SortBy: Optional[FeatureGroupSortBy] = None
    SortOrder: Optional[FeatureGroupSortOrder] = None


class ListFlowDefinitionsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListHubContentVersionsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    HubContentName_1: HubContentName = Field(..., alias='HubContentName')
    HubContentType_1: HubContentType = Field(..., alias='HubContentType')
    HubName_1: HubName = Field(..., alias='HubName')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    MaxSchemaVersion: Optional[DocumentSchemaVersion] = None
    MinVersion: Optional[HubContentVersion] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[HubContentSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListHubContentsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    HubContentType_1: HubContentType = Field(..., alias='HubContentType')
    HubName_1: HubName = Field(..., alias='HubName')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    MaxSchemaVersion: Optional[DocumentSchemaVersion] = None
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[HubContentSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListHubsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[HubSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListHubsResponse(BaseModel):
    HubSummaries: HubInfoList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListHumanTaskUisRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListHyperParameterTuningJobsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[HyperParameterTuningJobSortByOptions] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[HyperParameterTuningJobStatus] = None


class ListImageVersionsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    ImageName_1: ImageName = Field(..., alias='ImageName')
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ImageVersionSortBy] = None
    SortOrder: Optional[ImageVersionSortOrder] = None


class ListImageVersionsResponse(BaseModel):
    ImageVersions_1: Optional[ImageVersions] = Field(None, alias='ImageVersions')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListImagesRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[ImageNameContains] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ImageSortBy] = None
    SortOrder: Optional[ImageSortOrder] = None


class ListImagesResponse(BaseModel):
    Images_1: Optional[Images] = Field(None, alias='Images')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListInferenceExperimentsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortInferenceExperimentsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[InferenceExperimentStatus] = None
    Type: Optional[InferenceExperimentType] = None


class ListInferenceRecommendationsJobStepsRequest(BaseModel):
    JobName: RecommendationJobName
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[RecommendationJobStatus] = None
    StepType: Optional[RecommendationStepType] = None


class ListInferenceRecommendationsJobsRequest(BaseModel):
    CreationTimeAfter: Optional[CreationTime] = None
    CreationTimeBefore: Optional[CreationTime] = None
    LastModifiedTimeAfter: Optional[LastModifiedTime] = None
    LastModifiedTimeBefore: Optional[LastModifiedTime] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ListInferenceRecommendationsJobsSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[RecommendationJobStatus] = None


class ListInferenceRecommendationsJobsResponse(BaseModel):
    InferenceRecommendationsJobs_1: InferenceRecommendationsJobs = Field(
        ..., alias='InferenceRecommendationsJobs'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLabelingJobsForWorkteamRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    JobReferenceCodeContains_1: Optional[JobReferenceCodeContains] = Field(
        None, alias='JobReferenceCodeContains'
    )
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ListLabelingJobsForWorkteamSortByOptions] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    WorkteamArn_1: WorkteamArn = Field(..., alias='WorkteamArn')


class ListLabelingJobsForWorkteamResponse(BaseModel):
    LabelingJobSummaryList: LabelingJobForWorkteamSummaryList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLabelingJobsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy_1: Optional[SortBy] = Field(None, alias='SortBy')
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[LabelingJobStatus] = None


class ListLineageEntityParameterKey(RootModel[List[StringParameterValue]]):
    root: List[StringParameterValue]


class ListLineageGroupsRequest(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortLineageGroupsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListModelBiasJobDefinitionsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[MonitoringJobDefinitionSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListModelCardExportJobsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    ModelCardExportJobNameContains: Optional[EntityName] = None
    ModelCardName: EntityName
    ModelCardVersion: Optional[Integer] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ModelCardExportJobSortBy] = None
    SortOrder: Optional[ModelCardExportJobSortOrder] = None
    StatusEquals: Optional[ModelCardExportJobStatus] = None


class ListModelCardVersionsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    ModelCardName: EntityName
    ModelCardStatus_1: Optional[ModelCardStatus] = Field(None, alias='ModelCardStatus')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ModelCardVersionSortBy] = None
    SortOrder: Optional[ModelCardSortOrder] = None


class ListModelCardsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    ModelCardStatus_1: Optional[ModelCardStatus] = Field(None, alias='ModelCardStatus')
    NameContains: Optional[EntityName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ModelCardSortBy] = None
    SortOrder: Optional[ModelCardSortOrder] = None


class ListModelExplainabilityJobDefinitionsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[MonitoringJobDefinitionSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListModelPackageGroupsInput(BaseModel):
    CreationTimeAfter: Optional[CreationTime] = None
    CreationTimeBefore: Optional[CreationTime] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ModelPackageGroupSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListModelPackageGroupsOutput(BaseModel):
    ModelPackageGroupSummaryList_1: ModelPackageGroupSummaryList = Field(
        ..., alias='ModelPackageGroupSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelPackagesInput(BaseModel):
    CreationTimeAfter: Optional[CreationTime] = None
    CreationTimeBefore: Optional[CreationTime] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    ModelApprovalStatus_1: Optional[ModelApprovalStatus] = Field(
        None, alias='ModelApprovalStatus'
    )
    ModelPackageGroupName: Optional[ArnOrName] = None
    ModelPackageType_1: Optional[ModelPackageType] = Field(
        None, alias='ModelPackageType'
    )
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ModelPackageSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListModelQualityJobDefinitionsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[MonitoringJobDefinitionSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListModelsInput(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[ModelNameContains] = None
    NextToken: Optional[PaginationToken] = None
    SortBy: Optional[ModelSortKey] = None
    SortOrder: Optional[OrderKey] = None


class ListMonitoringAlertHistoryRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    MonitoringAlertName_1: Optional[MonitoringAlertName] = Field(
        None, alias='MonitoringAlertName'
    )
    MonitoringScheduleName_1: Optional[MonitoringScheduleName] = Field(
        None, alias='MonitoringScheduleName'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[MonitoringAlertHistorySortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[MonitoringAlertStatus] = None


class ListMonitoringAlertsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMonitoringExecutionsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    MonitoringJobDefinitionName_1: Optional[MonitoringJobDefinitionName] = Field(
        None, alias='MonitoringJobDefinitionName'
    )
    MonitoringScheduleName_1: Optional[MonitoringScheduleName] = Field(
        None, alias='MonitoringScheduleName'
    )
    MonitoringTypeEquals: Optional[MonitoringType] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ScheduledTimeAfter: Optional[Timestamp] = None
    ScheduledTimeBefore: Optional[Timestamp] = None
    SortBy: Optional[MonitoringExecutionSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[ExecutionStatus] = None


class ListMonitoringSchedulesRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    MonitoringJobDefinitionName_1: Optional[MonitoringJobDefinitionName] = Field(
        None, alias='MonitoringJobDefinitionName'
    )
    MonitoringTypeEquals: Optional[MonitoringType] = None
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[MonitoringScheduleSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[ScheduleStatus] = None


class ListNotebookInstanceLifecycleConfigsInput(BaseModel):
    CreationTimeAfter: Optional[CreationTime] = None
    CreationTimeBefore: Optional[CreationTime] = None
    LastModifiedTimeAfter: Optional[LastModifiedTime] = None
    LastModifiedTimeBefore: Optional[LastModifiedTime] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[NotebookInstanceLifecycleConfigNameContains] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[NotebookInstanceLifecycleConfigSortKey] = None
    SortOrder: Optional[NotebookInstanceLifecycleConfigSortOrder] = None


class ListNotebookInstanceLifecycleConfigsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    NotebookInstanceLifecycleConfigs: Optional[
        NotebookInstanceLifecycleConfigSummaryList
    ] = None


class ListNotebookInstancesInput(BaseModel):
    AdditionalCodeRepositoryEquals: Optional[CodeRepositoryNameOrUrl] = None
    CreationTimeAfter: Optional[CreationTime] = None
    CreationTimeBefore: Optional[CreationTime] = None
    DefaultCodeRepositoryContains: Optional[CodeRepositoryContains] = None
    LastModifiedTimeAfter: Optional[LastModifiedTime] = None
    LastModifiedTimeBefore: Optional[LastModifiedTime] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[NotebookInstanceNameContains] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    NotebookInstanceLifecycleConfigNameContains: Optional[
        NotebookInstanceLifecycleConfigName
    ] = None
    SortBy: Optional[NotebookInstanceSortKey] = None
    SortOrder: Optional[NotebookInstanceSortOrder] = None
    StatusEquals: Optional[NotebookInstanceStatus] = None


class ListPipelineExecutionStepsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListPipelineExecutionsRequest(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PipelineName: PipelineNameOrArn
    SortBy: Optional[SortPipelineExecutionsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListPipelineParametersForExecutionRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PipelineExecutionArn_1: PipelineExecutionArn = Field(
        ..., alias='PipelineExecutionArn'
    )


class ListPipelinesRequest(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PipelineNamePrefix: Optional[PipelineName] = None
    SortBy: Optional[SortPipelinesBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListProcessingJobsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[String] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy_1: Optional[SortBy] = Field(None, alias='SortBy')
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[ProcessingJobStatus] = None


class ListProjectsInput(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[ProjectEntityName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ProjectSortBy] = None
    SortOrder: Optional[ProjectSortOrder] = None


class ListSpacesRequest(BaseModel):
    DomainIdEquals: Optional[DomainId] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SpaceSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    SpaceNameContains: Optional[SpaceName] = None


class ListStageDevicesRequest(BaseModel):
    EdgeDeploymentPlanName: EntityName
    ExcludeDevicesDeployedInOtherStage: Optional[Boolean] = None
    MaxResults: Optional[ListMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StageName: EntityName


class ListStudioLifecycleConfigsRequest(BaseModel):
    AppTypeEquals: Optional[StudioLifecycleConfigAppType] = None
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    ModifiedTimeAfter: Optional[Timestamp] = None
    ModifiedTimeBefore: Optional[Timestamp] = None
    NameContains: Optional[StudioLifecycleConfigName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[StudioLifecycleConfigSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListSubscribedWorkteamsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[WorkteamName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsInput(BaseModel):
    MaxResults: Optional[ListTagsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class ListTrainingJobsForHyperParameterTuningJobRequest(BaseModel):
    HyperParameterTuningJobName_1: HyperParameterTuningJobName = Field(
        ..., alias='HyperParameterTuningJobName'
    )
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[TrainingJobSortByOptions] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[TrainingJobStatus] = None


class ListTrainingJobsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy_1: Optional[SortBy] = Field(None, alias='SortBy')
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[TrainingJobStatus] = None
    WarmPoolStatusEquals: Optional[WarmPoolResourceStatus] = None


class ListTransformJobsRequest(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    LastModifiedTimeAfter: Optional[Timestamp] = None
    LastModifiedTimeBefore: Optional[Timestamp] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains_1: Optional[NameContains] = Field(None, alias='NameContains')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy_1: Optional[SortBy] = Field(None, alias='SortBy')
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    StatusEquals: Optional[TransformJobStatus] = None


class ListTrialComponentKey256(RootModel[List[TrialComponentKey256]]):
    root: List[TrialComponentKey256]


class ListTrialComponentsRequest(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    ExperimentName: Optional[ExperimentEntityName] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortTrialComponentsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    SourceArn: Optional[String256] = None
    TrialName: Optional[ExperimentEntityName] = None


class ListTrialsRequest(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    ExperimentName: Optional[ExperimentEntityName] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortTrialsBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    TrialComponentName: Optional[ExperimentEntityName] = None


class ListUserProfilesRequest(BaseModel):
    DomainIdEquals: Optional[DomainId] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[UserProfileSortKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')
    UserProfileNameContains: Optional[UserProfileName] = None


class ListWorkforcesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[WorkforceName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ListWorkforcesSortByOptions] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListWorkteamsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[WorkteamName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[ListWorkteamsSortByOptions] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class MemberDefinition(BaseModel):
    CognitoMemberDefinition_1: Optional[CognitoMemberDefinition] = Field(
        None, alias='CognitoMemberDefinition'
    )
    OidcMemberDefinition_1: Optional[OidcMemberDefinition] = Field(
        None, alias='OidcMemberDefinition'
    )


class MemberDefinitions(RootModel[List[MemberDefinition]]):
    root: List[MemberDefinition] = Field(..., max_length=10, min_length=1)


class MetadataProperties(BaseModel):
    CommitId: Optional[MetadataPropertyValue] = None
    GeneratedBy: Optional[MetadataPropertyValue] = None
    ProjectId: Optional[MetadataPropertyValue] = None
    Repository: Optional[MetadataPropertyValue] = None


class MetricData(BaseModel):
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')
    Value: Optional[Float] = None


class MetricDatum(BaseModel):
    MetricName: Optional[AutoMLMetricEnum] = None
    Set: Optional[MetricSetSource] = None
    StandardMetricName: Optional[AutoMLMetricExtendedEnum] = None
    Value: Optional[Float] = None


class MetricDefinition(BaseModel):
    Name: MetricName
    Regex: MetricRegex


class MetricDefinitionList(RootModel[List[MetricDefinition]]):
    root: List[MetricDefinition] = Field(..., max_length=40, min_length=0)


class MetricsSource(BaseModel):
    ContentDigest_1: Optional[ContentDigest] = Field(None, alias='ContentDigest')
    ContentType_1: ContentType = Field(..., alias='ContentType')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class ModelArtifacts(BaseModel):
    S3ModelArtifacts: S3Uri


class ModelCardExportArtifacts(BaseModel):
    S3ExportArtifacts: S3Uri


class ModelCardExportJobSummary(BaseModel):
    CreatedAt: Timestamp
    LastModifiedAt: Timestamp
    ModelCardExportJobArn_1: ModelCardExportJobArn = Field(
        ..., alias='ModelCardExportJobArn'
    )
    ModelCardExportJobName: EntityName
    ModelCardName: EntityName
    ModelCardVersion: Integer
    Status: ModelCardExportJobStatus


class ModelCardExportJobSummaryList(RootModel[List[ModelCardExportJobSummary]]):
    root: List[ModelCardExportJobSummary]


class ModelCardExportOutputConfig(BaseModel):
    S3OutputPath: S3Uri


class ModelCardSummary(BaseModel):
    CreationTime: Timestamp
    LastModifiedTime: Optional[Timestamp] = None
    ModelCardArn_1: ModelCardArn = Field(..., alias='ModelCardArn')
    ModelCardName: EntityName
    ModelCardStatus_1: ModelCardStatus = Field(..., alias='ModelCardStatus')


class ModelCardSummaryList(RootModel[List[ModelCardSummary]]):
    root: List[ModelCardSummary]


class ModelCardVersionSummary(BaseModel):
    CreationTime: Timestamp
    LastModifiedTime: Optional[Timestamp] = None
    ModelCardArn_1: ModelCardArn = Field(..., alias='ModelCardArn')
    ModelCardName: EntityName
    ModelCardStatus_1: ModelCardStatus = Field(..., alias='ModelCardStatus')
    ModelCardVersion: Integer


class ModelCardVersionSummaryList(RootModel[List[ModelCardVersionSummary]]):
    root: List[ModelCardVersionSummary]


class ModelConfiguration(BaseModel):
    CompilationJobName: Optional[RecommendationJobCompilationJobName] = None
    EnvironmentParameters_1: Optional[EnvironmentParameters] = Field(
        None, alias='EnvironmentParameters'
    )
    InferenceSpecificationName_1: Optional[InferenceSpecificationName] = Field(
        None, alias='InferenceSpecificationName'
    )


class ModelDashboardEndpoint(BaseModel):
    CreationTime: Timestamp
    EndpointArn_1: EndpointArn = Field(..., alias='EndpointArn')
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    EndpointStatus_1: EndpointStatus = Field(..., alias='EndpointStatus')
    LastModifiedTime: Timestamp


class ModelDashboardEndpoints(RootModel[List[ModelDashboardEndpoint]]):
    root: List[ModelDashboardEndpoint]


class ModelDataQuality(BaseModel):
    Constraints: Optional[MetricsSource] = None
    Statistics: Optional[MetricsSource] = None


class ModelLatencyThreshold(BaseModel):
    Percentile: Optional[String64] = None
    ValueInMilliseconds: Optional[Integer] = None


class ModelLatencyThresholds(RootModel[List[ModelLatencyThreshold]]):
    root: List[ModelLatencyThreshold] = Field(..., max_length=1, min_length=1)


class ModelMetadataFilter(BaseModel):
    Name: ModelMetadataFilterType
    Value: String256


class ModelMetadataFilters(RootModel[List[ModelMetadataFilter]]):
    root: List[ModelMetadataFilter] = Field(..., max_length=4, min_length=1)


class ModelMetadataSearchExpression(BaseModel):
    Filters: Optional[ModelMetadataFilters] = None


class ModelMetadataSummary(BaseModel):
    Domain: String
    Framework: String
    FrameworkVersion: String
    Model: String
    Task: String


class ModelPackageContainerDefinition(BaseModel):
    ContainerHostname_1: Optional[ContainerHostname] = Field(
        None, alias='ContainerHostname'
    )
    Environment: Optional[EnvironmentMap] = None
    Framework: Optional[String] = None
    FrameworkVersion: Optional[ModelPackageFrameworkVersion] = None
    Image: ContainerImage
    ImageDigest_1: Optional[ImageDigest] = Field(None, alias='ImageDigest')
    ModelDataUrl: Optional[Url] = None
    ModelInput_1: Optional[ModelInput] = Field(None, alias='ModelInput')
    NearestModelName: Optional[String] = None
    ProductId_1: Optional[ProductId] = Field(None, alias='ProductId')


class ModelPackageContainerDefinitionList(
    RootModel[List[ModelPackageContainerDefinition]]
):
    root: List[ModelPackageContainerDefinition] = Field(
        ..., max_length=15, min_length=1
    )


class ModelPackageStatusItem(BaseModel):
    FailureReason: Optional[String] = None
    Name: EntityName
    Status: DetailedModelPackageStatus


class ModelPackageStatusItemList(RootModel[List[ModelPackageStatusItem]]):
    root: List[ModelPackageStatusItem]


class ModelPackageSummary(BaseModel):
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    ModelApprovalStatus_1: Optional[ModelApprovalStatus] = Field(
        None, alias='ModelApprovalStatus'
    )
    ModelPackageArn_1: ModelPackageArn = Field(..., alias='ModelPackageArn')
    ModelPackageDescription: Optional[EntityDescription] = None
    ModelPackageGroupName: Optional[EntityName] = None
    ModelPackageName: EntityName
    ModelPackageStatus_1: ModelPackageStatus = Field(..., alias='ModelPackageStatus')
    ModelPackageVersion_1: Optional[ModelPackageVersion] = Field(
        None, alias='ModelPackageVersion'
    )


class ModelPackageSummaryList(RootModel[List[ModelPackageSummary]]):
    root: List[ModelPackageSummary]


class ModelQuality(BaseModel):
    Constraints: Optional[MetricsSource] = None
    Statistics: Optional[MetricsSource] = None


class ModelRegisterSettings(BaseModel):
    CrossAccountModelRegisterRoleArn: Optional[RoleArn] = None
    Status: Optional[FeatureStatus] = None


class ModelStepMetadata(BaseModel):
    Arn: Optional[String256] = None


class ModelSummary(BaseModel):
    CreationTime: Timestamp
    ModelArn_1: ModelArn = Field(..., alias='ModelArn')
    ModelName_1: ModelName = Field(..., alias='ModelName')


class ModelSummaryList(RootModel[List[ModelSummary]]):
    root: List[ModelSummary]


class MonitoringAlertHistorySummary(BaseModel):
    AlertStatus: MonitoringAlertStatus
    CreationTime: Timestamp
    MonitoringAlertName_1: MonitoringAlertName = Field(..., alias='MonitoringAlertName')
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )


class MonitoringAlertSummary(BaseModel):
    Actions: MonitoringAlertActions
    AlertStatus: MonitoringAlertStatus
    CreationTime: Timestamp
    DatapointsToAlert: MonitoringDatapointsToAlert
    EvaluationPeriod: MonitoringEvaluationPeriod
    LastModifiedTime: Timestamp
    MonitoringAlertName_1: MonitoringAlertName = Field(..., alias='MonitoringAlertName')


class MonitoringAlertSummaryList(RootModel[List[MonitoringAlertSummary]]):
    root: List[MonitoringAlertSummary] = Field(..., max_length=100, min_length=1)


class MonitoringAppSpecification(BaseModel):
    ContainerArguments: Optional[MonitoringContainerArguments] = None
    ContainerEntrypoint_1: Optional[ContainerEntrypoint] = Field(
        None, alias='ContainerEntrypoint'
    )
    ImageUri_1: ImageUri = Field(..., alias='ImageUri')
    PostAnalyticsProcessorSourceUri: Optional[S3Uri] = None
    RecordPreprocessorSourceUri: Optional[S3Uri] = None


class MonitoringClusterConfig(BaseModel):
    InstanceCount: ProcessingInstanceCount
    InstanceType: ProcessingInstanceType
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VolumeSizeInGB: ProcessingVolumeSizeInGB


class MonitoringConstraintsResource(BaseModel):
    S3Uri_1: Optional[S3Uri] = Field(None, alias='S3Uri')


class MonitoringDatasetFormat(BaseModel):
    Csv: Optional[MonitoringCsvDatasetFormat] = None
    Json: Optional[MonitoringJsonDatasetFormat] = None
    Parquet: Optional[MonitoringParquetDatasetFormat] = None


class MonitoringEnvironmentMap(
    RootModel[Optional[Dict[str, ProcessingEnvironmentValue]]]
):
    root: Optional[Dict[str, ProcessingEnvironmentValue]] = None


class MonitoringExecutionSummary(BaseModel):
    CreationTime: Timestamp
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedTime: Timestamp
    MonitoringExecutionStatus: ExecutionStatus
    MonitoringJobDefinitionName_1: Optional[MonitoringJobDefinitionName] = Field(
        None, alias='MonitoringJobDefinitionName'
    )
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )
    MonitoringType_1: Optional[MonitoringType] = Field(None, alias='MonitoringType')
    ProcessingJobArn_1: Optional[ProcessingJobArn] = Field(
        None, alias='ProcessingJobArn'
    )
    ScheduledTime: Timestamp


class MonitoringExecutionSummaryList(RootModel[List[MonitoringExecutionSummary]]):
    root: List[MonitoringExecutionSummary]


class MonitoringGroundTruthS3Input(BaseModel):
    S3Uri: Optional[MonitoringS3Uri] = None


class MonitoringJobDefinitionSummary(BaseModel):
    CreationTime: Timestamp
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    MonitoringJobDefinitionArn_1: MonitoringJobDefinitionArn = Field(
        ..., alias='MonitoringJobDefinitionArn'
    )
    MonitoringJobDefinitionName_1: MonitoringJobDefinitionName = Field(
        ..., alias='MonitoringJobDefinitionName'
    )


class MonitoringJobDefinitionSummaryList(
    RootModel[List[MonitoringJobDefinitionSummary]]
):
    root: List[MonitoringJobDefinitionSummary]


class MonitoringResources(BaseModel):
    ClusterConfig: MonitoringClusterConfig


class MonitoringS3Output(BaseModel):
    LocalPath: ProcessingLocalPath
    S3UploadMode: Optional[ProcessingS3UploadMode] = None
    S3Uri: MonitoringS3Uri


class MonitoringScheduleSummary(BaseModel):
    CreationTime: Timestamp
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    LastModifiedTime: Timestamp
    MonitoringJobDefinitionName_1: Optional[MonitoringJobDefinitionName] = Field(
        None, alias='MonitoringJobDefinitionName'
    )
    MonitoringScheduleArn_1: MonitoringScheduleArn = Field(
        ..., alias='MonitoringScheduleArn'
    )
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )
    MonitoringScheduleStatus: ScheduleStatus
    MonitoringType_1: Optional[MonitoringType] = Field(None, alias='MonitoringType')


class MonitoringScheduleSummaryList(RootModel[List[MonitoringScheduleSummary]]):
    root: List[MonitoringScheduleSummary]


class MonitoringStatisticsResource(BaseModel):
    S3Uri_1: Optional[S3Uri] = Field(None, alias='S3Uri')


class NeoVpcConfig(BaseModel):
    SecurityGroupIds: NeoVpcSecurityGroupIds
    Subnets: NeoVpcSubnets


class NestedFilters(BaseModel):
    Filters: FilterList
    NestedPropertyName: ResourcePropertyName


class NestedFiltersList(RootModel[List[NestedFilters]]):
    root: List[NestedFilters] = Field(..., max_length=20, min_length=1)


class NotebookInstanceLifecycleConfigList(
    RootModel[List[NotebookInstanceLifecycleHook]]
):
    root: List[NotebookInstanceLifecycleHook] = Field(..., max_length=1)


class NotebookInstanceSummary(BaseModel):
    AdditionalCodeRepositories: Optional[AdditionalCodeRepositoryNamesOrUrls] = None
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DefaultCodeRepository: Optional[CodeRepositoryNameOrUrl] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    NotebookInstanceArn_1: NotebookInstanceArn = Field(..., alias='NotebookInstanceArn')
    NotebookInstanceLifecycleConfigName_1: Optional[
        NotebookInstanceLifecycleConfigName
    ] = Field(None, alias='NotebookInstanceLifecycleConfigName')
    NotebookInstanceName_1: NotebookInstanceName = Field(
        ..., alias='NotebookInstanceName'
    )
    NotebookInstanceStatus_1: Optional[NotebookInstanceStatus] = Field(
        None, alias='NotebookInstanceStatus'
    )
    Url: Optional[NotebookInstanceUrl] = None


class NotebookInstanceSummaryList(RootModel[List[NotebookInstanceSummary]]):
    root: List[NotebookInstanceSummary]


class NotificationConfiguration(BaseModel):
    NotificationTopicArn_1: Optional[NotificationTopicArn] = Field(
        None, alias='NotificationTopicArn'
    )


class OfflineStoreStatus(BaseModel):
    BlockedReason_1: Optional[BlockedReason] = Field(None, alias='BlockedReason')
    Status: OfflineStoreStatusValue


class OidcConfig(BaseModel):
    AuthorizationEndpoint: OidcEndpoint
    ClientId_1: ClientId = Field(..., alias='ClientId')
    ClientSecret_1: ClientSecret = Field(..., alias='ClientSecret')
    Issuer: OidcEndpoint
    JwksUri: OidcEndpoint
    LogoutEndpoint: OidcEndpoint
    TokenEndpoint: OidcEndpoint
    UserInfoEndpoint: OidcEndpoint


class OidcConfigForResponse(BaseModel):
    AuthorizationEndpoint: Optional[OidcEndpoint] = None
    ClientId_1: Optional[ClientId] = Field(None, alias='ClientId')
    Issuer: Optional[OidcEndpoint] = None
    JwksUri: Optional[OidcEndpoint] = None
    LogoutEndpoint: Optional[OidcEndpoint] = None
    TokenEndpoint: Optional[OidcEndpoint] = None
    UserInfoEndpoint: Optional[OidcEndpoint] = None


class OnlineStoreConfig(BaseModel):
    EnableOnlineStore: Optional[Boolean] = None
    SecurityConfig: Optional[OnlineStoreSecurityConfig] = None


class OutputDataConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    S3OutputPath: S3Uri


class OutputParameter(BaseModel):
    Name: String256
    Value: String1024


class OutputParameterList(RootModel[List[OutputParameter]]):
    root: List[OutputParameter] = Field(..., max_length=50, min_length=0)


class Parameter(BaseModel):
    Name: PipelineParameterName
    Value: String1024


class ParameterList(RootModel[List[Parameter]]):
    root: List[Parameter] = Field(..., max_length=50, min_length=0)


class ParameterRange(BaseModel):
    CategoricalParameterRangeSpecification_1: Optional[
        CategoricalParameterRangeSpecification
    ] = Field(None, alias='CategoricalParameterRangeSpecification')
    ContinuousParameterRangeSpecification_1: Optional[
        ContinuousParameterRangeSpecification
    ] = Field(None, alias='ContinuousParameterRangeSpecification')
    IntegerParameterRangeSpecification_1: Optional[
        IntegerParameterRangeSpecification
    ] = Field(None, alias='IntegerParameterRangeSpecification')


class ParameterRanges(BaseModel):
    CategoricalParameterRanges_1: Optional[CategoricalParameterRanges] = Field(
        None, alias='CategoricalParameterRanges'
    )
    ContinuousParameterRanges_1: Optional[ContinuousParameterRanges] = Field(
        None, alias='ContinuousParameterRanges'
    )
    IntegerParameterRanges_1: Optional[IntegerParameterRanges] = Field(
        None, alias='IntegerParameterRanges'
    )


class Phase(BaseModel):
    DurationInSeconds: Optional[TrafficDurationInSeconds] = None
    InitialNumberOfUsers_1: Optional[InitialNumberOfUsers] = Field(
        None, alias='InitialNumberOfUsers'
    )
    SpawnRate_1: Optional[SpawnRate] = Field(None, alias='SpawnRate')


class Phases(RootModel[List[Phase]]):
    root: List[Phase] = Field(..., min_length=1)


class PipelineDefinitionS3Location(BaseModel):
    Bucket: BucketName
    ObjectKey: Key
    VersionId_1: Optional[VersionId] = Field(None, alias='VersionId')


class PipelineExecutionSummary(BaseModel):
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )
    PipelineExecutionDescription_1: Optional[PipelineExecutionDescription] = Field(
        None, alias='PipelineExecutionDescription'
    )
    PipelineExecutionDisplayName: Optional[PipelineExecutionName] = None
    PipelineExecutionFailureReason: Optional[String3072] = None
    PipelineExecutionStatus_1: Optional[PipelineExecutionStatus] = Field(
        None, alias='PipelineExecutionStatus'
    )
    StartTime: Optional[Timestamp] = None


class PipelineExecutionSummaryList(RootModel[List[PipelineExecutionSummary]]):
    root: List[PipelineExecutionSummary] = Field(..., max_length=100, min_length=0)


class PipelineSummary(BaseModel):
    CreationTime: Optional[Timestamp] = None
    LastExecutionTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None
    PipelineArn_1: Optional[PipelineArn] = Field(None, alias='PipelineArn')
    PipelineDescription_1: Optional[PipelineDescription] = Field(
        None, alias='PipelineDescription'
    )
    PipelineDisplayName: Optional[PipelineName] = None
    PipelineName_1: Optional[PipelineName] = Field(None, alias='PipelineName')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class PipelineSummaryList(RootModel[List[PipelineSummary]]):
    root: List[PipelineSummary] = Field(..., max_length=100, min_length=0)


class ProcessingClusterConfig(BaseModel):
    InstanceCount: ProcessingInstanceCount
    InstanceType: ProcessingInstanceType
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VolumeSizeInGB: ProcessingVolumeSizeInGB


class ProcessingEnvironmentMap(
    RootModel[Optional[Dict[str, ProcessingEnvironmentValue]]]
):
    root: Optional[Dict[str, ProcessingEnvironmentValue]] = None


class ProcessingJobSummary(BaseModel):
    CreationTime: Timestamp
    ExitMessage_1: Optional[ExitMessage] = Field(None, alias='ExitMessage')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedTime: Optional[Timestamp] = None
    ProcessingEndTime: Optional[Timestamp] = None
    ProcessingJobArn_1: ProcessingJobArn = Field(..., alias='ProcessingJobArn')
    ProcessingJobName_1: ProcessingJobName = Field(..., alias='ProcessingJobName')
    ProcessingJobStatus_1: ProcessingJobStatus = Field(..., alias='ProcessingJobStatus')


class ProcessingResources(BaseModel):
    ClusterConfig: ProcessingClusterConfig


class ProcessingS3Input(BaseModel):
    LocalPath: Optional[ProcessingLocalPath] = None
    S3CompressionType: Optional[ProcessingS3CompressionType] = None
    S3DataDistributionType: Optional[ProcessingS3DataDistributionType] = None
    S3DataType: ProcessingS3DataType
    S3InputMode: Optional[ProcessingS3InputMode] = None
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class ProcessingS3Output(BaseModel):
    LocalPath: ProcessingLocalPath
    S3UploadMode: ProcessingS3UploadMode
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class ProductListings(RootModel[List[String]]):
    root: List[String]


class ProductionVariantServerlessConfig(BaseModel):
    MaxConcurrency: ServerlessMaxConcurrency
    MemorySizeInMB: ServerlessMemorySizeInMB


class ProductionVariantStatus(BaseModel):
    StartTime: Optional[Timestamp] = None
    Status: VariantStatus
    StatusMessage: Optional[VariantStatusMessage] = None


class ProductionVariantStatusList(RootModel[List[ProductionVariantStatus]]):
    root: List[ProductionVariantStatus] = Field(..., max_length=5, min_length=0)


class ProductionVariantSummary(BaseModel):
    CurrentInstanceCount: Optional[TaskCount] = None
    CurrentServerlessConfig: Optional[ProductionVariantServerlessConfig] = None
    CurrentWeight: Optional[VariantWeight] = None
    DeployedImages_1: Optional[DeployedImages] = Field(None, alias='DeployedImages')
    DesiredInstanceCount: Optional[TaskCount] = None
    DesiredServerlessConfig: Optional[ProductionVariantServerlessConfig] = None
    DesiredWeight: Optional[VariantWeight] = None
    VariantName_1: VariantName = Field(..., alias='VariantName')
    VariantStatus: Optional[ProductionVariantStatusList] = None


class ProductionVariantSummaryList(RootModel[List[ProductionVariantSummary]]):
    root: List[ProductionVariantSummary] = Field(..., min_length=1)


class ProfilerConfig(BaseModel):
    DisableProfiler_1: Optional[DisableProfiler] = Field(None, alias='DisableProfiler')
    ProfilingIntervalInMilliseconds_1: Optional[ProfilingIntervalInMilliseconds] = (
        Field(None, alias='ProfilingIntervalInMilliseconds')
    )
    ProfilingParameters_1: Optional[ProfilingParameters] = Field(
        None, alias='ProfilingParameters'
    )
    S3OutputPath: Optional[S3Uri] = None


class ProfilerConfigForUpdate(BaseModel):
    DisableProfiler_1: Optional[DisableProfiler] = Field(None, alias='DisableProfiler')
    ProfilingIntervalInMilliseconds_1: Optional[ProfilingIntervalInMilliseconds] = (
        Field(None, alias='ProfilingIntervalInMilliseconds')
    )
    ProfilingParameters_1: Optional[ProfilingParameters] = Field(
        None, alias='ProfilingParameters'
    )
    S3OutputPath: Optional[S3Uri] = None


class ProfilerRuleConfiguration(BaseModel):
    InstanceType: Optional[ProcessingInstanceType] = None
    LocalPath: Optional[DirectoryPath] = None
    RuleConfigurationName_1: RuleConfigurationName = Field(
        ..., alias='RuleConfigurationName'
    )
    RuleEvaluatorImage: AlgorithmImage
    RuleParameters_1: Optional[RuleParameters] = Field(None, alias='RuleParameters')
    S3OutputPath: Optional[S3Uri] = None
    VolumeSizeInGB: Optional[OptionalVolumeSizeInGB] = None


class ProfilerRuleConfigurations(RootModel[List[ProfilerRuleConfiguration]]):
    root: List[ProfilerRuleConfiguration] = Field(..., max_length=20, min_length=0)


class ProfilerRuleEvaluationStatus(BaseModel):
    LastModifiedTime: Optional[Timestamp] = None
    RuleConfigurationName_1: Optional[RuleConfigurationName] = Field(
        None, alias='RuleConfigurationName'
    )
    RuleEvaluationJobArn: Optional[ProcessingJobArn] = None
    RuleEvaluationStatus_1: Optional[RuleEvaluationStatus] = Field(
        None, alias='RuleEvaluationStatus'
    )
    StatusDetails_1: Optional[StatusDetails] = Field(None, alias='StatusDetails')


class ProfilerRuleEvaluationStatuses(RootModel[List[ProfilerRuleEvaluationStatus]]):
    root: List[ProfilerRuleEvaluationStatus] = Field(..., max_length=20, min_length=0)


class ProjectSummary(BaseModel):
    CreationTime: Timestamp
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')
    ProjectDescription: Optional[EntityDescription] = None
    ProjectId_1: ProjectId = Field(..., alias='ProjectId')
    ProjectName: ProjectEntityName
    ProjectStatus_1: ProjectStatus = Field(..., alias='ProjectStatus')


class ProjectSummaryList(RootModel[List[ProjectSummary]]):
    root: List[ProjectSummary]


class PropertyNameSuggestion(BaseModel):
    PropertyName: Optional[ResourcePropertyName] = None


class PropertyNameSuggestionList(RootModel[List[PropertyNameSuggestion]]):
    root: List[PropertyNameSuggestion]


class ProvisioningParameter(BaseModel):
    Key: Optional[ProvisioningParameterKey] = None
    Value: Optional[ProvisioningParameterValue] = None


class ProvisioningParameters(RootModel[List[ProvisioningParameter]]):
    root: List[ProvisioningParameter]


class PublicWorkforceTaskPrice(BaseModel):
    AmountInUsd: Optional[USD] = None


class QualityCheckStepMetadata(BaseModel):
    BaselineUsedForDriftCheckConstraints: Optional[String1024] = None
    BaselineUsedForDriftCheckStatistics: Optional[String1024] = None
    CalculatedBaselineConstraints: Optional[String1024] = None
    CalculatedBaselineStatistics: Optional[String1024] = None
    CheckJobArn: Optional[String256] = None
    CheckType: Optional[String256] = None
    ModelPackageGroupName: Optional[String256] = None
    RegisterNewBaseline: Optional[Boolean] = None
    SkipCheck: Optional[Boolean] = None
    ViolationReport: Optional[String1024] = None


class QueryLineageResponse(BaseModel):
    Edges_1: Optional[Edges] = Field(None, alias='Edges')
    NextToken: Optional[String8192] = None
    Vertices_1: Optional[Vertices] = Field(None, alias='Vertices')


class QueryProperties(RootModel[Optional[Dict[str, String256]]]):
    root: Optional[Dict[str, String256]] = None


class QueryTypes(RootModel[List[String40]]):
    root: List[String40] = Field(..., max_length=5)


class RStudioServerProAppSettings(BaseModel):
    AccessStatus: Optional[RStudioServerProAccessStatus] = None
    UserGroup: Optional[RStudioServerProUserGroup] = None


class RealTimeInferenceConfig(BaseModel):
    InstanceCount: TaskCount
    InstanceType_1: InstanceType = Field(..., alias='InstanceType')


class RecommendationJobCompiledOutputConfig(BaseModel):
    S3OutputUri: Optional[S3Uri] = None


class RecommendationJobOutputConfig(BaseModel):
    CompiledOutputConfig: Optional[RecommendationJobCompiledOutputConfig] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')


class RecommendationJobStoppingConditions(BaseModel):
    MaxInvocations: Optional[Integer] = None
    ModelLatencyThresholds_1: Optional[ModelLatencyThresholds] = Field(
        None, alias='ModelLatencyThresholds'
    )


class RecommendationJobSupportedContentTypes(RootModel[List[String]]):
    root: List[String]


class RecommendationJobSupportedInstanceTypes(RootModel[List[String]]):
    root: List[String]


class RecommendationJobVpcConfig(BaseModel):
    SecurityGroupIds: RecommendationJobVpcSecurityGroupIds
    Subnets: RecommendationJobVpcSubnets


class RecommendationMetrics(BaseModel):
    CostPerHour: Float
    CostPerInference: Float
    CpuUtilization: Optional[UtilizationMetric] = None
    MaxInvocations: Integer
    MemoryUtilization: Optional[UtilizationMetric] = None
    ModelLatency: Integer


class RedshiftDatasetDefinition(BaseModel):
    ClusterId: RedshiftClusterId
    ClusterRoleArn: RoleArn
    Database: RedshiftDatabase
    DbUser: RedshiftUserName
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    OutputCompression: Optional[RedshiftResultCompressionType] = None
    OutputFormat: RedshiftResultFormat
    OutputS3Uri: S3Uri
    QueryString: RedshiftQueryString


class RegisterModelStepMetadata(BaseModel):
    Arn: Optional[String256] = None


class RenderableTask(BaseModel):
    Input: TaskInput


class RenderingError(BaseModel):
    Code: String
    Message: String


class RenderingErrorList(RootModel[List[RenderingError]]):
    root: List[RenderingError]


class RepositoryAuthConfig(BaseModel):
    RepositoryCredentialsProviderArn_1: RepositoryCredentialsProviderArn = Field(
        ..., alias='RepositoryCredentialsProviderArn'
    )


class ResolvedAttributes(BaseModel):
    AutoMLJobObjective_1: Optional[AutoMLJobObjective] = Field(
        None, alias='AutoMLJobObjective'
    )
    CompletionCriteria: Optional[AutoMLJobCompletionCriteria] = None
    ProblemType_1: Optional[ProblemType] = Field(None, alias='ProblemType')


class ResourceConfig(BaseModel):
    InstanceCount: Optional[TrainingInstanceCount] = None
    InstanceGroups_1: Optional[InstanceGroups] = Field(None, alias='InstanceGroups')
    InstanceType: Optional[TrainingInstanceType] = None
    KeepAlivePeriodInSeconds_1: Optional[KeepAlivePeriodInSeconds] = Field(
        None, alias='KeepAlivePeriodInSeconds'
    )
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VolumeSizeInGB_1: VolumeSizeInGB = Field(..., alias='VolumeSizeInGB')


class ResourceSpec(BaseModel):
    InstanceType: Optional[AppInstanceType] = None
    LifecycleConfigArn: Optional[StudioLifecycleConfigArn] = None
    SageMakerImageArn: Optional[ImageArn] = None
    SageMakerImageVersionArn: Optional[ImageVersionArn] = None


class RetentionPolicy(BaseModel):
    HomeEfsFileSystem: Optional[RetentionType] = None


class S3DataSource(BaseModel):
    AttributeNames_1: Optional[AttributeNames] = Field(None, alias='AttributeNames')
    InstanceGroupNames_1: Optional[InstanceGroupNames] = Field(
        None, alias='InstanceGroupNames'
    )
    S3DataDistributionType: Optional[S3DataDistribution] = None
    S3DataType_1: S3DataType = Field(..., alias='S3DataType')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class S3StorageConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    ResolvedOutputS3Uri: Optional[S3Uri] = None
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class ScheduleConfig(BaseModel):
    ScheduleExpression_1: ScheduleExpression = Field(..., alias='ScheduleExpression')


class SecondaryStatusTransition(BaseModel):
    EndTime: Optional[Timestamp] = None
    StartTime: Timestamp
    Status: SecondaryStatus
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')


class SecondaryStatusTransitions(RootModel[List[SecondaryStatusTransition]]):
    root: List[SecondaryStatusTransition]


class SendPipelineExecutionStepFailureRequest(BaseModel):
    CallbackToken_1: CallbackToken = Field(..., alias='CallbackToken')
    ClientRequestToken: Optional[IdempotencyToken] = None
    FailureReason: Optional[String256] = None


class SendPipelineExecutionStepSuccessRequest(BaseModel):
    CallbackToken_1: CallbackToken = Field(..., alias='CallbackToken')
    ClientRequestToken: Optional[IdempotencyToken] = None
    OutputParameters: Optional[OutputParameterList] = None


class ServiceCatalogProvisioningDetails(BaseModel):
    PathId: Optional[ServiceCatalogEntityId] = None
    ProductId: ServiceCatalogEntityId
    ProvisioningArtifactId: Optional[ServiceCatalogEntityId] = None
    ProvisioningParameters_1: Optional[ProvisioningParameters] = Field(
        None, alias='ProvisioningParameters'
    )


class ServiceCatalogProvisioningUpdateDetails(BaseModel):
    ProvisioningArtifactId: Optional[ServiceCatalogEntityId] = None
    ProvisioningParameters_1: Optional[ProvisioningParameters] = Field(
        None, alias='ProvisioningParameters'
    )


class ShadowModeConfig(BaseModel):
    ShadowModelVariants: ShadowModelVariantConfigList
    SourceModelVariantName: ModelVariantName


class SourceAlgorithm(BaseModel):
    AlgorithmName: ArnOrName
    ModelDataUrl: Optional[Url] = None


class SourceAlgorithmList(RootModel[List[SourceAlgorithm]]):
    root: List[SourceAlgorithm] = Field(..., max_length=1, min_length=1)


class SourceAlgorithmSpecification(BaseModel):
    SourceAlgorithms: SourceAlgorithmList


class SpaceDetails(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DomainId_1: Optional[DomainId] = Field(None, alias='DomainId')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    SpaceName_1: Optional[SpaceName] = Field(None, alias='SpaceName')
    Status: Optional[SpaceStatus] = None


class SpaceList(RootModel[List[SpaceDetails]]):
    root: List[SpaceDetails]


class StartPipelineExecutionRequest(BaseModel):
    ClientRequestToken: IdempotencyToken
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )
    PipelineExecutionDescription_1: Optional[PipelineExecutionDescription] = Field(
        None, alias='PipelineExecutionDescription'
    )
    PipelineExecutionDisplayName: Optional[PipelineExecutionName] = None
    PipelineName: PipelineNameOrArn
    PipelineParameters: Optional[ParameterList] = None


class StopTrainingJobRequest(BaseModel):
    TrainingJobName_1: TrainingJobName = Field(..., alias='TrainingJobName')


class StopTransformJobRequest(BaseModel):
    TransformJobName_1: TransformJobName = Field(..., alias='TransformJobName')


class StudioLifecycleConfigDetails(BaseModel):
    CreationTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None
    StudioLifecycleConfigAppType_1: Optional[StudioLifecycleConfigAppType] = Field(
        None, alias='StudioLifecycleConfigAppType'
    )
    StudioLifecycleConfigArn_1: Optional[StudioLifecycleConfigArn] = Field(
        None, alias='StudioLifecycleConfigArn'
    )
    StudioLifecycleConfigName_1: Optional[StudioLifecycleConfigName] = Field(
        None, alias='StudioLifecycleConfigName'
    )


class StudioLifecycleConfigsList(RootModel[List[StudioLifecycleConfigDetails]]):
    root: List[StudioLifecycleConfigDetails]


class SubscribedWorkteam(BaseModel):
    ListingId: Optional[String] = None
    MarketplaceDescription: Optional[String200] = None
    MarketplaceTitle: Optional[String200] = None
    SellerName: Optional[String] = None
    WorkteamArn_1: WorkteamArn = Field(..., alias='WorkteamArn')


class SubscribedWorkteams(RootModel[List[SubscribedWorkteam]]):
    root: List[SubscribedWorkteam]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=0)


class TargetPlatform(BaseModel):
    Accelerator: Optional[TargetPlatformAccelerator] = None
    Arch: TargetPlatformArch
    Os: TargetPlatformOs


class TensorBoardAppSettings(BaseModel):
    DefaultResourceSpec: Optional[ResourceSpec] = None


class TextClassificationJobConfig(BaseModel):
    CompletionCriteria: Optional[AutoMLJobCompletionCriteria] = None
    ContentColumn_1: Optional[ContentColumn] = Field(None, alias='ContentColumn')
    TargetLabelColumn_1: Optional[TargetLabelColumn] = Field(
        None, alias='TargetLabelColumn'
    )


class TrafficPattern(BaseModel):
    Phases_1: Optional[Phases] = Field(None, alias='Phases')
    TrafficType_1: Optional[TrafficType] = Field(None, alias='TrafficType')


class TrafficRoutingConfig(BaseModel):
    CanarySize: Optional[CapacitySize] = None
    LinearStepSize: Optional[CapacitySize] = None
    Type: TrafficRoutingConfigType
    WaitIntervalInSeconds_1: WaitIntervalInSeconds = Field(
        ..., alias='WaitIntervalInSeconds'
    )


class TrainingContainerEntrypoint(RootModel[List[TrainingContainerEntrypointString]]):
    root: List[TrainingContainerEntrypointString] = Field(
        ..., max_length=10, min_length=1
    )


class TrainingEnvironmentMap(RootModel[Optional[Dict[str, TrainingEnvironmentValue]]]):
    root: Optional[Dict[str, TrainingEnvironmentValue]] = None


class TrainingJobSummary(BaseModel):
    CreationTime: Timestamp
    LastModifiedTime: Optional[Timestamp] = None
    TrainingEndTime: Optional[Timestamp] = None
    TrainingJobArn_1: TrainingJobArn = Field(..., alias='TrainingJobArn')
    TrainingJobName_1: TrainingJobName = Field(..., alias='TrainingJobName')
    TrainingJobStatus_1: TrainingJobStatus = Field(..., alias='TrainingJobStatus')
    WarmPoolStatus_1: Optional[WarmPoolStatus] = Field(None, alias='WarmPoolStatus')


class TrainingRepositoryAuthConfig(BaseModel):
    TrainingRepositoryCredentialsProviderArn_1: (
        TrainingRepositoryCredentialsProviderArn
    ) = Field(..., alias='TrainingRepositoryCredentialsProviderArn')


class TransformDataSource(BaseModel):
    S3DataSource: TransformS3DataSource


class TransformEnvironmentMap(
    RootModel[Optional[Dict[str, TransformEnvironmentValue]]]
):
    root: Optional[Dict[str, TransformEnvironmentValue]] = None


class TransformInput(BaseModel):
    CompressionType_1: Optional[CompressionType] = Field(None, alias='CompressionType')
    ContentType_1: Optional[ContentType] = Field(None, alias='ContentType')
    DataSource: TransformDataSource
    SplitType_1: Optional[SplitType] = Field(None, alias='SplitType')


class TransformJob(BaseModel):
    AutoMLJobArn_1: Optional[AutoMLJobArn] = Field(None, alias='AutoMLJobArn')
    BatchStrategy_1: Optional[BatchStrategy] = Field(None, alias='BatchStrategy')
    CreationTime: Optional[Timestamp] = None
    DataProcessing_1: Optional[DataProcessing] = Field(None, alias='DataProcessing')
    Environment: Optional[TransformEnvironmentMap] = None
    ExperimentConfig_1: Optional[ExperimentConfig] = Field(
        None, alias='ExperimentConfig'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LabelingJobArn_1: Optional[LabelingJobArn] = Field(None, alias='LabelingJobArn')
    MaxConcurrentTransforms_1: Optional[MaxConcurrentTransforms] = Field(
        None, alias='MaxConcurrentTransforms'
    )
    MaxPayloadInMB_1: Optional[MaxPayloadInMB] = Field(None, alias='MaxPayloadInMB')
    ModelClientConfig_1: Optional[ModelClientConfig] = Field(
        None, alias='ModelClientConfig'
    )
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    Tags: Optional[TagList] = None
    TransformEndTime: Optional[Timestamp] = None
    TransformInput_1: Optional[TransformInput] = Field(None, alias='TransformInput')
    TransformJobArn_1: Optional[TransformJobArn] = Field(None, alias='TransformJobArn')
    TransformJobName_1: Optional[TransformJobName] = Field(
        None, alias='TransformJobName'
    )
    TransformJobStatus_1: Optional[TransformJobStatus] = Field(
        None, alias='TransformJobStatus'
    )
    TransformOutput_1: Optional[TransformOutput] = Field(None, alias='TransformOutput')
    TransformResources_1: Optional[TransformResources] = Field(
        None, alias='TransformResources'
    )
    TransformStartTime: Optional[Timestamp] = None


class TransformJobDefinition(BaseModel):
    BatchStrategy_1: Optional[BatchStrategy] = Field(None, alias='BatchStrategy')
    Environment: Optional[TransformEnvironmentMap] = None
    MaxConcurrentTransforms_1: Optional[MaxConcurrentTransforms] = Field(
        None, alias='MaxConcurrentTransforms'
    )
    MaxPayloadInMB_1: Optional[MaxPayloadInMB] = Field(None, alias='MaxPayloadInMB')
    TransformInput_1: TransformInput = Field(..., alias='TransformInput')
    TransformOutput_1: TransformOutput = Field(..., alias='TransformOutput')
    TransformResources_1: TransformResources = Field(..., alias='TransformResources')


class TransformJobSummaries(RootModel[List[TransformJobSummary]]):
    root: List[TransformJobSummary]


class TrialComponentArtifact(BaseModel):
    MediaType_1: Optional[MediaType] = Field(None, alias='MediaType')
    Value: TrialComponentArtifactValue


class TrialComponentArtifacts(RootModel[Optional[Dict[str, TrialComponentArtifact]]]):
    root: Optional[Dict[str, TrialComponentArtifact]] = None


class TrialComponentMetricSummary(BaseModel):
    Avg: Optional[OptionalDouble] = None
    Count: Optional[OptionalInteger] = None
    Last: Optional[OptionalDouble] = None
    Max: Optional[OptionalDouble] = None
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Min: Optional[OptionalDouble] = None
    SourceArn: Optional[TrialComponentSourceArn] = None
    StdDev: Optional[OptionalDouble] = None
    TimeStamp: Optional[Timestamp] = None


class TrialComponentSource(BaseModel):
    SourceArn: TrialComponentSourceArn
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')


class TrialComponentSources(RootModel[List[TrialComponentSource]]):
    root: List[TrialComponentSource]


class TrialComponentStatus(BaseModel):
    Message: Optional[TrialComponentStatusMessage] = None
    PrimaryStatus: Optional[TrialComponentPrimaryStatus] = None


class TrialSource(BaseModel):
    SourceArn: TrialSourceArn
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')


class TrialSummary(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DisplayName: Optional[ExperimentEntityName] = None
    LastModifiedTime: Optional[Timestamp] = None
    TrialArn_1: Optional[TrialArn] = Field(None, alias='TrialArn')
    TrialName: Optional[ExperimentEntityName] = None
    TrialSource_1: Optional[TrialSource] = Field(None, alias='TrialSource')


class TuningJobCompletionCriteria(BaseModel):
    BestObjectiveNotImproving_1: Optional[BestObjectiveNotImproving] = Field(
        None, alias='BestObjectiveNotImproving'
    )
    ConvergenceDetected_1: Optional[ConvergenceDetected] = Field(
        None, alias='ConvergenceDetected'
    )
    TargetObjectiveMetricValue_1: Optional[TargetObjectiveMetricValue] = Field(
        None, alias='TargetObjectiveMetricValue'
    )


class UpdateActionRequest(BaseModel):
    ActionName: ExperimentEntityName
    Description: Optional[ExperimentDescription] = None
    Properties: Optional[LineageEntityParameters] = None
    PropertiesToRemove: Optional[ListLineageEntityParameterKey] = None
    Status: Optional[ActionStatus] = None


class UpdateAppImageConfigRequest(BaseModel):
    AppImageConfigName_1: AppImageConfigName = Field(..., alias='AppImageConfigName')
    KernelGatewayImageConfig_1: Optional[KernelGatewayImageConfig] = Field(
        None, alias='KernelGatewayImageConfig'
    )


class UpdateArtifactRequest(BaseModel):
    ArtifactArn_1: ArtifactArn = Field(..., alias='ArtifactArn')
    ArtifactName: Optional[ExperimentEntityName] = None
    Properties: Optional[LineageEntityParameters] = None
    PropertiesToRemove: Optional[ListLineageEntityParameterKey] = None


class UpdateCodeRepositoryInput(BaseModel):
    CodeRepositoryName: EntityName
    GitConfig: Optional[GitConfigForUpdate] = None


class UpdateContextRequest(BaseModel):
    ContextName: ExperimentEntityName
    Description: Optional[ExperimentDescription] = None
    Properties: Optional[LineageEntityParameters] = None
    PropertiesToRemove: Optional[ListLineageEntityParameterKey] = None


class UpdateDeviceFleetRequest(BaseModel):
    Description: Optional[DeviceFleetDescription] = None
    DeviceFleetName: EntityName
    EnableIotRoleAlias_1: Optional[EnableIotRoleAlias] = Field(
        None, alias='EnableIotRoleAlias'
    )
    OutputConfig: EdgeOutputConfig
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class UpdateDevicesRequest(BaseModel):
    DeviceFleetName: EntityName
    Devices_1: Devices = Field(..., alias='Devices')


class UpdateEndpointWeightsAndCapacitiesInput(BaseModel):
    DesiredWeightsAndCapacities: DesiredWeightAndCapacityList
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')


class UpdateFeatureMetadataRequest(BaseModel):
    Description: Optional[FeatureDescription] = None
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')
    FeatureName_1: FeatureName = Field(..., alias='FeatureName')
    ParameterAdditions: Optional[FeatureParameterAdditions] = None
    ParameterRemovals: Optional[FeatureParameterRemovals] = None


class UpdateImageVersionRequest(BaseModel):
    Alias: Optional[SageMakerImageVersionAlias] = None
    AliasesToAdd: Optional[SageMakerImageVersionAliases] = None
    AliasesToDelete: Optional[SageMakerImageVersionAliases] = None
    Horovod_1: Optional[Horovod] = Field(None, alias='Horovod')
    ImageName_1: ImageName = Field(..., alias='ImageName')
    JobType_1: Optional[JobType] = Field(None, alias='JobType')
    MLFramework_1: Optional[MLFramework] = Field(None, alias='MLFramework')
    Processor_1: Optional[Processor] = Field(None, alias='Processor')
    ProgrammingLang_1: Optional[ProgrammingLang] = Field(None, alias='ProgrammingLang')
    ReleaseNotes_1: Optional[ReleaseNotes] = Field(None, alias='ReleaseNotes')
    VendorGuidance_1: Optional[VendorGuidance] = Field(None, alias='VendorGuidance')
    Version: Optional[ImageVersionNumber] = None


class UpdateNotebookInstanceInput(BaseModel):
    AcceleratorTypes: Optional[NotebookInstanceAcceleratorTypes] = None
    AdditionalCodeRepositories: Optional[AdditionalCodeRepositoryNamesOrUrls] = None
    DefaultCodeRepository: Optional[CodeRepositoryNameOrUrl] = None
    DisassociateAcceleratorTypes: Optional[
        DisassociateNotebookInstanceAcceleratorTypes
    ] = None
    DisassociateAdditionalCodeRepositories_1: Optional[
        DisassociateAdditionalCodeRepositories
    ] = Field(None, alias='DisassociateAdditionalCodeRepositories')
    DisassociateDefaultCodeRepository_1: Optional[DisassociateDefaultCodeRepository] = (
        Field(None, alias='DisassociateDefaultCodeRepository')
    )
    DisassociateLifecycleConfig: Optional[
        DisassociateNotebookInstanceLifecycleConfig
    ] = None
    InstanceMetadataServiceConfiguration_1: Optional[
        InstanceMetadataServiceConfiguration
    ] = Field(None, alias='InstanceMetadataServiceConfiguration')
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    LifecycleConfigName: Optional[NotebookInstanceLifecycleConfigName] = None
    NotebookInstanceName_1: NotebookInstanceName = Field(
        ..., alias='NotebookInstanceName'
    )
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    RootAccess_1: Optional[RootAccess] = Field(None, alias='RootAccess')
    VolumeSizeInGB: Optional[NotebookInstanceVolumeSizeInGB] = None


class UpdateNotebookInstanceLifecycleConfigInput(BaseModel):
    NotebookInstanceLifecycleConfigName_1: NotebookInstanceLifecycleConfigName = Field(
        ..., alias='NotebookInstanceLifecycleConfigName'
    )
    OnCreate: Optional[NotebookInstanceLifecycleConfigList] = None
    OnStart: Optional[NotebookInstanceLifecycleConfigList] = None


class UpdatePipelineRequest(BaseModel):
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )
    PipelineDefinition_1: Optional[PipelineDefinition] = Field(
        None, alias='PipelineDefinition'
    )
    PipelineDefinitionS3Location_1: Optional[PipelineDefinitionS3Location] = Field(
        None, alias='PipelineDefinitionS3Location'
    )
    PipelineDescription_1: Optional[PipelineDescription] = Field(
        None, alias='PipelineDescription'
    )
    PipelineDisplayName: Optional[PipelineName] = None
    PipelineName_1: PipelineName = Field(..., alias='PipelineName')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class UpdateProjectInput(BaseModel):
    ProjectDescription: Optional[EntityDescription] = None
    ProjectName: ProjectEntityName
    ServiceCatalogProvisioningUpdateDetails_1: Optional[
        ServiceCatalogProvisioningUpdateDetails
    ] = Field(None, alias='ServiceCatalogProvisioningUpdateDetails')
    Tags: Optional[TagList] = None


class UpdateTrainingJobRequest(BaseModel):
    ProfilerConfig: Optional[ProfilerConfigForUpdate] = None
    ProfilerRuleConfigurations_1: Optional[ProfilerRuleConfigurations] = Field(
        None, alias='ProfilerRuleConfigurations'
    )
    ResourceConfig: Optional[ResourceConfigForUpdate] = None
    TrainingJobName_1: TrainingJobName = Field(..., alias='TrainingJobName')


class UpdateTrialComponentRequest(BaseModel):
    DisplayName: Optional[ExperimentEntityName] = None
    EndTime: Optional[Timestamp] = None
    InputArtifacts: Optional[TrialComponentArtifacts] = None
    InputArtifactsToRemove: Optional[ListTrialComponentKey256] = None
    OutputArtifacts: Optional[TrialComponentArtifacts] = None
    OutputArtifactsToRemove: Optional[ListTrialComponentKey256] = None
    Parameters: Optional[TrialComponentParameters] = None
    ParametersToRemove: Optional[ListTrialComponentKey256] = None
    StartTime: Optional[Timestamp] = None
    Status: Optional[TrialComponentStatus] = None
    TrialComponentName: ExperimentEntityName


class UpdateUserProfileResponse(BaseModel):
    UserProfileArn_1: Optional[UserProfileArn] = Field(None, alias='UserProfileArn')


class UpdateWorkteamRequest(BaseModel):
    Description: Optional[String200] = None
    MemberDefinitions_1: Optional[MemberDefinitions] = Field(
        None, alias='MemberDefinitions'
    )
    NotificationConfiguration_1: Optional[NotificationConfiguration] = Field(
        None, alias='NotificationConfiguration'
    )
    WorkteamName_1: WorkteamName = Field(..., alias='WorkteamName')


class UserContext(BaseModel):
    DomainId: Optional[String] = None
    IamIdentity_1: Optional[IamIdentity] = Field(None, alias='IamIdentity')
    UserProfileArn: Optional[String] = None
    UserProfileName: Optional[String] = None


class UserProfileDetails(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DomainId_1: Optional[DomainId] = Field(None, alias='DomainId')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    Status: Optional[UserProfileStatus] = None
    UserProfileName_1: Optional[UserProfileName] = Field(None, alias='UserProfileName')


class UserProfileList(RootModel[List[UserProfileDetails]]):
    root: List[UserProfileDetails]


class VariantProperty(BaseModel):
    VariantPropertyType_1: VariantPropertyType = Field(..., alias='VariantPropertyType')


class VariantPropertyList(RootModel[List[VariantProperty]]):
    root: List[VariantProperty] = Field(..., max_length=3, min_length=0)


class VpcConfig(BaseModel):
    SecurityGroupIds: VpcSecurityGroupIds
    Subnets_1: Subnets = Field(..., alias='Subnets')


class WorkforceVpcConfigRequest(BaseModel):
    SecurityGroupIds: Optional[WorkforceSecurityGroupIds] = None
    Subnets: Optional[WorkforceSubnets] = None
    VpcId: Optional[WorkforceVpcId] = None


class WorkforceVpcConfigResponse(BaseModel):
    SecurityGroupIds: WorkforceSecurityGroupIds
    Subnets: WorkforceSubnets
    VpcEndpointId: Optional[WorkforceVpcEndpointId] = None
    VpcId: WorkforceVpcId


class Workteam(BaseModel):
    CreateDate: Optional[Timestamp] = None
    Description: String200
    LastUpdatedDate: Optional[Timestamp] = None
    MemberDefinitions_1: MemberDefinitions = Field(..., alias='MemberDefinitions')
    NotificationConfiguration_1: Optional[NotificationConfiguration] = Field(
        None, alias='NotificationConfiguration'
    )
    ProductListingIds: Optional[ProductListings] = None
    SubDomain: Optional[String] = None
    WorkforceArn_1: Optional[WorkforceArn] = Field(None, alias='WorkforceArn')
    WorkteamArn_1: WorkteamArn = Field(..., alias='WorkteamArn')
    WorkteamName_1: WorkteamName = Field(..., alias='WorkteamName')


class Workteams(RootModel[List[Workteam]]):
    root: List[Workteam]


class ActionSummaries(RootModel[List[ActionSummary]]):
    root: List[ActionSummary]


class AddTagsInput(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    Tags: TagList


class AddTagsOutput(BaseModel):
    Tags: Optional[TagList] = None


class AdditionalInferenceSpecificationDefinition(BaseModel):
    Containers: ModelPackageContainerDefinitionList
    Description: Optional[EntityDescription] = None
    Name: EntityName
    SupportedContentTypes: Optional[ContentTypes] = None
    SupportedRealtimeInferenceInstanceTypes: Optional[
        RealtimeInferenceInstanceTypes
    ] = None
    SupportedResponseMIMETypes: Optional[ResponseMIMETypes] = None
    SupportedTransformInstanceTypes: Optional[TransformInstanceTypes] = None


class AdditionalInferenceSpecifications(
    RootModel[List[AdditionalInferenceSpecificationDefinition]]
):
    root: List[AdditionalInferenceSpecificationDefinition] = Field(
        ..., max_length=15, min_length=1
    )


class AlgorithmStatusDetails(BaseModel):
    ImageScanStatuses: Optional[AlgorithmStatusItemList] = None
    ValidationStatuses: Optional[AlgorithmStatusItemList] = None


class AppImageConfigDetails(BaseModel):
    AppImageConfigArn_1: Optional[AppImageConfigArn] = Field(
        None, alias='AppImageConfigArn'
    )
    AppImageConfigName_1: Optional[AppImageConfigName] = Field(
        None, alias='AppImageConfigName'
    )
    CreationTime: Optional[Timestamp] = None
    KernelGatewayImageConfig_1: Optional[KernelGatewayImageConfig] = Field(
        None, alias='KernelGatewayImageConfig'
    )
    LastModifiedTime: Optional[Timestamp] = None


class AppImageConfigList(RootModel[List[AppImageConfigDetails]]):
    root: List[AppImageConfigDetails]


class AppSpecification(BaseModel):
    ContainerArguments_1: Optional[ContainerArguments] = Field(
        None, alias='ContainerArguments'
    )
    ContainerEntrypoint_1: Optional[ContainerEntrypoint] = Field(
        None, alias='ContainerEntrypoint'
    )
    ImageUri_1: ImageUri = Field(..., alias='ImageUri')


class ArtifactSource(BaseModel):
    SourceTypes: Optional[ArtifactSourceTypes] = None
    SourceUri: String2048


class ArtifactSummary(BaseModel):
    ArtifactArn_1: Optional[ArtifactArn] = Field(None, alias='ArtifactArn')
    ArtifactName: Optional[ExperimentEntityName] = None
    ArtifactType: Optional[String256] = None
    CreationTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None
    Source: Optional[ArtifactSource] = None


class AssociationSummary(BaseModel):
    AssociationType: Optional[AssociationEdgeType] = None
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    DestinationArn: Optional[AssociationEntityArn] = None
    DestinationName: Optional[ExperimentEntityName] = None
    DestinationType: Optional[String256] = None
    SourceArn: Optional[AssociationEntityArn] = None
    SourceName: Optional[ExperimentEntityName] = None
    SourceType: Optional[String256] = None


class AsyncInferenceNotificationConfig(BaseModel):
    ErrorTopic: Optional[SnsTopicArn] = None
    IncludeInferenceResponseIn: Optional[AsyncNotificationTopicTypeList] = None
    SuccessTopic: Optional[SnsTopicArn] = None


class AsyncInferenceOutputConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    NotificationConfig: Optional[AsyncInferenceNotificationConfig] = None
    S3FailurePath: Optional[DestinationS3Uri] = None
    S3OutputPath: Optional[DestinationS3Uri] = None


class AutoMLContainerDefinition(BaseModel):
    Environment: Optional[EnvironmentMap] = None
    Image: ContainerImage
    ModelDataUrl: Url


class AutoMLContainerDefinitions(RootModel[List[AutoMLContainerDefinition]]):
    root: List[AutoMLContainerDefinition] = Field(..., max_length=5)


class AutoMLDataSource(BaseModel):
    S3DataSource: AutoMLS3DataSource


class AutoMLInferenceContainerDefinitions(
    RootModel[Optional[Dict[str, AutoMLContainerDefinitions]]]
):
    root: Optional[Dict[str, AutoMLContainerDefinitions]] = None


class AutoMLJobChannel(BaseModel):
    ChannelType: Optional[AutoMLChannelType] = None
    CompressionType_1: Optional[CompressionType] = Field(None, alias='CompressionType')
    ContentType_1: Optional[ContentType] = Field(None, alias='ContentType')
    DataSource: Optional[AutoMLDataSource] = None


class AutoMLJobInputDataConfig(RootModel[List[AutoMLJobChannel]]):
    root: List[AutoMLJobChannel] = Field(..., max_length=2, min_length=1)


class AutoMLJobSummaries(RootModel[List[AutoMLJobSummary]]):
    root: List[AutoMLJobSummary]


class AutoMLProblemTypeConfig(BaseModel):
    ImageClassificationJobConfig_1: Optional[ImageClassificationJobConfig] = Field(
        None, alias='ImageClassificationJobConfig'
    )
    TextClassificationJobConfig_1: Optional[TextClassificationJobConfig] = Field(
        None, alias='TextClassificationJobConfig'
    )


class AutoMLSecurityConfig(BaseModel):
    EnableInterContainerTrafficEncryption: Optional[Boolean] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class BatchTransformInput(BaseModel):
    DataCapturedDestinationS3Uri: DestinationS3Uri
    DatasetFormat: MonitoringDatasetFormat
    EndTimeOffset: Optional[MonitoringTimeOffsetString] = None
    FeaturesAttribute: Optional[String] = None
    InferenceAttribute: Optional[String] = None
    LocalPath: ProcessingLocalPath
    ProbabilityAttribute: Optional[String] = None
    ProbabilityThresholdAttribute_1: Optional[ProbabilityThresholdAttribute] = Field(
        None, alias='ProbabilityThresholdAttribute'
    )
    S3DataDistributionType: Optional[ProcessingS3DataDistributionType] = None
    S3InputMode: Optional[ProcessingS3InputMode] = None
    StartTimeOffset: Optional[MonitoringTimeOffsetString] = None


class Bias(BaseModel):
    PostTrainingReport: Optional[MetricsSource] = None
    PreTrainingReport: Optional[MetricsSource] = None
    Report: Optional[MetricsSource] = None


class BlueGreenUpdatePolicy(BaseModel):
    MaximumExecutionTimeoutInSeconds_1: Optional[MaximumExecutionTimeoutInSeconds] = (
        Field(None, alias='MaximumExecutionTimeoutInSeconds')
    )
    TerminationWaitInSeconds_1: Optional[TerminationWaitInSeconds] = Field(
        None, alias='TerminationWaitInSeconds'
    )
    TrafficRoutingConfiguration: TrafficRoutingConfig


class CallbackStepMetadata(BaseModel):
    CallbackToken_1: Optional[CallbackToken] = Field(None, alias='CallbackToken')
    OutputParameters: Optional[OutputParameterList] = None
    SqsQueueUrl: Optional[String256] = None


class CanvasAppSettings(BaseModel):
    ModelRegisterSettings_1: Optional[ModelRegisterSettings] = Field(
        None, alias='ModelRegisterSettings'
    )
    TimeSeriesForecastingSettings_1: Optional[TimeSeriesForecastingSettings] = Field(
        None, alias='TimeSeriesForecastingSettings'
    )


class CategoricalParameter(BaseModel):
    Name: String64
    Value: CategoricalParameterRangeValues


class CategoricalParameters(RootModel[List[CategoricalParameter]]):
    root: List[CategoricalParameter] = Field(..., max_length=5, min_length=1)


class ChannelSpecification(BaseModel):
    Description: Optional[EntityDescription] = None
    IsRequired: Optional[Boolean] = None
    Name: ChannelName
    SupportedCompressionTypes: Optional[CompressionTypes] = None
    SupportedContentTypes: ContentTypes
    SupportedInputModes: InputModes


class ChannelSpecifications(RootModel[List[ChannelSpecification]]):
    root: List[ChannelSpecification] = Field(..., max_length=8, min_length=1)


class ClarifyShapConfig(BaseModel):
    NumberOfSamples: Optional[ClarifyShapNumberOfSamples] = None
    Seed: Optional[ClarifyShapSeed] = None
    ShapBaselineConfig: ClarifyShapBaselineConfig
    TextConfig: Optional[ClarifyTextConfig] = None
    UseLogit: Optional[ClarifyShapUseLogit] = None


class CodeRepositories(RootModel[List[CodeRepository]]):
    root: List[CodeRepository] = Field(..., max_length=10)


class CodeRepositorySummary(BaseModel):
    CodeRepositoryArn_1: CodeRepositoryArn = Field(..., alias='CodeRepositoryArn')
    CodeRepositoryName: EntityName
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    GitConfig_1: Optional[GitConfig] = Field(None, alias='GitConfig')
    LastModifiedTime_1: LastModifiedTime = Field(..., alias='LastModifiedTime')


class CodeRepositorySummaryList(RootModel[List[CodeRepositorySummary]]):
    root: List[CodeRepositorySummary]


class CollectionConfiguration(BaseModel):
    CollectionName_1: Optional[CollectionName] = Field(None, alias='CollectionName')
    CollectionParameters_1: Optional[CollectionParameters] = Field(
        None, alias='CollectionParameters'
    )


class CollectionConfigurations(RootModel[List[CollectionConfiguration]]):
    root: List[CollectionConfiguration] = Field(..., max_length=20, min_length=0)


class CompilationJobSummaries(RootModel[List[CompilationJobSummary]]):
    root: List[CompilationJobSummary]


class ContextSummaries(RootModel[List[ContextSummary]]):
    root: List[ContextSummary]


class CreateActionRequest(BaseModel):
    ActionName: ExperimentEntityName
    ActionType: String256
    Description: Optional[ExperimentDescription] = None
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    Properties: Optional[LineageEntityParameters] = None
    Source: ActionSource
    Status: Optional[ActionStatus] = None
    Tags: Optional[TagList] = None


class CreateAppImageConfigRequest(BaseModel):
    AppImageConfigName_1: AppImageConfigName = Field(..., alias='AppImageConfigName')
    KernelGatewayImageConfig_1: Optional[KernelGatewayImageConfig] = Field(
        None, alias='KernelGatewayImageConfig'
    )
    Tags: Optional[TagList] = None


class CreateAppRequest(BaseModel):
    AppName_1: AppName = Field(..., alias='AppName')
    AppType_1: AppType = Field(..., alias='AppType')
    DomainId_1: DomainId = Field(..., alias='DomainId')
    ResourceSpec_1: Optional[ResourceSpec] = Field(None, alias='ResourceSpec')
    SpaceName_1: Optional[SpaceName] = Field(None, alias='SpaceName')
    Tags: Optional[TagList] = None
    UserProfileName_1: Optional[UserProfileName] = Field(None, alias='UserProfileName')


class CreateArtifactRequest(BaseModel):
    ArtifactName: Optional[ExperimentEntityName] = None
    ArtifactType: String256
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    Properties: Optional[LineageEntityParameters] = None
    Source: ArtifactSource
    Tags: Optional[TagList] = None


class CreateAutoMLJobV2Request(BaseModel):
    AutoMLJobInputDataConfig_1: AutoMLJobInputDataConfig = Field(
        ..., alias='AutoMLJobInputDataConfig'
    )
    AutoMLJobName_1: AutoMLJobName = Field(..., alias='AutoMLJobName')
    AutoMLJobObjective_1: Optional[AutoMLJobObjective] = Field(
        None, alias='AutoMLJobObjective'
    )
    AutoMLProblemTypeConfig_1: AutoMLProblemTypeConfig = Field(
        ..., alias='AutoMLProblemTypeConfig'
    )
    DataSplitConfig: Optional[AutoMLDataSplitConfig] = None
    ModelDeployConfig_1: Optional[ModelDeployConfig] = Field(
        None, alias='ModelDeployConfig'
    )
    OutputDataConfig: AutoMLOutputDataConfig
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    SecurityConfig: Optional[AutoMLSecurityConfig] = None
    Tags: Optional[TagList] = None


class CreateCodeRepositoryInput(BaseModel):
    CodeRepositoryName: EntityName
    GitConfig_1: GitConfig = Field(..., alias='GitConfig')
    Tags: Optional[TagList] = None


class CreateContextRequest(BaseModel):
    ContextName: ExperimentEntityName
    ContextType: String256
    Description: Optional[ExperimentDescription] = None
    Properties: Optional[LineageEntityParameters] = None
    Source: ContextSource
    Tags: Optional[TagList] = None


class CreateDeviceFleetRequest(BaseModel):
    Description: Optional[DeviceFleetDescription] = None
    DeviceFleetName: EntityName
    EnableIotRoleAlias_1: Optional[EnableIotRoleAlias] = Field(
        None, alias='EnableIotRoleAlias'
    )
    OutputConfig: EdgeOutputConfig
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Tags: Optional[TagList] = None


class CreateEdgePackagingJobRequest(BaseModel):
    CompilationJobName: EntityName
    EdgePackagingJobName: EntityName
    ModelName: EntityName
    ModelVersion: EdgeVersion
    OutputConfig: EdgeOutputConfig
    ResourceKey: Optional[KmsKeyId] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Tags: Optional[TagList] = None


class CreateExperimentRequest(BaseModel):
    Description: Optional[ExperimentDescription] = None
    DisplayName: Optional[ExperimentEntityName] = None
    ExperimentName: ExperimentEntityName
    Tags: Optional[TagList] = None


class CreateHubRequest(BaseModel):
    HubDescription_1: HubDescription = Field(..., alias='HubDescription')
    HubDisplayName_1: Optional[HubDisplayName] = Field(None, alias='HubDisplayName')
    HubName_1: HubName = Field(..., alias='HubName')
    HubSearchKeywords: Optional[HubSearchKeywordList] = None
    S3StorageConfig: Optional[HubS3StorageConfig] = None
    Tags: Optional[TagList] = None


class CreateHumanTaskUiRequest(BaseModel):
    HumanTaskUiName_1: HumanTaskUiName = Field(..., alias='HumanTaskUiName')
    Tags: Optional[TagList] = None
    UiTemplate_1: UiTemplate = Field(..., alias='UiTemplate')


class CreateImageRequest(BaseModel):
    Description: Optional[ImageDescription] = None
    DisplayName: Optional[ImageDisplayName] = None
    ImageName_1: ImageName = Field(..., alias='ImageName')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Tags: Optional[TagList] = None


class CreateModelCardExportJobRequest(BaseModel):
    ModelCardExportJobName: EntityName
    ModelCardName: EntityName
    ModelCardVersion: Optional[Integer] = None
    OutputConfig: ModelCardExportOutputConfig


class CreateModelCardRequest(BaseModel):
    Content: ModelCardContent
    ModelCardName: EntityName
    ModelCardStatus_1: ModelCardStatus = Field(..., alias='ModelCardStatus')
    SecurityConfig: Optional[ModelCardSecurityConfig] = None
    Tags: Optional[TagList] = None


class CreateModelPackageGroupInput(BaseModel):
    ModelPackageGroupDescription: Optional[EntityDescription] = None
    ModelPackageGroupName: EntityName
    Tags: Optional[TagList] = None


class CreateNotebookInstanceInput(BaseModel):
    AcceleratorTypes: Optional[NotebookInstanceAcceleratorTypes] = None
    AdditionalCodeRepositories: Optional[AdditionalCodeRepositoryNamesOrUrls] = None
    DefaultCodeRepository: Optional[CodeRepositoryNameOrUrl] = None
    DirectInternetAccess_1: Optional[DirectInternetAccess] = Field(
        None, alias='DirectInternetAccess'
    )
    InstanceMetadataServiceConfiguration_1: Optional[
        InstanceMetadataServiceConfiguration
    ] = Field(None, alias='InstanceMetadataServiceConfiguration')
    InstanceType_1: InstanceType = Field(..., alias='InstanceType')
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    LifecycleConfigName: Optional[NotebookInstanceLifecycleConfigName] = None
    NotebookInstanceName_1: NotebookInstanceName = Field(
        ..., alias='NotebookInstanceName'
    )
    PlatformIdentifier_1: Optional[PlatformIdentifier] = Field(
        None, alias='PlatformIdentifier'
    )
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    RootAccess_1: Optional[RootAccess] = Field(None, alias='RootAccess')
    SecurityGroupIds_1: Optional[SecurityGroupIds] = Field(
        None, alias='SecurityGroupIds'
    )
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    Tags: Optional[TagList] = None
    VolumeSizeInGB: Optional[NotebookInstanceVolumeSizeInGB] = None


class CreateNotebookInstanceLifecycleConfigInput(BaseModel):
    NotebookInstanceLifecycleConfigName_1: NotebookInstanceLifecycleConfigName = Field(
        ..., alias='NotebookInstanceLifecycleConfigName'
    )
    OnCreate: Optional[NotebookInstanceLifecycleConfigList] = None
    OnStart: Optional[NotebookInstanceLifecycleConfigList] = None


class CreatePipelineRequest(BaseModel):
    ClientRequestToken: IdempotencyToken
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )
    PipelineDefinition_1: Optional[PipelineDefinition] = Field(
        None, alias='PipelineDefinition'
    )
    PipelineDefinitionS3Location_1: Optional[PipelineDefinitionS3Location] = Field(
        None, alias='PipelineDefinitionS3Location'
    )
    PipelineDescription_1: Optional[PipelineDescription] = Field(
        None, alias='PipelineDescription'
    )
    PipelineDisplayName: Optional[PipelineName] = None
    PipelineName_1: PipelineName = Field(..., alias='PipelineName')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Tags: Optional[TagList] = None


class CreateProjectInput(BaseModel):
    ProjectDescription: Optional[EntityDescription] = None
    ProjectName: ProjectEntityName
    ServiceCatalogProvisioningDetails_1: ServiceCatalogProvisioningDetails = Field(
        ..., alias='ServiceCatalogProvisioningDetails'
    )
    Tags: Optional[TagList] = None


class CreateStudioLifecycleConfigRequest(BaseModel):
    StudioLifecycleConfigAppType_1: StudioLifecycleConfigAppType = Field(
        ..., alias='StudioLifecycleConfigAppType'
    )
    StudioLifecycleConfigContent_1: StudioLifecycleConfigContent = Field(
        ..., alias='StudioLifecycleConfigContent'
    )
    StudioLifecycleConfigName_1: StudioLifecycleConfigName = Field(
        ..., alias='StudioLifecycleConfigName'
    )
    Tags: Optional[TagList] = None


class CreateTransformJobRequest(BaseModel):
    BatchStrategy_1: Optional[BatchStrategy] = Field(None, alias='BatchStrategy')
    DataCaptureConfig: Optional[BatchDataCaptureConfig] = None
    DataProcessing_1: Optional[DataProcessing] = Field(None, alias='DataProcessing')
    Environment: Optional[TransformEnvironmentMap] = None
    ExperimentConfig_1: Optional[ExperimentConfig] = Field(
        None, alias='ExperimentConfig'
    )
    MaxConcurrentTransforms_1: Optional[MaxConcurrentTransforms] = Field(
        None, alias='MaxConcurrentTransforms'
    )
    MaxPayloadInMB_1: Optional[MaxPayloadInMB] = Field(None, alias='MaxPayloadInMB')
    ModelClientConfig_1: Optional[ModelClientConfig] = Field(
        None, alias='ModelClientConfig'
    )
    ModelName_1: ModelName = Field(..., alias='ModelName')
    Tags: Optional[TagList] = None
    TransformInput_1: TransformInput = Field(..., alias='TransformInput')
    TransformJobName_1: TransformJobName = Field(..., alias='TransformJobName')
    TransformOutput_1: TransformOutput = Field(..., alias='TransformOutput')
    TransformResources_1: TransformResources = Field(..., alias='TransformResources')


class CreateTrialComponentRequest(BaseModel):
    DisplayName: Optional[ExperimentEntityName] = None
    EndTime: Optional[Timestamp] = None
    InputArtifacts: Optional[TrialComponentArtifacts] = None
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    OutputArtifacts: Optional[TrialComponentArtifacts] = None
    Parameters: Optional[TrialComponentParameters] = None
    StartTime: Optional[Timestamp] = None
    Status: Optional[TrialComponentStatus] = None
    Tags: Optional[TagList] = None
    TrialComponentName: ExperimentEntityName


class CreateTrialRequest(BaseModel):
    DisplayName: Optional[ExperimentEntityName] = None
    ExperimentName: ExperimentEntityName
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    Tags: Optional[TagList] = None
    TrialName: ExperimentEntityName


class CreateWorkforceRequest(BaseModel):
    CognitoConfig_1: Optional[CognitoConfig] = Field(None, alias='CognitoConfig')
    OidcConfig_1: Optional[OidcConfig] = Field(None, alias='OidcConfig')
    SourceIpConfig_1: Optional[SourceIpConfig] = Field(None, alias='SourceIpConfig')
    Tags: Optional[TagList] = None
    WorkforceName_1: WorkforceName = Field(..., alias='WorkforceName')
    WorkforceVpcConfig: Optional[WorkforceVpcConfigRequest] = None


class CreateWorkteamRequest(BaseModel):
    Description: String200
    MemberDefinitions_1: MemberDefinitions = Field(..., alias='MemberDefinitions')
    NotificationConfiguration_1: Optional[NotificationConfiguration] = Field(
        None, alias='NotificationConfiguration'
    )
    Tags: Optional[TagList] = None
    WorkforceName_1: Optional[WorkforceName] = Field(None, alias='WorkforceName')
    WorkteamName_1: WorkteamName = Field(..., alias='WorkteamName')


class DataQualityAppSpecification(BaseModel):
    ContainerArguments: Optional[MonitoringContainerArguments] = None
    ContainerEntrypoint_1: Optional[ContainerEntrypoint] = Field(
        None, alias='ContainerEntrypoint'
    )
    Environment: Optional[MonitoringEnvironmentMap] = None
    ImageUri_1: ImageUri = Field(..., alias='ImageUri')
    PostAnalyticsProcessorSourceUri: Optional[S3Uri] = None
    RecordPreprocessorSourceUri: Optional[S3Uri] = None


class DataQualityBaselineConfig(BaseModel):
    BaseliningJobName: Optional[ProcessingJobName] = None
    ConstraintsResource: Optional[MonitoringConstraintsResource] = None
    StatisticsResource: Optional[MonitoringStatisticsResource] = None


class DataQualityJobInput(BaseModel):
    BatchTransformInput_1: Optional[BatchTransformInput] = Field(
        None, alias='BatchTransformInput'
    )
    EndpointInput_1: Optional[EndpointInput] = Field(None, alias='EndpointInput')


class DataSource(BaseModel):
    FileSystemDataSource_1: Optional[FileSystemDataSource] = Field(
        None, alias='FileSystemDataSource'
    )
    S3DataSource_1: Optional[S3DataSource] = Field(None, alias='S3DataSource')


class DatasetDefinition(BaseModel):
    AthenaDatasetDefinition_1: Optional[AthenaDatasetDefinition] = Field(
        None, alias='AthenaDatasetDefinition'
    )
    DataDistributionType_1: Optional[DataDistributionType] = Field(
        None, alias='DataDistributionType'
    )
    InputMode_1: Optional[InputMode] = Field(None, alias='InputMode')
    LocalPath: Optional[ProcessingLocalPath] = None
    RedshiftDatasetDefinition_1: Optional[RedshiftDatasetDefinition] = Field(
        None, alias='RedshiftDatasetDefinition'
    )


class DebugHookConfig(BaseModel):
    CollectionConfigurations_1: Optional[CollectionConfigurations] = Field(
        None, alias='CollectionConfigurations'
    )
    HookParameters_1: Optional[HookParameters] = Field(None, alias='HookParameters')
    LocalPath: Optional[DirectoryPath] = None
    S3OutputPath: S3Uri


class DeleteArtifactRequest(BaseModel):
    ArtifactArn_1: Optional[ArtifactArn] = Field(None, alias='ArtifactArn')
    Source: Optional[ArtifactSource] = None


class DeleteDomainRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    RetentionPolicy_1: Optional[RetentionPolicy] = Field(None, alias='RetentionPolicy')


class DeploymentConfig(BaseModel):
    AutoRollbackConfiguration: Optional[AutoRollbackConfig] = None
    BlueGreenUpdatePolicy_1: BlueGreenUpdatePolicy = Field(
        ..., alias='BlueGreenUpdatePolicy'
    )


class DeploymentStage(BaseModel):
    DeploymentConfig: Optional[EdgeDeploymentConfig] = None
    DeviceSelectionConfig_1: DeviceSelectionConfig = Field(
        ..., alias='DeviceSelectionConfig'
    )
    StageName: EntityName


class DeploymentStageStatusSummary(BaseModel):
    DeploymentConfig: EdgeDeploymentConfig
    DeploymentStatus: EdgeDeploymentStatus
    DeviceSelectionConfig_1: DeviceSelectionConfig = Field(
        ..., alias='DeviceSelectionConfig'
    )
    StageName: EntityName


class DeploymentStages(RootModel[List[DeploymentStage]]):
    root: List[DeploymentStage]


class DescribeActionResponse(BaseModel):
    ActionArn_1: Optional[ActionArn] = Field(None, alias='ActionArn')
    ActionName: Optional[ExperimentEntityNameOrArn] = None
    ActionType: Optional[String256] = None
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    Description: Optional[ExperimentDescription] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    LineageGroupArn_1: Optional[LineageGroupArn] = Field(None, alias='LineageGroupArn')
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    Properties: Optional[LineageEntityParameters] = None
    Source: Optional[ActionSource] = None
    Status: Optional[ActionStatus] = None


class DescribeAppImageConfigResponse(BaseModel):
    AppImageConfigArn_1: Optional[AppImageConfigArn] = Field(
        None, alias='AppImageConfigArn'
    )
    AppImageConfigName_1: Optional[AppImageConfigName] = Field(
        None, alias='AppImageConfigName'
    )
    CreationTime: Optional[Timestamp] = None
    KernelGatewayImageConfig_1: Optional[KernelGatewayImageConfig] = Field(
        None, alias='KernelGatewayImageConfig'
    )
    LastModifiedTime: Optional[Timestamp] = None


class DescribeAppResponse(BaseModel):
    AppArn_1: Optional[AppArn] = Field(None, alias='AppArn')
    AppName_1: Optional[AppName] = Field(None, alias='AppName')
    AppType_1: Optional[AppType] = Field(None, alias='AppType')
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DomainId_1: Optional[DomainId] = Field(None, alias='DomainId')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastHealthCheckTimestamp: Optional[Timestamp] = None
    LastUserActivityTimestamp: Optional[Timestamp] = None
    ResourceSpec_1: Optional[ResourceSpec] = Field(None, alias='ResourceSpec')
    SpaceName_1: Optional[SpaceName] = Field(None, alias='SpaceName')
    Status: Optional[AppStatus] = None
    UserProfileName_1: Optional[UserProfileName] = Field(None, alias='UserProfileName')


class DescribeArtifactResponse(BaseModel):
    ArtifactArn_1: Optional[ArtifactArn] = Field(None, alias='ArtifactArn')
    ArtifactName: Optional[ExperimentEntityNameOrArn] = None
    ArtifactType: Optional[String256] = None
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    LineageGroupArn_1: Optional[LineageGroupArn] = Field(None, alias='LineageGroupArn')
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    Properties: Optional[LineageEntityParameters] = None
    Source: Optional[ArtifactSource] = None


class DescribeCodeRepositoryOutput(BaseModel):
    CodeRepositoryArn_1: CodeRepositoryArn = Field(..., alias='CodeRepositoryArn')
    CodeRepositoryName: EntityName
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    GitConfig_1: Optional[GitConfig] = Field(None, alias='GitConfig')
    LastModifiedTime_1: LastModifiedTime = Field(..., alias='LastModifiedTime')


class DescribeContextResponse(BaseModel):
    ContextArn_1: Optional[ContextArn] = Field(None, alias='ContextArn')
    ContextName: Optional[ExperimentEntityName] = None
    ContextType: Optional[String256] = None
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    Description: Optional[ExperimentDescription] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    LineageGroupArn_1: Optional[LineageGroupArn] = Field(None, alias='LineageGroupArn')
    Properties: Optional[LineageEntityParameters] = None
    Source: Optional[ContextSource] = None


class DescribeDeviceFleetResponse(BaseModel):
    CreationTime: Timestamp
    Description: Optional[DeviceFleetDescription] = None
    DeviceFleetArn_1: DeviceFleetArn = Field(..., alias='DeviceFleetArn')
    DeviceFleetName: EntityName
    IotRoleAlias_1: Optional[IotRoleAlias] = Field(None, alias='IotRoleAlias')
    LastModifiedTime: Timestamp
    OutputConfig: EdgeOutputConfig
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class DescribeDeviceResponse(BaseModel):
    AgentVersion: Optional[EdgeVersion] = None
    Description: Optional[DeviceDescription] = None
    DeviceArn_1: Optional[DeviceArn] = Field(None, alias='DeviceArn')
    DeviceFleetName: EntityName
    DeviceName: EntityName
    IotThingName: Optional[ThingName] = None
    LatestHeartbeat: Optional[Timestamp] = None
    MaxModels: Optional[Integer] = None
    Models: Optional[EdgeModels] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RegistrationTime: Timestamp


class DescribeEdgePackagingJobResponse(BaseModel):
    CompilationJobName: Optional[EntityName] = None
    CreationTime: Optional[Timestamp] = None
    EdgePackagingJobArn_1: EdgePackagingJobArn = Field(..., alias='EdgePackagingJobArn')
    EdgePackagingJobName: EntityName
    EdgePackagingJobStatus_1: EdgePackagingJobStatus = Field(
        ..., alias='EdgePackagingJobStatus'
    )
    EdgePackagingJobStatusMessage: Optional[String] = None
    LastModifiedTime: Optional[Timestamp] = None
    ModelArtifact: Optional[S3Uri] = None
    ModelName: Optional[EntityName] = None
    ModelSignature: Optional[String] = None
    ModelVersion: Optional[EdgeVersion] = None
    OutputConfig: Optional[EdgeOutputConfig] = None
    PresetDeploymentOutput: Optional[EdgePresetDeploymentOutput] = None
    ResourceKey: Optional[KmsKeyId] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class DescribeExperimentResponse(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    Description: Optional[ExperimentDescription] = None
    DisplayName: Optional[ExperimentEntityName] = None
    ExperimentArn_1: Optional[ExperimentArn] = Field(None, alias='ExperimentArn')
    ExperimentName: Optional[ExperimentEntityName] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    Source: Optional[ExperimentSource] = None


class DescribeFeatureMetadataResponse(BaseModel):
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    Description: Optional[FeatureDescription] = None
    FeatureGroupArn_1: FeatureGroupArn = Field(..., alias='FeatureGroupArn')
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')
    FeatureName_1: FeatureName = Field(..., alias='FeatureName')
    FeatureType_1: FeatureType = Field(..., alias='FeatureType')
    LastModifiedTime_1: LastModifiedTime = Field(..., alias='LastModifiedTime')
    Parameters: Optional[FeatureParameters] = None


class DescribeHubContentResponse(BaseModel):
    CreationTime: Timestamp
    DocumentSchemaVersion_1: DocumentSchemaVersion = Field(
        ..., alias='DocumentSchemaVersion'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    HubArn_1: HubArn = Field(..., alias='HubArn')
    HubContentArn_1: HubContentArn = Field(..., alias='HubContentArn')
    HubContentDependencies: Optional[HubContentDependencyList] = None
    HubContentDescription_1: Optional[HubContentDescription] = Field(
        None, alias='HubContentDescription'
    )
    HubContentDisplayName_1: Optional[HubContentDisplayName] = Field(
        None, alias='HubContentDisplayName'
    )
    HubContentDocument_1: HubContentDocument = Field(..., alias='HubContentDocument')
    HubContentMarkdown_1: Optional[HubContentMarkdown] = Field(
        None, alias='HubContentMarkdown'
    )
    HubContentName_1: HubContentName = Field(..., alias='HubContentName')
    HubContentSearchKeywords: Optional[HubContentSearchKeywordList] = None
    HubContentStatus_1: HubContentStatus = Field(..., alias='HubContentStatus')
    HubContentType_1: HubContentType = Field(..., alias='HubContentType')
    HubContentVersion_1: HubContentVersion = Field(..., alias='HubContentVersion')
    HubName_1: HubName = Field(..., alias='HubName')


class DescribeHubResponse(BaseModel):
    CreationTime: Timestamp
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    HubArn_1: HubArn = Field(..., alias='HubArn')
    HubDescription_1: Optional[HubDescription] = Field(None, alias='HubDescription')
    HubDisplayName_1: Optional[HubDisplayName] = Field(None, alias='HubDisplayName')
    HubName_1: HubName = Field(..., alias='HubName')
    HubSearchKeywords: Optional[HubSearchKeywordList] = None
    HubStatus_1: HubStatus = Field(..., alias='HubStatus')
    LastModifiedTime: Timestamp
    S3StorageConfig: Optional[HubS3StorageConfig] = None


class DescribeLineageGroupResponse(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    Description: Optional[ExperimentDescription] = None
    DisplayName: Optional[ExperimentEntityName] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    LineageGroupArn_1: Optional[LineageGroupArn] = Field(None, alias='LineageGroupArn')
    LineageGroupName: Optional[ExperimentEntityName] = None


class DescribeModelCardExportJobResponse(BaseModel):
    CreatedAt: Timestamp
    ExportArtifacts: Optional[ModelCardExportArtifacts] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedAt: Timestamp
    ModelCardExportJobArn_1: ModelCardExportJobArn = Field(
        ..., alias='ModelCardExportJobArn'
    )
    ModelCardExportJobName: EntityName
    ModelCardName: EntityName
    ModelCardVersion: Integer
    OutputConfig: ModelCardExportOutputConfig
    Status: ModelCardExportJobStatus


class DescribeModelCardResponse(BaseModel):
    Content: ModelCardContent
    CreatedBy: UserContext
    CreationTime: Timestamp
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    ModelCardArn_1: ModelCardArn = Field(..., alias='ModelCardArn')
    ModelCardName: EntityName
    ModelCardProcessingStatus_1: Optional[ModelCardProcessingStatus] = Field(
        None, alias='ModelCardProcessingStatus'
    )
    ModelCardStatus_1: ModelCardStatus = Field(..., alias='ModelCardStatus')
    ModelCardVersion: Integer
    SecurityConfig: Optional[ModelCardSecurityConfig] = None


class DescribeModelPackageGroupOutput(BaseModel):
    CreatedBy: UserContext
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    ModelPackageGroupArn_1: ModelPackageGroupArn = Field(
        ..., alias='ModelPackageGroupArn'
    )
    ModelPackageGroupDescription: Optional[EntityDescription] = None
    ModelPackageGroupName: EntityName
    ModelPackageGroupStatus_1: ModelPackageGroupStatus = Field(
        ..., alias='ModelPackageGroupStatus'
    )


class DescribeNotebookInstanceLifecycleConfigOutput(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    NotebookInstanceLifecycleConfigArn_1: Optional[
        NotebookInstanceLifecycleConfigArn
    ] = Field(None, alias='NotebookInstanceLifecycleConfigArn')
    NotebookInstanceLifecycleConfigName_1: Optional[
        NotebookInstanceLifecycleConfigName
    ] = Field(None, alias='NotebookInstanceLifecycleConfigName')
    OnCreate: Optional[NotebookInstanceLifecycleConfigList] = None
    OnStart: Optional[NotebookInstanceLifecycleConfigList] = None


class DescribeNotebookInstanceOutput(BaseModel):
    AcceleratorTypes: Optional[NotebookInstanceAcceleratorTypes] = None
    AdditionalCodeRepositories: Optional[AdditionalCodeRepositoryNamesOrUrls] = None
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DefaultCodeRepository: Optional[CodeRepositoryNameOrUrl] = None
    DirectInternetAccess_1: Optional[DirectInternetAccess] = Field(
        None, alias='DirectInternetAccess'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    InstanceMetadataServiceConfiguration_1: Optional[
        InstanceMetadataServiceConfiguration
    ] = Field(None, alias='InstanceMetadataServiceConfiguration')
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    NotebookInstanceArn_1: Optional[NotebookInstanceArn] = Field(
        None, alias='NotebookInstanceArn'
    )
    NotebookInstanceLifecycleConfigName_1: Optional[
        NotebookInstanceLifecycleConfigName
    ] = Field(None, alias='NotebookInstanceLifecycleConfigName')
    NotebookInstanceName_1: Optional[NotebookInstanceName] = Field(
        None, alias='NotebookInstanceName'
    )
    NotebookInstanceStatus_1: Optional[NotebookInstanceStatus] = Field(
        None, alias='NotebookInstanceStatus'
    )
    PlatformIdentifier_1: Optional[PlatformIdentifier] = Field(
        None, alias='PlatformIdentifier'
    )
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    RootAccess_1: Optional[RootAccess] = Field(None, alias='RootAccess')
    SecurityGroups: Optional[SecurityGroupIds] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    Url: Optional[NotebookInstanceUrl] = None
    VolumeSizeInGB: Optional[NotebookInstanceVolumeSizeInGB] = None


class DescribePipelineExecutionResponse(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    FailureReason: Optional[PipelineExecutionFailureReason] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )
    PipelineArn_1: Optional[PipelineArn] = Field(None, alias='PipelineArn')
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )
    PipelineExecutionDescription_1: Optional[PipelineExecutionDescription] = Field(
        None, alias='PipelineExecutionDescription'
    )
    PipelineExecutionDisplayName: Optional[PipelineExecutionName] = None
    PipelineExecutionStatus_1: Optional[PipelineExecutionStatus] = Field(
        None, alias='PipelineExecutionStatus'
    )
    PipelineExperimentConfig_1: Optional[PipelineExperimentConfig] = Field(
        None, alias='PipelineExperimentConfig'
    )


class DescribePipelineResponse(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    LastRunTime: Optional[Timestamp] = None
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )
    PipelineArn_1: Optional[PipelineArn] = Field(None, alias='PipelineArn')
    PipelineDefinition_1: Optional[PipelineDefinition] = Field(
        None, alias='PipelineDefinition'
    )
    PipelineDescription_1: Optional[PipelineDescription] = Field(
        None, alias='PipelineDescription'
    )
    PipelineDisplayName: Optional[PipelineName] = None
    PipelineName_1: Optional[PipelineName] = Field(None, alias='PipelineName')
    PipelineStatus_1: Optional[PipelineStatus] = Field(None, alias='PipelineStatus')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class DescribeProjectOutput(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Timestamp
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')
    ProjectDescription: Optional[EntityDescription] = None
    ProjectId_1: ProjectId = Field(..., alias='ProjectId')
    ProjectName: ProjectEntityName
    ProjectStatus_1: ProjectStatus = Field(..., alias='ProjectStatus')
    ServiceCatalogProvisionedProductDetails_1: Optional[
        ServiceCatalogProvisionedProductDetails
    ] = Field(None, alias='ServiceCatalogProvisionedProductDetails')
    ServiceCatalogProvisioningDetails_1: ServiceCatalogProvisioningDetails = Field(
        ..., alias='ServiceCatalogProvisioningDetails'
    )


class DescribeSubscribedWorkteamResponse(BaseModel):
    SubscribedWorkteam_1: SubscribedWorkteam = Field(..., alias='SubscribedWorkteam')


class DescribeTransformJobResponse(BaseModel):
    AutoMLJobArn_1: Optional[AutoMLJobArn] = Field(None, alias='AutoMLJobArn')
    BatchStrategy_1: Optional[BatchStrategy] = Field(None, alias='BatchStrategy')
    CreationTime: Timestamp
    DataCaptureConfig: Optional[BatchDataCaptureConfig] = None
    DataProcessing_1: Optional[DataProcessing] = Field(None, alias='DataProcessing')
    Environment: Optional[TransformEnvironmentMap] = None
    ExperimentConfig_1: Optional[ExperimentConfig] = Field(
        None, alias='ExperimentConfig'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LabelingJobArn_1: Optional[LabelingJobArn] = Field(None, alias='LabelingJobArn')
    MaxConcurrentTransforms_1: Optional[MaxConcurrentTransforms] = Field(
        None, alias='MaxConcurrentTransforms'
    )
    MaxPayloadInMB_1: Optional[MaxPayloadInMB] = Field(None, alias='MaxPayloadInMB')
    ModelClientConfig_1: Optional[ModelClientConfig] = Field(
        None, alias='ModelClientConfig'
    )
    ModelName_1: ModelName = Field(..., alias='ModelName')
    TransformEndTime: Optional[Timestamp] = None
    TransformInput_1: TransformInput = Field(..., alias='TransformInput')
    TransformJobArn_1: TransformJobArn = Field(..., alias='TransformJobArn')
    TransformJobName_1: TransformJobName = Field(..., alias='TransformJobName')
    TransformJobStatus_1: TransformJobStatus = Field(..., alias='TransformJobStatus')
    TransformOutput_1: Optional[TransformOutput] = Field(None, alias='TransformOutput')
    TransformResources_1: TransformResources = Field(..., alias='TransformResources')
    TransformStartTime: Optional[Timestamp] = None


class DescribeTrialResponse(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    DisplayName: Optional[ExperimentEntityName] = None
    ExperimentName: Optional[ExperimentEntityName] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    Source: Optional[TrialSource] = None
    TrialArn_1: Optional[TrialArn] = Field(None, alias='TrialArn')
    TrialName: Optional[ExperimentEntityName] = None


class DescribeWorkteamResponse(BaseModel):
    Workteam_1: Workteam = Field(..., alias='Workteam')


class DeviceDeploymentSummaries(RootModel[List[DeviceDeploymentSummary]]):
    root: List[DeviceDeploymentSummary]


class DeviceFleetSummaries(RootModel[List[DeviceFleetSummary]]):
    root: List[DeviceFleetSummary]


class DriftCheckBias(BaseModel):
    ConfigFile: Optional[FileSource] = None
    PostTrainingConstraints: Optional[MetricsSource] = None
    PreTrainingConstraints: Optional[MetricsSource] = None


class DriftCheckExplainability(BaseModel):
    ConfigFile: Optional[FileSource] = None
    Constraints: Optional[MetricsSource] = None


class DriftCheckModelDataQuality(BaseModel):
    Constraints: Optional[MetricsSource] = None
    Statistics: Optional[MetricsSource] = None


class DriftCheckModelQuality(BaseModel):
    Constraints: Optional[MetricsSource] = None
    Statistics: Optional[MetricsSource] = None


class EdgeDeploymentPlanSummaries(RootModel[List[EdgeDeploymentPlanSummary]]):
    root: List[EdgeDeploymentPlanSummary]


class EdgeModelSummaries(RootModel[List[EdgeModelSummary]]):
    root: List[EdgeModelSummary]


class EdgePackagingJobSummaries(RootModel[List[EdgePackagingJobSummary]]):
    root: List[EdgePackagingJobSummary]


class EndpointPerformance(BaseModel):
    EndpointInfo_1: EndpointInfo = Field(..., alias='EndpointInfo')
    Metrics: InferenceMetrics


class EndpointPerformances(RootModel[List[EndpointPerformance]]):
    root: List[EndpointPerformance] = Field(..., max_length=1)


class EnvironmentParameterRanges(BaseModel):
    CategoricalParameterRanges: Optional[CategoricalParameters] = None


class Experiment(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    Description: Optional[ExperimentDescription] = None
    DisplayName: Optional[ExperimentEntityName] = None
    ExperimentArn_1: Optional[ExperimentArn] = Field(None, alias='ExperimentArn')
    ExperimentName: Optional[ExperimentEntityName] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    Source: Optional[ExperimentSource] = None
    Tags: Optional[TagList] = None


class ExperimentSummaries(RootModel[List[ExperimentSummary]]):
    root: List[ExperimentSummary]


class Explainability(BaseModel):
    Report: Optional[MetricsSource] = None


class FeatureAdditions(RootModel[List[FeatureDefinition]]):
    root: List[FeatureDefinition] = Field(..., max_length=100, min_length=1)


class FeatureGroupSummary(BaseModel):
    CreationTime: Timestamp
    FeatureGroupArn_1: FeatureGroupArn = Field(..., alias='FeatureGroupArn')
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')
    FeatureGroupStatus_1: Optional[FeatureGroupStatus] = Field(
        None, alias='FeatureGroupStatus'
    )
    OfflineStoreStatus_1: Optional[OfflineStoreStatus] = Field(
        None, alias='OfflineStoreStatus'
    )


class FeatureMetadata(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    Description: Optional[FeatureDescription] = None
    FeatureGroupArn_1: Optional[FeatureGroupArn] = Field(None, alias='FeatureGroupArn')
    FeatureGroupName_1: Optional[FeatureGroupName] = Field(
        None, alias='FeatureGroupName'
    )
    FeatureName_1: Optional[FeatureName] = Field(None, alias='FeatureName')
    FeatureType_1: Optional[FeatureType] = Field(None, alias='FeatureType')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    Parameters: Optional[FeatureParameters] = None


class FinalMetricDataList(RootModel[List[MetricData]]):
    root: List[MetricData] = Field(..., max_length=40, min_length=0)


class FlowDefinitionSummaries(RootModel[List[FlowDefinitionSummary]]):
    root: List[FlowDefinitionSummary]


class GetSearchSuggestionsResponse(BaseModel):
    PropertyNameSuggestions: Optional[PropertyNameSuggestionList] = None


class HubContentInfo(BaseModel):
    CreationTime: Timestamp
    DocumentSchemaVersion_1: DocumentSchemaVersion = Field(
        ..., alias='DocumentSchemaVersion'
    )
    HubContentArn_1: HubContentArn = Field(..., alias='HubContentArn')
    HubContentDescription_1: Optional[HubContentDescription] = Field(
        None, alias='HubContentDescription'
    )
    HubContentDisplayName_1: Optional[HubContentDisplayName] = Field(
        None, alias='HubContentDisplayName'
    )
    HubContentName_1: HubContentName = Field(..., alias='HubContentName')
    HubContentSearchKeywords: Optional[HubContentSearchKeywordList] = None
    HubContentStatus_1: HubContentStatus = Field(..., alias='HubContentStatus')
    HubContentType_1: HubContentType = Field(..., alias='HubContentType')
    HubContentVersion_1: HubContentVersion = Field(..., alias='HubContentVersion')


class HubContentInfoList(RootModel[List[HubContentInfo]]):
    root: List[HubContentInfo]


class HumanLoopConfig(BaseModel):
    HumanTaskUiArn_1: HumanTaskUiArn = Field(..., alias='HumanTaskUiArn')
    PublicWorkforceTaskPrice_1: Optional[PublicWorkforceTaskPrice] = Field(
        None, alias='PublicWorkforceTaskPrice'
    )
    TaskAvailabilityLifetimeInSeconds: Optional[
        FlowDefinitionTaskAvailabilityLifetimeInSeconds
    ] = None
    TaskCount: FlowDefinitionTaskCount
    TaskDescription: FlowDefinitionTaskDescription
    TaskKeywords: Optional[FlowDefinitionTaskKeywords] = None
    TaskTimeLimitInSeconds: Optional[FlowDefinitionTaskTimeLimitInSeconds] = None
    TaskTitle: FlowDefinitionTaskTitle
    WorkteamArn_1: WorkteamArn = Field(..., alias='WorkteamArn')


class HumanTaskConfig(BaseModel):
    AnnotationConsolidationConfig_1: AnnotationConsolidationConfig = Field(
        ..., alias='AnnotationConsolidationConfig'
    )
    MaxConcurrentTaskCount_1: Optional[MaxConcurrentTaskCount] = Field(
        None, alias='MaxConcurrentTaskCount'
    )
    NumberOfHumanWorkersPerDataObject_1: NumberOfHumanWorkersPerDataObject = Field(
        ..., alias='NumberOfHumanWorkersPerDataObject'
    )
    PreHumanTaskLambdaArn: LambdaFunctionArn
    PublicWorkforceTaskPrice_1: Optional[PublicWorkforceTaskPrice] = Field(
        None, alias='PublicWorkforceTaskPrice'
    )
    TaskAvailabilityLifetimeInSeconds_1: Optional[TaskAvailabilityLifetimeInSeconds] = (
        Field(None, alias='TaskAvailabilityLifetimeInSeconds')
    )
    TaskDescription_1: TaskDescription = Field(..., alias='TaskDescription')
    TaskKeywords_1: Optional[TaskKeywords] = Field(None, alias='TaskKeywords')
    TaskTimeLimitInSeconds_1: TaskTimeLimitInSeconds = Field(
        ..., alias='TaskTimeLimitInSeconds'
    )
    TaskTitle_1: TaskTitle = Field(..., alias='TaskTitle')
    UiConfig_1: UiConfig = Field(..., alias='UiConfig')
    WorkteamArn_1: WorkteamArn = Field(..., alias='WorkteamArn')


class HumanTaskUiSummaries(RootModel[List[HumanTaskUiSummary]]):
    root: List[HumanTaskUiSummary]


class HyperParameterAlgorithmSpecification(BaseModel):
    AlgorithmName: Optional[ArnOrName] = None
    MetricDefinitions: Optional[MetricDefinitionList] = None
    TrainingImage: Optional[AlgorithmImage] = None
    TrainingInputMode_1: TrainingInputMode = Field(..., alias='TrainingInputMode')


class HyperParameterSpecification(BaseModel):
    DefaultValue: Optional[HyperParameterValue] = None
    Description: Optional[EntityDescription] = None
    IsRequired: Optional[Boolean] = None
    IsTunable: Optional[Boolean] = None
    Name: ParameterName
    Range: Optional[ParameterRange] = None
    Type: ParameterType


class HyperParameterSpecifications(RootModel[List[HyperParameterSpecification]]):
    root: List[HyperParameterSpecification] = Field(..., max_length=100, min_length=0)


class HyperParameterTrainingJobSummaries(
    RootModel[List[HyperParameterTrainingJobSummary]]
):
    root: List[HyperParameterTrainingJobSummary]


class HyperParameterTuningJobStrategyConfig(BaseModel):
    HyperbandStrategyConfig_1: Optional[HyperbandStrategyConfig] = Field(
        None, alias='HyperbandStrategyConfig'
    )


class HyperParameterTuningJobSummaries(RootModel[List[HyperParameterTuningJobSummary]]):
    root: List[HyperParameterTuningJobSummary]


class ImageConfig(BaseModel):
    RepositoryAccessMode_1: RepositoryAccessMode = Field(
        ..., alias='RepositoryAccessMode'
    )
    RepositoryAuthConfig_1: Optional[RepositoryAuthConfig] = Field(
        None, alias='RepositoryAuthConfig'
    )


class ImportHubContentRequest(BaseModel):
    DocumentSchemaVersion_1: DocumentSchemaVersion = Field(
        ..., alias='DocumentSchemaVersion'
    )
    HubContentDescription_1: Optional[HubContentDescription] = Field(
        None, alias='HubContentDescription'
    )
    HubContentDisplayName_1: Optional[HubContentDisplayName] = Field(
        None, alias='HubContentDisplayName'
    )
    HubContentDocument_1: HubContentDocument = Field(..., alias='HubContentDocument')
    HubContentMarkdown_1: Optional[HubContentMarkdown] = Field(
        None, alias='HubContentMarkdown'
    )
    HubContentName_1: HubContentName = Field(..., alias='HubContentName')
    HubContentSearchKeywords: Optional[HubContentSearchKeywordList] = None
    HubContentType_1: HubContentType = Field(..., alias='HubContentType')
    HubContentVersion_1: Optional[HubContentVersion] = Field(
        None, alias='HubContentVersion'
    )
    HubName_1: HubName = Field(..., alias='HubName')
    Tags: Optional[TagList] = None


class InferenceExperimentList(RootModel[List[InferenceExperimentSummary]]):
    root: List[InferenceExperimentSummary]


class InferenceRecommendation(BaseModel):
    EndpointConfiguration: EndpointOutputConfiguration
    Metrics: RecommendationMetrics
    ModelConfiguration_1: ModelConfiguration = Field(..., alias='ModelConfiguration')
    RecommendationId: Optional[String] = None


class InferenceRecommendations(RootModel[List[InferenceRecommendation]]):
    root: List[InferenceRecommendation] = Field(..., max_length=10, min_length=1)


class InferenceSpecification(BaseModel):
    Containers: ModelPackageContainerDefinitionList
    SupportedContentTypes: ContentTypes
    SupportedRealtimeInferenceInstanceTypes: Optional[
        RealtimeInferenceInstanceTypes
    ] = None
    SupportedResponseMIMETypes: ResponseMIMETypes
    SupportedTransformInstanceTypes: Optional[TransformInstanceTypes] = None


class JupyterServerAppSettings(BaseModel):
    CodeRepositories_1: Optional[CodeRepositories] = Field(
        None, alias='CodeRepositories'
    )
    DefaultResourceSpec: Optional[ResourceSpec] = None
    LifecycleConfigArns_1: Optional[LifecycleConfigArns] = Field(
        None, alias='LifecycleConfigArns'
    )


class KernelGatewayAppSettings(BaseModel):
    CustomImages_1: Optional[CustomImages] = Field(None, alias='CustomImages')
    DefaultResourceSpec: Optional[ResourceSpec] = None
    LifecycleConfigArns_1: Optional[LifecycleConfigArns] = Field(
        None, alias='LifecycleConfigArns'
    )


class LabelingJobDataSource(BaseModel):
    S3DataSource: Optional[LabelingJobS3DataSource] = None
    SnsDataSource: Optional[LabelingJobSnsDataSource] = None


class LabelingJobInputConfig(BaseModel):
    DataAttributes: Optional[LabelingJobDataAttributes] = None
    DataSource: LabelingJobDataSource


class LabelingJobResourceConfig(BaseModel):
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class LabelingJobSummary(BaseModel):
    AnnotationConsolidationLambdaArn: Optional[LambdaFunctionArn] = None
    CreationTime: Timestamp
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    InputConfig: Optional[LabelingJobInputConfig] = None
    LabelCounters_1: LabelCounters = Field(..., alias='LabelCounters')
    LabelingJobArn_1: LabelingJobArn = Field(..., alias='LabelingJobArn')
    LabelingJobName_1: LabelingJobName = Field(..., alias='LabelingJobName')
    LabelingJobOutput_1: Optional[LabelingJobOutput] = Field(
        None, alias='LabelingJobOutput'
    )
    LabelingJobStatus_1: LabelingJobStatus = Field(..., alias='LabelingJobStatus')
    LastModifiedTime: Timestamp
    PreHumanTaskLambdaArn: LambdaFunctionArn
    WorkteamArn_1: WorkteamArn = Field(..., alias='WorkteamArn')


class LabelingJobSummaryList(RootModel[List[LabelingJobSummary]]):
    root: List[LabelingJobSummary]


class LambdaStepMetadata(BaseModel):
    Arn: Optional[String256] = None
    OutputParameters: Optional[OutputParameterList] = None


class LineageGroupSummaries(RootModel[List[LineageGroupSummary]]):
    root: List[LineageGroupSummary]


class ListActionsResponse(BaseModel):
    ActionSummaries_1: Optional[ActionSummaries] = Field(None, alias='ActionSummaries')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAppImageConfigsResponse(BaseModel):
    AppImageConfigs: Optional[AppImageConfigList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAutoMLJobsResponse(BaseModel):
    AutoMLJobSummaries_1: AutoMLJobSummaries = Field(..., alias='AutoMLJobSummaries')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCodeRepositoriesOutput(BaseModel):
    CodeRepositorySummaryList_1: CodeRepositorySummaryList = Field(
        ..., alias='CodeRepositorySummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCompilationJobsResponse(BaseModel):
    CompilationJobSummaries_1: CompilationJobSummaries = Field(
        ..., alias='CompilationJobSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListContextsResponse(BaseModel):
    ContextSummaries_1: Optional[ContextSummaries] = Field(
        None, alias='ContextSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDataQualityJobDefinitionsResponse(BaseModel):
    JobDefinitionSummaries: MonitoringJobDefinitionSummaryList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDeviceFleetsResponse(BaseModel):
    DeviceFleetSummaries_1: DeviceFleetSummaries = Field(
        ..., alias='DeviceFleetSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEdgeDeploymentPlansResponse(BaseModel):
    EdgeDeploymentPlanSummaries_1: EdgeDeploymentPlanSummaries = Field(
        ..., alias='EdgeDeploymentPlanSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEdgePackagingJobsResponse(BaseModel):
    EdgePackagingJobSummaries_1: EdgePackagingJobSummaries = Field(
        ..., alias='EdgePackagingJobSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListExperimentsResponse(BaseModel):
    ExperimentSummaries_1: Optional[ExperimentSummaries] = Field(
        None, alias='ExperimentSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFlowDefinitionsResponse(BaseModel):
    FlowDefinitionSummaries_1: FlowDefinitionSummaries = Field(
        ..., alias='FlowDefinitionSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListHubContentVersionsResponse(BaseModel):
    HubContentSummaries: HubContentInfoList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListHubContentsResponse(BaseModel):
    HubContentSummaries: HubContentInfoList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListHumanTaskUisResponse(BaseModel):
    HumanTaskUiSummaries_1: HumanTaskUiSummaries = Field(
        ..., alias='HumanTaskUiSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListHyperParameterTuningJobsResponse(BaseModel):
    HyperParameterTuningJobSummaries_1: HyperParameterTuningJobSummaries = Field(
        ..., alias='HyperParameterTuningJobSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListInferenceExperimentsResponse(BaseModel):
    InferenceExperiments: Optional[InferenceExperimentList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLabelingJobsResponse(BaseModel):
    LabelingJobSummaryList_1: Optional[LabelingJobSummaryList] = Field(
        None, alias='LabelingJobSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLineageGroupsResponse(BaseModel):
    LineageGroupSummaries_1: Optional[LineageGroupSummaries] = Field(
        None, alias='LineageGroupSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelBiasJobDefinitionsResponse(BaseModel):
    JobDefinitionSummaries: MonitoringJobDefinitionSummaryList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelCardExportJobsResponse(BaseModel):
    ModelCardExportJobSummaries: ModelCardExportJobSummaryList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelCardVersionsResponse(BaseModel):
    ModelCardVersionSummaryList_1: ModelCardVersionSummaryList = Field(
        ..., alias='ModelCardVersionSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelCardsResponse(BaseModel):
    ModelCardSummaries: ModelCardSummaryList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelExplainabilityJobDefinitionsResponse(BaseModel):
    JobDefinitionSummaries: MonitoringJobDefinitionSummaryList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelMetadataRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SearchExpression: Optional[ModelMetadataSearchExpression] = None


class ListModelPackagesOutput(BaseModel):
    ModelPackageSummaryList_1: ModelPackageSummaryList = Field(
        ..., alias='ModelPackageSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelQualityJobDefinitionsResponse(BaseModel):
    JobDefinitionSummaries: MonitoringJobDefinitionSummaryList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelsOutput(BaseModel):
    Models: ModelSummaryList
    NextToken: Optional[PaginationToken] = None


class ListMonitoringAlertsResponse(BaseModel):
    MonitoringAlertSummaries: Optional[MonitoringAlertSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMonitoringExecutionsResponse(BaseModel):
    MonitoringExecutionSummaries: MonitoringExecutionSummaryList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMonitoringSchedulesResponse(BaseModel):
    MonitoringScheduleSummaries: MonitoringScheduleSummaryList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListNotebookInstancesOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    NotebookInstances: Optional[NotebookInstanceSummaryList] = None


class ListPipelineExecutionsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PipelineExecutionSummaries: Optional[PipelineExecutionSummaryList] = None


class ListPipelineParametersForExecutionResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PipelineParameters: Optional[ParameterList] = None


class ListPipelinesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PipelineSummaries: Optional[PipelineSummaryList] = None


class ListProjectsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ProjectSummaryList_1: ProjectSummaryList = Field(..., alias='ProjectSummaryList')


class ListSpacesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Spaces: Optional[SpaceList] = None


class ListStageDevicesResponse(BaseModel):
    DeviceDeploymentSummaries_1: DeviceDeploymentSummaries = Field(
        ..., alias='DeviceDeploymentSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListStudioLifecycleConfigsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StudioLifecycleConfigs: Optional[StudioLifecycleConfigsList] = None


class ListSubscribedWorkteamsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SubscribedWorkteams_1: SubscribedWorkteams = Field(..., alias='SubscribedWorkteams')


class ListTagsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags: Optional[TagList] = None


class ListTrainingJobsForHyperParameterTuningJobResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TrainingJobSummaries: HyperParameterTrainingJobSummaries


class ListTransformJobsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TransformJobSummaries_1: TransformJobSummaries = Field(
        ..., alias='TransformJobSummaries'
    )


class ListUserProfilesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    UserProfiles: Optional[UserProfileList] = None


class ListWorkteamsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Workteams_1: Workteams = Field(..., alias='Workteams')


class MetricDataList(RootModel[List[MetricDatum]]):
    root: List[MetricDatum] = Field(..., max_length=40, min_length=0)


class ModelBiasAppSpecification(BaseModel):
    ConfigUri: S3Uri
    Environment: Optional[MonitoringEnvironmentMap] = None
    ImageUri_1: ImageUri = Field(..., alias='ImageUri')


class ModelBiasBaselineConfig(BaseModel):
    BaseliningJobName: Optional[ProcessingJobName] = None
    ConstraintsResource: Optional[MonitoringConstraintsResource] = None


class ModelBiasJobInput(BaseModel):
    BatchTransformInput_1: Optional[BatchTransformInput] = Field(
        None, alias='BatchTransformInput'
    )
    EndpointInput_1: Optional[EndpointInput] = Field(None, alias='EndpointInput')
    GroundTruthS3Input: MonitoringGroundTruthS3Input


class ModelCard(BaseModel):
    Content: Optional[ModelCardContent] = None
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    ModelCardArn_1: Optional[ModelCardArn] = Field(None, alias='ModelCardArn')
    ModelCardName: Optional[EntityName] = None
    ModelCardStatus_1: Optional[ModelCardStatus] = Field(None, alias='ModelCardStatus')
    ModelCardVersion: Optional[Integer] = None
    ModelId: Optional[String] = None
    RiskRating: Optional[String] = None
    SecurityConfig: Optional[ModelCardSecurityConfig] = None
    Tags: Optional[TagList] = None


class ModelDashboardModelCard(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    ModelCardArn_1: Optional[ModelCardArn] = Field(None, alias='ModelCardArn')
    ModelCardName: Optional[EntityName] = None
    ModelCardStatus_1: Optional[ModelCardStatus] = Field(None, alias='ModelCardStatus')
    ModelCardVersion: Optional[Integer] = None
    ModelId: Optional[String] = None
    RiskRating: Optional[String] = None
    SecurityConfig: Optional[ModelCardSecurityConfig] = None
    Tags: Optional[TagList] = None


class ModelExplainabilityAppSpecification(BaseModel):
    ConfigUri: S3Uri
    Environment: Optional[MonitoringEnvironmentMap] = None
    ImageUri_1: ImageUri = Field(..., alias='ImageUri')


class ModelExplainabilityBaselineConfig(BaseModel):
    BaseliningJobName: Optional[ProcessingJobName] = None
    ConstraintsResource: Optional[MonitoringConstraintsResource] = None


class ModelExplainabilityJobInput(BaseModel):
    BatchTransformInput_1: Optional[BatchTransformInput] = Field(
        None, alias='BatchTransformInput'
    )
    EndpointInput_1: Optional[EndpointInput] = Field(None, alias='EndpointInput')


class ModelInfrastructureConfig(BaseModel):
    InfrastructureType: ModelInfrastructureType
    RealTimeInferenceConfig_1: RealTimeInferenceConfig = Field(
        ..., alias='RealTimeInferenceConfig'
    )


class ModelMetadataSummaries(RootModel[List[ModelMetadataSummary]]):
    root: List[ModelMetadataSummary]


class ModelMetrics(BaseModel):
    Bias_1: Optional[Bias] = Field(None, alias='Bias')
    Explainability_1: Optional[Explainability] = Field(None, alias='Explainability')
    ModelDataQuality_1: Optional[ModelDataQuality] = Field(
        None, alias='ModelDataQuality'
    )
    ModelQuality_1: Optional[ModelQuality] = Field(None, alias='ModelQuality')


class ModelPackageGroup(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    ModelPackageGroupArn_1: Optional[ModelPackageGroupArn] = Field(
        None, alias='ModelPackageGroupArn'
    )
    ModelPackageGroupDescription: Optional[EntityDescription] = None
    ModelPackageGroupName: Optional[EntityName] = None
    ModelPackageGroupStatus_1: Optional[ModelPackageGroupStatus] = Field(
        None, alias='ModelPackageGroupStatus'
    )
    Tags: Optional[TagList] = None


class ModelPackageStatusDetails(BaseModel):
    ImageScanStatuses: Optional[ModelPackageStatusItemList] = None
    ValidationStatuses: ModelPackageStatusItemList


class ModelPackageValidationProfile(BaseModel):
    ProfileName: EntityName
    TransformJobDefinition_1: TransformJobDefinition = Field(
        ..., alias='TransformJobDefinition'
    )


class ModelPackageValidationProfiles(RootModel[List[ModelPackageValidationProfile]]):
    root: List[ModelPackageValidationProfile] = Field(..., max_length=1, min_length=1)


class ModelPackageValidationSpecification(BaseModel):
    ValidationProfiles: ModelPackageValidationProfiles
    ValidationRole: RoleArn


class ModelQualityAppSpecification(BaseModel):
    ContainerArguments: Optional[MonitoringContainerArguments] = None
    ContainerEntrypoint_1: Optional[ContainerEntrypoint] = Field(
        None, alias='ContainerEntrypoint'
    )
    Environment: Optional[MonitoringEnvironmentMap] = None
    ImageUri_1: ImageUri = Field(..., alias='ImageUri')
    PostAnalyticsProcessorSourceUri: Optional[S3Uri] = None
    ProblemType: Optional[MonitoringProblemType] = None
    RecordPreprocessorSourceUri: Optional[S3Uri] = None


class ModelQualityBaselineConfig(BaseModel):
    BaseliningJobName: Optional[ProcessingJobName] = None
    ConstraintsResource: Optional[MonitoringConstraintsResource] = None


class ModelQualityJobInput(BaseModel):
    BatchTransformInput_1: Optional[BatchTransformInput] = Field(
        None, alias='BatchTransformInput'
    )
    EndpointInput_1: Optional[EndpointInput] = Field(None, alias='EndpointInput')
    GroundTruthS3Input: MonitoringGroundTruthS3Input


class ModelVariantConfig(BaseModel):
    InfrastructureConfig: ModelInfrastructureConfig
    ModelName_1: ModelName = Field(..., alias='ModelName')
    VariantName: ModelVariantName


class ModelVariantConfigList(RootModel[List[ModelVariantConfig]]):
    root: List[ModelVariantConfig] = Field(..., max_length=2, min_length=1)


class ModelVariantConfigSummary(BaseModel):
    InfrastructureConfig: ModelInfrastructureConfig
    ModelName_1: ModelName = Field(..., alias='ModelName')
    Status: ModelVariantStatus
    VariantName: ModelVariantName


class ModelVariantConfigSummaryList(RootModel[List[ModelVariantConfigSummary]]):
    root: List[ModelVariantConfigSummary]


class MonitoringAlertHistoryList(RootModel[List[MonitoringAlertHistorySummary]]):
    root: List[MonitoringAlertHistorySummary]


class MonitoringBaselineConfig(BaseModel):
    BaseliningJobName: Optional[ProcessingJobName] = None
    ConstraintsResource: Optional[MonitoringConstraintsResource] = None
    StatisticsResource: Optional[MonitoringStatisticsResource] = None


class MonitoringInput(BaseModel):
    BatchTransformInput_1: Optional[BatchTransformInput] = Field(
        None, alias='BatchTransformInput'
    )
    EndpointInput_1: Optional[EndpointInput] = Field(None, alias='EndpointInput')


class MonitoringInputs(RootModel[List[MonitoringInput]]):
    root: List[MonitoringInput] = Field(..., max_length=1, min_length=1)


class MonitoringNetworkConfig(BaseModel):
    EnableInterContainerTrafficEncryption: Optional[Boolean] = None
    EnableNetworkIsolation: Optional[Boolean] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class MonitoringOutput(BaseModel):
    S3Output: MonitoringS3Output


class MonitoringOutputs(RootModel[List[MonitoringOutput]]):
    root: List[MonitoringOutput] = Field(..., max_length=1, min_length=1)


class NetworkConfig(BaseModel):
    EnableInterContainerTrafficEncryption: Optional[Boolean] = None
    EnableNetworkIsolation: Optional[Boolean] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class OfflineStoreConfig(BaseModel):
    DataCatalogConfig_1: Optional[DataCatalogConfig] = Field(
        None, alias='DataCatalogConfig'
    )
    DisableGlueTableCreation: Optional[Boolean] = None
    S3StorageConfig_1: S3StorageConfig = Field(..., alias='S3StorageConfig')
    TableFormat_1: Optional[TableFormat] = Field(None, alias='TableFormat')


class OutputConfig(BaseModel):
    CompilerOptions_1: Optional[CompilerOptions] = Field(None, alias='CompilerOptions')
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    S3OutputLocation: S3Uri
    TargetDevice_1: Optional[TargetDevice] = Field(None, alias='TargetDevice')
    TargetPlatform_1: Optional[TargetPlatform] = Field(None, alias='TargetPlatform')


class PendingProductionVariantSummary(BaseModel):
    AcceleratorType: Optional[ProductionVariantAcceleratorType] = None
    CurrentInstanceCount: Optional[TaskCount] = None
    CurrentServerlessConfig: Optional[ProductionVariantServerlessConfig] = None
    CurrentWeight: Optional[VariantWeight] = None
    DeployedImages_1: Optional[DeployedImages] = Field(None, alias='DeployedImages')
    DesiredInstanceCount: Optional[TaskCount] = None
    DesiredServerlessConfig: Optional[ProductionVariantServerlessConfig] = None
    DesiredWeight: Optional[VariantWeight] = None
    InstanceType: Optional[ProductionVariantInstanceType] = None
    VariantName_1: VariantName = Field(..., alias='VariantName')
    VariantStatus: Optional[ProductionVariantStatusList] = None


class PendingProductionVariantSummaryList(
    RootModel[List[PendingProductionVariantSummary]]
):
    root: List[PendingProductionVariantSummary] = Field(..., min_length=1)


class Pipeline(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    LastRunTime: Optional[Timestamp] = None
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )
    PipelineArn_1: Optional[PipelineArn] = Field(None, alias='PipelineArn')
    PipelineDescription_1: Optional[PipelineDescription] = Field(
        None, alias='PipelineDescription'
    )
    PipelineDisplayName: Optional[PipelineName] = None
    PipelineName_1: Optional[PipelineName] = Field(None, alias='PipelineName')
    PipelineStatus_1: Optional[PipelineStatus] = Field(None, alias='PipelineStatus')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Tags: Optional[TagList] = None


class PipelineExecution(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    FailureReason: Optional[PipelineExecutionFailureReason] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )
    PipelineArn_1: Optional[PipelineArn] = Field(None, alias='PipelineArn')
    PipelineExecutionArn_1: Optional[PipelineExecutionArn] = Field(
        None, alias='PipelineExecutionArn'
    )
    PipelineExecutionDescription_1: Optional[PipelineExecutionDescription] = Field(
        None, alias='PipelineExecutionDescription'
    )
    PipelineExecutionDisplayName: Optional[PipelineExecutionName] = None
    PipelineExecutionStatus_1: Optional[PipelineExecutionStatus] = Field(
        None, alias='PipelineExecutionStatus'
    )
    PipelineExperimentConfig_1: Optional[PipelineExperimentConfig] = Field(
        None, alias='PipelineExperimentConfig'
    )
    PipelineParameters: Optional[ParameterList] = None


class PipelineExecutionStepMetadata(BaseModel):
    AutoMLJob: Optional[AutoMLJobStepMetadata] = None
    Callback: Optional[CallbackStepMetadata] = None
    ClarifyCheck: Optional[ClarifyCheckStepMetadata] = None
    Condition: Optional[ConditionStepMetadata] = None
    EMR: Optional[EMRStepMetadata] = None
    Fail: Optional[FailStepMetadata] = None
    Lambda: Optional[LambdaStepMetadata] = None
    Model: Optional[ModelStepMetadata] = None
    ProcessingJob: Optional[ProcessingJobStepMetadata] = None
    QualityCheck: Optional[QualityCheckStepMetadata] = None
    RegisterModel: Optional[RegisterModelStepMetadata] = None
    TrainingJob: Optional[TrainingJobStepMetadata] = None
    TransformJob: Optional[TransformJobStepMetadata] = None
    TuningJob: Optional[TuningJobStepMetaData] = None


class ProcessingInput(BaseModel):
    AppManaged_1: Optional[AppManaged] = Field(None, alias='AppManaged')
    DatasetDefinition_1: Optional[DatasetDefinition] = Field(
        None, alias='DatasetDefinition'
    )
    InputName: String
    S3Input: Optional[ProcessingS3Input] = None


class ProcessingInputs(RootModel[List[ProcessingInput]]):
    root: List[ProcessingInput] = Field(..., max_length=10, min_length=0)


class ProcessingJobSummaries(RootModel[List[ProcessingJobSummary]]):
    root: List[ProcessingJobSummary]


class ProcessingOutput(BaseModel):
    AppManaged_1: Optional[AppManaged] = Field(None, alias='AppManaged')
    FeatureStoreOutput: Optional[ProcessingFeatureStoreOutput] = None
    OutputName: String
    S3Output: Optional[ProcessingS3Output] = None


class ProcessingOutputs(RootModel[List[ProcessingOutput]]):
    root: List[ProcessingOutput] = Field(..., max_length=10, min_length=0)


class ProductionVariant(BaseModel):
    AcceleratorType: Optional[ProductionVariantAcceleratorType] = None
    ContainerStartupHealthCheckTimeoutInSeconds: Optional[
        ProductionVariantContainerStartupHealthCheckTimeoutInSeconds
    ] = None
    CoreDumpConfig: Optional[ProductionVariantCoreDumpConfig] = None
    EnableSSMAccess: Optional[ProductionVariantSSMAccess] = None
    InitialInstanceCount: Optional[InitialTaskCount] = None
    InitialVariantWeight: Optional[VariantWeight] = None
    InstanceType: Optional[ProductionVariantInstanceType] = None
    ModelDataDownloadTimeoutInSeconds: Optional[
        ProductionVariantModelDataDownloadTimeoutInSeconds
    ] = None
    ModelName_1: ModelName = Field(..., alias='ModelName')
    ServerlessConfig: Optional[ProductionVariantServerlessConfig] = None
    VariantName_1: VariantName = Field(..., alias='VariantName')
    VolumeSizeInGB: Optional[ProductionVariantVolumeSizeInGB] = None


class ProductionVariantList(RootModel[List[ProductionVariant]]):
    root: List[ProductionVariant] = Field(..., max_length=10, min_length=1)


class Project(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    ProjectArn_1: Optional[ProjectArn] = Field(None, alias='ProjectArn')
    ProjectDescription: Optional[EntityDescription] = None
    ProjectId_1: Optional[ProjectId] = Field(None, alias='ProjectId')
    ProjectName: Optional[ProjectEntityName] = None
    ProjectStatus_1: Optional[ProjectStatus] = Field(None, alias='ProjectStatus')
    ServiceCatalogProvisionedProductDetails_1: Optional[
        ServiceCatalogProvisionedProductDetails
    ] = Field(None, alias='ServiceCatalogProvisionedProductDetails')
    ServiceCatalogProvisioningDetails_1: Optional[ServiceCatalogProvisioningDetails] = (
        Field(None, alias='ServiceCatalogProvisioningDetails')
    )
    Tags: Optional[TagList] = None


class QueryFilters(BaseModel):
    CreatedAfter: Optional[Timestamp] = None
    CreatedBefore: Optional[Timestamp] = None
    LineageTypes: Optional[QueryLineageTypes] = None
    ModifiedAfter: Optional[Timestamp] = None
    ModifiedBefore: Optional[Timestamp] = None
    Properties: Optional[QueryProperties] = None
    Types: Optional[QueryTypes] = None


class QueryLineageRequest(BaseModel):
    Direction_1: Optional[Direction] = Field(None, alias='Direction')
    Filters: Optional[QueryFilters] = None
    IncludeEdges: Optional[Boolean] = None
    MaxDepth: Optional[QueryLineageMaxDepth] = None
    MaxResults: Optional[QueryLineageMaxResults] = None
    NextToken: Optional[String8192] = None
    StartArns: Optional[QueryLineageStartArns] = None


class RSessionAppSettings(BaseModel):
    CustomImages_1: Optional[CustomImages] = Field(None, alias='CustomImages')
    DefaultResourceSpec: Optional[ResourceSpec] = None


class RStudioServerProDomainSettings(BaseModel):
    DefaultResourceSpec: Optional[ResourceSpec] = None
    DomainExecutionRoleArn: RoleArn
    RStudioConnectUrl: Optional[String] = None
    RStudioPackageManagerUrl: Optional[String] = None


class RStudioServerProDomainSettingsForUpdate(BaseModel):
    DefaultResourceSpec: Optional[ResourceSpec] = None
    DomainExecutionRoleArn: RoleArn
    RStudioConnectUrl: Optional[String] = None
    RStudioPackageManagerUrl: Optional[String] = None


class RecommendationJobInferenceBenchmark(BaseModel):
    EndpointConfiguration: Optional[EndpointOutputConfiguration] = None
    EndpointMetrics: Optional[InferenceMetrics] = None
    FailureReason: Optional[RecommendationFailureReason] = None
    Metrics: Optional[RecommendationMetrics] = None
    ModelConfiguration_1: ModelConfiguration = Field(..., alias='ModelConfiguration')


class RecommendationJobPayloadConfig(BaseModel):
    SamplePayloadUrl: Optional[String] = None
    SupportedContentTypes: Optional[RecommendationJobSupportedContentTypes] = None


class RegisterDevicesRequest(BaseModel):
    DeviceFleetName: EntityName
    Devices_1: Devices = Field(..., alias='Devices')
    Tags: Optional[TagList] = None


class RenderUiTemplateRequest(BaseModel):
    HumanTaskUiArn_1: Optional[HumanTaskUiArn] = Field(None, alias='HumanTaskUiArn')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Task: RenderableTask
    UiTemplate_1: Optional[UiTemplate] = Field(None, alias='UiTemplate')


class RenderUiTemplateResponse(BaseModel):
    Errors: RenderingErrorList
    RenderedContent: String


class SpaceSettings(BaseModel):
    JupyterServerAppSettings_1: Optional[JupyterServerAppSettings] = Field(
        None, alias='JupyterServerAppSettings'
    )
    KernelGatewayAppSettings_1: Optional[KernelGatewayAppSettings] = Field(
        None, alias='KernelGatewayAppSettings'
    )


class StopInferenceExperimentRequest(BaseModel):
    DesiredModelVariants: Optional[ModelVariantConfigList] = None
    DesiredState: Optional[InferenceExperimentStopDesiredState] = None
    ModelVariantActions: ModelVariantActionMap
    Name: InferenceExperimentName
    Reason: Optional[InferenceExperimentStatusReason] = None


class TrainingImageConfig(BaseModel):
    TrainingRepositoryAccessMode_1: TrainingRepositoryAccessMode = Field(
        ..., alias='TrainingRepositoryAccessMode'
    )
    TrainingRepositoryAuthConfig_1: Optional[TrainingRepositoryAuthConfig] = Field(
        None, alias='TrainingRepositoryAuthConfig'
    )


class TrainingJobSummaries(RootModel[List[TrainingJobSummary]]):
    root: List[TrainingJobSummary]


class TrainingSpecification(BaseModel):
    MetricDefinitions: Optional[MetricDefinitionList] = None
    SupportedHyperParameters: Optional[HyperParameterSpecifications] = None
    SupportedTrainingInstanceTypes: TrainingInstanceTypes
    SupportedTuningJobObjectiveMetrics: Optional[HyperParameterTuningJobObjectives] = (
        None
    )
    SupportsDistributedTraining: Optional[Boolean] = None
    TrainingChannels: ChannelSpecifications
    TrainingImage: ContainerImage
    TrainingImageDigest: Optional[ImageDigest] = None


class TrialComponentMetricSummaries(RootModel[List[TrialComponentMetricSummary]]):
    root: List[TrialComponentMetricSummary]


class TrialComponentSimpleSummary(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    TrialComponentArn_1: Optional[TrialComponentArn] = Field(
        None, alias='TrialComponentArn'
    )
    TrialComponentName: Optional[ExperimentEntityName] = None
    TrialComponentSource_1: Optional[TrialComponentSource] = Field(
        None, alias='TrialComponentSource'
    )


class TrialComponentSummary(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    DisplayName: Optional[ExperimentEntityName] = None
    EndTime: Optional[Timestamp] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    StartTime: Optional[Timestamp] = None
    Status: Optional[TrialComponentStatus] = None
    TrialComponentArn_1: Optional[TrialComponentArn] = Field(
        None, alias='TrialComponentArn'
    )
    TrialComponentName: Optional[ExperimentEntityName] = None
    TrialComponentSource_1: Optional[TrialComponentSource] = Field(
        None, alias='TrialComponentSource'
    )


class TrialSummaries(RootModel[List[TrialSummary]]):
    root: List[TrialSummary]


class UpdateEndpointInput(BaseModel):
    DeploymentConfig_1: Optional[DeploymentConfig] = Field(
        None, alias='DeploymentConfig'
    )
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    ExcludeRetainedVariantProperties: Optional[VariantPropertyList] = None
    RetainAllVariantProperties: Optional[Boolean] = None
    RetainDeploymentConfig: Optional[Boolean] = None


class UpdateFeatureGroupRequest(BaseModel):
    FeatureAdditions_1: Optional[FeatureAdditions] = Field(
        None, alias='FeatureAdditions'
    )
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')


class UpdateInferenceExperimentRequest(BaseModel):
    DataStorageConfig: Optional[InferenceExperimentDataStorageConfig] = None
    Description: Optional[InferenceExperimentDescription] = None
    ModelVariants: Optional[ModelVariantConfigList] = None
    Name: InferenceExperimentName
    Schedule: Optional[InferenceExperimentSchedule] = None
    ShadowModeConfig_1: Optional[ShadowModeConfig] = Field(
        None, alias='ShadowModeConfig'
    )


class UpdateModelPackageInput(BaseModel):
    AdditionalInferenceSpecificationsToAdd: Optional[
        AdditionalInferenceSpecifications
    ] = None
    ApprovalDescription_1: Optional[ApprovalDescription] = Field(
        None, alias='ApprovalDescription'
    )
    CustomerMetadataProperties: Optional[CustomerMetadataMap] = None
    CustomerMetadataPropertiesToRemove: Optional[CustomerMetadataKeyList] = None
    ModelApprovalStatus_1: Optional[ModelApprovalStatus] = Field(
        None, alias='ModelApprovalStatus'
    )
    ModelPackageArn_1: ModelPackageArn = Field(..., alias='ModelPackageArn')


class UpdateSpaceRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    SpaceName_1: SpaceName = Field(..., alias='SpaceName')
    SpaceSettings_1: Optional[SpaceSettings] = Field(None, alias='SpaceSettings')


class UpdateWorkforceRequest(BaseModel):
    OidcConfig_1: Optional[OidcConfig] = Field(None, alias='OidcConfig')
    SourceIpConfig_1: Optional[SourceIpConfig] = Field(None, alias='SourceIpConfig')
    WorkforceName_1: WorkforceName = Field(..., alias='WorkforceName')
    WorkforceVpcConfig: Optional[WorkforceVpcConfigRequest] = None


class UpdateWorkteamResponse(BaseModel):
    Workteam_1: Workteam = Field(..., alias='Workteam')


class UserSettings(BaseModel):
    CanvasAppSettings_1: Optional[CanvasAppSettings] = Field(
        None, alias='CanvasAppSettings'
    )
    ExecutionRole: Optional[RoleArn] = None
    JupyterServerAppSettings_1: Optional[JupyterServerAppSettings] = Field(
        None, alias='JupyterServerAppSettings'
    )
    KernelGatewayAppSettings_1: Optional[KernelGatewayAppSettings] = Field(
        None, alias='KernelGatewayAppSettings'
    )
    RSessionAppSettings_1: Optional[RSessionAppSettings] = Field(
        None, alias='RSessionAppSettings'
    )
    RStudioServerProAppSettings_1: Optional[RStudioServerProAppSettings] = Field(
        None, alias='RStudioServerProAppSettings'
    )
    SecurityGroups: Optional[SecurityGroupIds] = None
    SharingSettings_1: Optional[SharingSettings] = Field(None, alias='SharingSettings')
    TensorBoardAppSettings_1: Optional[TensorBoardAppSettings] = Field(
        None, alias='TensorBoardAppSettings'
    )


class Workforce(BaseModel):
    CognitoConfig_1: Optional[CognitoConfig] = Field(None, alias='CognitoConfig')
    CreateDate: Optional[Timestamp] = None
    FailureReason: Optional[WorkforceFailureReason] = None
    LastUpdatedDate: Optional[Timestamp] = None
    OidcConfig: Optional[OidcConfigForResponse] = None
    SourceIpConfig_1: Optional[SourceIpConfig] = Field(None, alias='SourceIpConfig')
    Status: Optional[WorkforceStatus] = None
    SubDomain: Optional[String] = None
    WorkforceArn_1: WorkforceArn = Field(..., alias='WorkforceArn')
    WorkforceName_1: WorkforceName = Field(..., alias='WorkforceName')
    WorkforceVpcConfig: Optional[WorkforceVpcConfigResponse] = None


class Workforces(RootModel[List[Workforce]]):
    root: List[Workforce]


class AlgorithmSpecification(BaseModel):
    AlgorithmName: Optional[ArnOrName] = None
    ContainerArguments: Optional[TrainingContainerArguments] = None
    ContainerEntrypoint: Optional[TrainingContainerEntrypoint] = None
    EnableSageMakerMetricsTimeSeries: Optional[Boolean] = None
    MetricDefinitions: Optional[MetricDefinitionList] = None
    TrainingImage: Optional[AlgorithmImage] = None
    TrainingImageConfig_1: Optional[TrainingImageConfig] = Field(
        None, alias='TrainingImageConfig'
    )
    TrainingInputMode_1: TrainingInputMode = Field(..., alias='TrainingInputMode')


class ArtifactSummaries(RootModel[List[ArtifactSummary]]):
    root: List[ArtifactSummary]


class AssociationSummaries(RootModel[List[AssociationSummary]]):
    root: List[AssociationSummary]


class AsyncInferenceConfig(BaseModel):
    ClientConfig: Optional[AsyncInferenceClientConfig] = None
    OutputConfig: AsyncInferenceOutputConfig


class AutoMLChannel(BaseModel):
    ChannelType: Optional[AutoMLChannelType] = None
    CompressionType_1: Optional[CompressionType] = Field(None, alias='CompressionType')
    ContentType_1: Optional[ContentType] = Field(None, alias='ContentType')
    DataSource: AutoMLDataSource
    TargetAttributeName_1: TargetAttributeName = Field(..., alias='TargetAttributeName')


class AutoMLInputDataConfig(RootModel[List[AutoMLChannel]]):
    root: List[AutoMLChannel] = Field(..., max_length=2, min_length=1)


class AutoMLJobConfig(BaseModel):
    CandidateGenerationConfig: Optional[AutoMLCandidateGenerationConfig] = None
    CompletionCriteria: Optional[AutoMLJobCompletionCriteria] = None
    DataSplitConfig: Optional[AutoMLDataSplitConfig] = None
    Mode: Optional[AutoMLMode] = None
    SecurityConfig: Optional[AutoMLSecurityConfig] = None


class BatchDescribeModelPackageSummary(BaseModel):
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    InferenceSpecification_1: InferenceSpecification = Field(
        ..., alias='InferenceSpecification'
    )
    ModelApprovalStatus_1: Optional[ModelApprovalStatus] = Field(
        None, alias='ModelApprovalStatus'
    )
    ModelPackageArn_1: ModelPackageArn = Field(..., alias='ModelPackageArn')
    ModelPackageDescription: Optional[EntityDescription] = None
    ModelPackageGroupName: EntityName
    ModelPackageStatus_1: ModelPackageStatus = Field(..., alias='ModelPackageStatus')
    ModelPackageVersion_1: Optional[ModelPackageVersion] = Field(
        None, alias='ModelPackageVersion'
    )


class CandidateProperties(BaseModel):
    CandidateArtifactLocations_1: Optional[CandidateArtifactLocations] = Field(
        None, alias='CandidateArtifactLocations'
    )
    CandidateMetrics: Optional[MetricDataList] = None


class Channel(BaseModel):
    ChannelName_1: ChannelName = Field(..., alias='ChannelName')
    CompressionType_1: Optional[CompressionType] = Field(None, alias='CompressionType')
    ContentType_1: Optional[ContentType] = Field(None, alias='ContentType')
    DataSource_1: DataSource = Field(..., alias='DataSource')
    InputMode: Optional[TrainingInputMode] = None
    RecordWrapperType: Optional[RecordWrapper] = None
    ShuffleConfig_1: Optional[ShuffleConfig] = Field(None, alias='ShuffleConfig')


class ClarifyExplainerConfig(BaseModel):
    EnableExplanations: Optional[ClarifyEnableExplanations] = None
    InferenceConfig: Optional[ClarifyInferenceConfig] = None
    ShapConfig: ClarifyShapConfig


class ContainerDefinition(BaseModel):
    ContainerHostname_1: Optional[ContainerHostname] = Field(
        None, alias='ContainerHostname'
    )
    Environment: Optional[EnvironmentMap] = None
    Image: Optional[ContainerImage] = None
    ImageConfig_1: Optional[ImageConfig] = Field(None, alias='ImageConfig')
    InferenceSpecificationName_1: Optional[InferenceSpecificationName] = Field(
        None, alias='InferenceSpecificationName'
    )
    Mode: Optional[ContainerMode] = None
    ModelDataUrl: Optional[Url] = None
    ModelPackageName: Optional[VersionedArnOrName] = None
    MultiModelConfig_1: Optional[MultiModelConfig] = Field(
        None, alias='MultiModelConfig'
    )


class ContainerDefinitionList(RootModel[List[ContainerDefinition]]):
    root: List[ContainerDefinition] = Field(..., max_length=15)


class CreateAutoMLJobRequest(BaseModel):
    AutoMLJobConfig_1: Optional[AutoMLJobConfig] = Field(None, alias='AutoMLJobConfig')
    AutoMLJobName_1: AutoMLJobName = Field(..., alias='AutoMLJobName')
    AutoMLJobObjective_1: Optional[AutoMLJobObjective] = Field(
        None, alias='AutoMLJobObjective'
    )
    GenerateCandidateDefinitionsOnly_1: Optional[GenerateCandidateDefinitionsOnly] = (
        Field(None, alias='GenerateCandidateDefinitionsOnly')
    )
    InputDataConfig: AutoMLInputDataConfig
    ModelDeployConfig_1: Optional[ModelDeployConfig] = Field(
        None, alias='ModelDeployConfig'
    )
    OutputDataConfig: AutoMLOutputDataConfig
    ProblemType_1: Optional[ProblemType] = Field(None, alias='ProblemType')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Tags: Optional[TagList] = None


class CreateCompilationJobRequest(BaseModel):
    CompilationJobName: EntityName
    InputConfig_1: Optional[InputConfig] = Field(None, alias='InputConfig')
    ModelPackageVersionArn: Optional[ModelPackageArn] = None
    OutputConfig_1: OutputConfig = Field(..., alias='OutputConfig')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition_1: StoppingCondition = Field(..., alias='StoppingCondition')
    Tags: Optional[TagList] = None
    VpcConfig: Optional[NeoVpcConfig] = None


class CreateEdgeDeploymentPlanRequest(BaseModel):
    DeviceFleetName: EntityName
    EdgeDeploymentPlanName: EntityName
    ModelConfigs: EdgeDeploymentModelConfigs
    Stages: Optional[DeploymentStages] = None
    Tags: Optional[TagList] = None


class CreateEdgeDeploymentStageRequest(BaseModel):
    EdgeDeploymentPlanName: EntityName
    Stages: DeploymentStages


class CreateEndpointInput(BaseModel):
    DeploymentConfig_1: Optional[DeploymentConfig] = Field(
        None, alias='DeploymentConfig'
    )
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    Tags: Optional[TagList] = None


class CreateFeatureGroupRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    EventTimeFeatureName: FeatureName
    FeatureDefinitions_1: FeatureDefinitions = Field(..., alias='FeatureDefinitions')
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')
    OfflineStoreConfig_1: Optional[OfflineStoreConfig] = Field(
        None, alias='OfflineStoreConfig'
    )
    OnlineStoreConfig_1: Optional[OnlineStoreConfig] = Field(
        None, alias='OnlineStoreConfig'
    )
    RecordIdentifierFeatureName: FeatureName
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Tags: Optional[TagList] = None


class CreateFlowDefinitionRequest(BaseModel):
    FlowDefinitionName_1: FlowDefinitionName = Field(..., alias='FlowDefinitionName')
    HumanLoopActivationConfig_1: Optional[HumanLoopActivationConfig] = Field(
        None, alias='HumanLoopActivationConfig'
    )
    HumanLoopConfig_1: HumanLoopConfig = Field(..., alias='HumanLoopConfig')
    HumanLoopRequestSource_1: Optional[HumanLoopRequestSource] = Field(
        None, alias='HumanLoopRequestSource'
    )
    OutputConfig: FlowDefinitionOutputConfig
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Tags: Optional[TagList] = None


class CreateInferenceExperimentRequest(BaseModel):
    DataStorageConfig: Optional[InferenceExperimentDataStorageConfig] = None
    Description: Optional[InferenceExperimentDescription] = None
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    KmsKey: Optional[KmsKeyId] = None
    ModelVariants: ModelVariantConfigList
    Name: InferenceExperimentName
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Schedule: Optional[InferenceExperimentSchedule] = None
    ShadowModeConfig_1: ShadowModeConfig = Field(..., alias='ShadowModeConfig')
    Tags: Optional[TagList] = None
    Type: InferenceExperimentType


class CreateModelInput(BaseModel):
    Containers: Optional[ContainerDefinitionList] = None
    EnableNetworkIsolation: Optional[Boolean] = None
    ExecutionRoleArn: RoleArn
    InferenceExecutionConfig_1: Optional[InferenceExecutionConfig] = Field(
        None, alias='InferenceExecutionConfig'
    )
    ModelName_1: ModelName = Field(..., alias='ModelName')
    PrimaryContainer: Optional[ContainerDefinition] = None
    Tags: Optional[TagList] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class CreateSpaceRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    SpaceName_1: SpaceName = Field(..., alias='SpaceName')
    SpaceSettings_1: Optional[SpaceSettings] = Field(None, alias='SpaceSettings')
    Tags: Optional[TagList] = None


class CreateUserProfileRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    SingleSignOnUserIdentifier_1: Optional[SingleSignOnUserIdentifier] = Field(
        None, alias='SingleSignOnUserIdentifier'
    )
    SingleSignOnUserValue: Optional[String256] = None
    Tags: Optional[TagList] = None
    UserProfileName_1: UserProfileName = Field(..., alias='UserProfileName')
    UserSettings_1: Optional[UserSettings] = Field(None, alias='UserSettings')


class DefaultSpaceSettings(BaseModel):
    ExecutionRole: Optional[RoleArn] = None
    JupyterServerAppSettings_1: Optional[JupyterServerAppSettings] = Field(
        None, alias='JupyterServerAppSettings'
    )
    KernelGatewayAppSettings_1: Optional[KernelGatewayAppSettings] = Field(
        None, alias='KernelGatewayAppSettings'
    )
    SecurityGroups: Optional[SecurityGroupIds] = None


class DeploymentStageStatusSummaries(RootModel[List[DeploymentStageStatusSummary]]):
    root: List[DeploymentStageStatusSummary]


class DescribeCompilationJobResponse(BaseModel):
    CompilationEndTime: Optional[Timestamp] = None
    CompilationJobArn_1: CompilationJobArn = Field(..., alias='CompilationJobArn')
    CompilationJobName: EntityName
    CompilationJobStatus_1: CompilationJobStatus = Field(
        ..., alias='CompilationJobStatus'
    )
    CompilationStartTime: Optional[Timestamp] = None
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    FailureReason_1: FailureReason = Field(..., alias='FailureReason')
    InferenceImage_1: Optional[InferenceImage] = Field(None, alias='InferenceImage')
    InputConfig_1: InputConfig = Field(..., alias='InputConfig')
    LastModifiedTime_1: LastModifiedTime = Field(..., alias='LastModifiedTime')
    ModelArtifacts_1: ModelArtifacts = Field(..., alias='ModelArtifacts')
    ModelDigests_1: Optional[ModelDigests] = Field(None, alias='ModelDigests')
    ModelPackageVersionArn: Optional[ModelPackageArn] = None
    OutputConfig_1: OutputConfig = Field(..., alias='OutputConfig')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition_1: StoppingCondition = Field(..., alias='StoppingCondition')
    VpcConfig: Optional[NeoVpcConfig] = None


class DescribeEdgeDeploymentPlanResponse(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DeviceFleetName: EntityName
    EdgeDeploymentFailed: Optional[Integer] = None
    EdgeDeploymentPending: Optional[Integer] = None
    EdgeDeploymentPlanArn_1: EdgeDeploymentPlanArn = Field(
        ..., alias='EdgeDeploymentPlanArn'
    )
    EdgeDeploymentPlanName: EntityName
    EdgeDeploymentSuccess: Optional[Integer] = None
    LastModifiedTime: Optional[Timestamp] = None
    ModelConfigs: EdgeDeploymentModelConfigs
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Stages: DeploymentStageStatusSummaries


class DescribeFeatureGroupResponse(BaseModel):
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    Description_1: Optional[Description] = Field(None, alias='Description')
    EventTimeFeatureName: FeatureName
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    FeatureDefinitions_1: FeatureDefinitions = Field(..., alias='FeatureDefinitions')
    FeatureGroupArn_1: FeatureGroupArn = Field(..., alias='FeatureGroupArn')
    FeatureGroupName_1: FeatureGroupName = Field(..., alias='FeatureGroupName')
    FeatureGroupStatus_1: Optional[FeatureGroupStatus] = Field(
        None, alias='FeatureGroupStatus'
    )
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    LastUpdateStatus_1: Optional[LastUpdateStatus] = Field(
        None, alias='LastUpdateStatus'
    )
    NextToken_1: NextToken = Field(..., alias='NextToken')
    OfflineStoreConfig_1: Optional[OfflineStoreConfig] = Field(
        None, alias='OfflineStoreConfig'
    )
    OfflineStoreStatus_1: Optional[OfflineStoreStatus] = Field(
        None, alias='OfflineStoreStatus'
    )
    OnlineStoreConfig_1: Optional[OnlineStoreConfig] = Field(
        None, alias='OnlineStoreConfig'
    )
    OnlineStoreTotalSizeBytes_1: Optional[OnlineStoreTotalSizeBytes] = Field(
        None, alias='OnlineStoreTotalSizeBytes'
    )
    RecordIdentifierFeatureName: FeatureName
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class DescribeFlowDefinitionResponse(BaseModel):
    CreationTime: Timestamp
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    FlowDefinitionArn_1: FlowDefinitionArn = Field(..., alias='FlowDefinitionArn')
    FlowDefinitionName_1: FlowDefinitionName = Field(..., alias='FlowDefinitionName')
    FlowDefinitionStatus_1: FlowDefinitionStatus = Field(
        ..., alias='FlowDefinitionStatus'
    )
    HumanLoopActivationConfig_1: Optional[HumanLoopActivationConfig] = Field(
        None, alias='HumanLoopActivationConfig'
    )
    HumanLoopConfig_1: HumanLoopConfig = Field(..., alias='HumanLoopConfig')
    HumanLoopRequestSource_1: Optional[HumanLoopRequestSource] = Field(
        None, alias='HumanLoopRequestSource'
    )
    OutputConfig: FlowDefinitionOutputConfig
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')


class DescribeInferenceExperimentResponse(BaseModel):
    Arn: InferenceExperimentArn
    CompletionTime: Optional[Timestamp] = None
    CreationTime: Optional[Timestamp] = None
    DataStorageConfig: Optional[InferenceExperimentDataStorageConfig] = None
    Description: Optional[InferenceExperimentDescription] = None
    EndpointMetadata_1: EndpointMetadata = Field(..., alias='EndpointMetadata')
    KmsKey: Optional[KmsKeyId] = None
    LastModifiedTime: Optional[Timestamp] = None
    ModelVariants: ModelVariantConfigSummaryList
    Name: InferenceExperimentName
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Schedule: Optional[InferenceExperimentSchedule] = None
    ShadowModeConfig_1: Optional[ShadowModeConfig] = Field(
        None, alias='ShadowModeConfig'
    )
    Status: InferenceExperimentStatus
    StatusReason: Optional[InferenceExperimentStatusReason] = None
    Type: InferenceExperimentType


class DescribeModelOutput(BaseModel):
    Containers: Optional[ContainerDefinitionList] = None
    CreationTime: Timestamp
    EnableNetworkIsolation: Optional[Boolean] = None
    ExecutionRoleArn: RoleArn
    InferenceExecutionConfig_1: Optional[InferenceExecutionConfig] = Field(
        None, alias='InferenceExecutionConfig'
    )
    ModelArn_1: ModelArn = Field(..., alias='ModelArn')
    ModelName_1: ModelName = Field(..., alias='ModelName')
    PrimaryContainer: Optional[ContainerDefinition] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class DescribeSpaceResponse(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DomainId_1: Optional[DomainId] = Field(None, alias='DomainId')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    HomeEfsFileSystemUid: Optional[EfsUid] = None
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    SpaceArn_1: Optional[SpaceArn] = Field(None, alias='SpaceArn')
    SpaceName_1: Optional[SpaceName] = Field(None, alias='SpaceName')
    SpaceSettings_1: Optional[SpaceSettings] = Field(None, alias='SpaceSettings')
    Status: Optional[SpaceStatus] = None


class DescribeTrialComponentResponse(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    DisplayName: Optional[ExperimentEntityName] = None
    EndTime: Optional[Timestamp] = None
    InputArtifacts: Optional[TrialComponentArtifacts] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    LineageGroupArn_1: Optional[LineageGroupArn] = Field(None, alias='LineageGroupArn')
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    Metrics: Optional[TrialComponentMetricSummaries] = None
    OutputArtifacts: Optional[TrialComponentArtifacts] = None
    Parameters: Optional[TrialComponentParameters] = None
    Source: Optional[TrialComponentSource] = None
    Sources: Optional[TrialComponentSources] = None
    StartTime: Optional[Timestamp] = None
    Status: Optional[TrialComponentStatus] = None
    TrialComponentArn_1: Optional[TrialComponentArn] = Field(
        None, alias='TrialComponentArn'
    )
    TrialComponentName: Optional[ExperimentEntityName] = None


class DescribeUserProfileResponse(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DomainId_1: Optional[DomainId] = Field(None, alias='DomainId')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    HomeEfsFileSystemUid: Optional[EfsUid] = None
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    SingleSignOnUserIdentifier_1: Optional[SingleSignOnUserIdentifier] = Field(
        None, alias='SingleSignOnUserIdentifier'
    )
    SingleSignOnUserValue: Optional[String256] = None
    Status: Optional[UserProfileStatus] = None
    UserProfileArn_1: Optional[UserProfileArn] = Field(None, alias='UserProfileArn')
    UserProfileName_1: Optional[UserProfileName] = Field(None, alias='UserProfileName')
    UserSettings_1: Optional[UserSettings] = Field(None, alias='UserSettings')


class DescribeWorkforceResponse(BaseModel):
    Workforce_1: Workforce = Field(..., alias='Workforce')


class DeviceSummary(BaseModel):
    AgentVersion: Optional[EdgeVersion] = None
    Description: Optional[DeviceDescription] = None
    DeviceArn_1: DeviceArn = Field(..., alias='DeviceArn')
    DeviceFleetName: Optional[EntityName] = None
    DeviceName: EntityName
    IotThingName: Optional[ThingName] = None
    LatestHeartbeat: Optional[Timestamp] = None
    Models: Optional[EdgeModelSummaries] = None
    RegistrationTime: Optional[Timestamp] = None


class DomainSettings(BaseModel):
    ExecutionRoleIdentityConfig_1: Optional[ExecutionRoleIdentityConfig] = Field(
        None, alias='ExecutionRoleIdentityConfig'
    )
    RStudioServerProDomainSettings_1: Optional[RStudioServerProDomainSettings] = Field(
        None, alias='RStudioServerProDomainSettings'
    )
    SecurityGroupIds: Optional[DomainSecurityGroupIds] = None


class DomainSettingsForUpdate(BaseModel):
    ExecutionRoleIdentityConfig_1: Optional[ExecutionRoleIdentityConfig] = Field(
        None, alias='ExecutionRoleIdentityConfig'
    )
    RStudioServerProDomainSettingsForUpdate_1: Optional[
        RStudioServerProDomainSettingsForUpdate
    ] = Field(None, alias='RStudioServerProDomainSettingsForUpdate')
    SecurityGroupIds: Optional[DomainSecurityGroupIds] = None


class DriftCheckBaselines(BaseModel):
    Bias: Optional[DriftCheckBias] = None
    Explainability: Optional[DriftCheckExplainability] = None
    ModelDataQuality: Optional[DriftCheckModelDataQuality] = None
    ModelQuality: Optional[DriftCheckModelQuality] = None


class EndpointInputConfiguration(BaseModel):
    EnvironmentParameterRanges_1: Optional[EnvironmentParameterRanges] = Field(
        None, alias='EnvironmentParameterRanges'
    )
    InferenceSpecificationName_1: Optional[InferenceSpecificationName] = Field(
        None, alias='InferenceSpecificationName'
    )
    InstanceType: ProductionVariantInstanceType


class EndpointInputConfigurations(RootModel[List[EndpointInputConfiguration]]):
    root: List[EndpointInputConfiguration] = Field(..., max_length=10, min_length=1)


class ExplainerConfig(BaseModel):
    ClarifyExplainerConfig_1: Optional[ClarifyExplainerConfig] = Field(
        None, alias='ClarifyExplainerConfig'
    )


class FeatureGroup(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    Description_1: Optional[Description] = Field(None, alias='Description')
    EventTimeFeatureName: Optional[FeatureName] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    FeatureDefinitions_1: Optional[FeatureDefinitions] = Field(
        None, alias='FeatureDefinitions'
    )
    FeatureGroupArn_1: Optional[FeatureGroupArn] = Field(None, alias='FeatureGroupArn')
    FeatureGroupName_1: Optional[FeatureGroupName] = Field(
        None, alias='FeatureGroupName'
    )
    FeatureGroupStatus_1: Optional[FeatureGroupStatus] = Field(
        None, alias='FeatureGroupStatus'
    )
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    LastUpdateStatus_1: Optional[LastUpdateStatus] = Field(
        None, alias='LastUpdateStatus'
    )
    OfflineStoreConfig_1: Optional[OfflineStoreConfig] = Field(
        None, alias='OfflineStoreConfig'
    )
    OfflineStoreStatus_1: Optional[OfflineStoreStatus] = Field(
        None, alias='OfflineStoreStatus'
    )
    OnlineStoreConfig_1: Optional[OnlineStoreConfig] = Field(
        None, alias='OnlineStoreConfig'
    )
    RecordIdentifierFeatureName: Optional[FeatureName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Tags: Optional[TagList] = None


class FeatureGroupSummaries(RootModel[List[FeatureGroupSummary]]):
    root: List[FeatureGroupSummary]


class HyperParameterTuningJobConfig(BaseModel):
    HyperParameterTuningJobObjective_1: Optional[HyperParameterTuningJobObjective] = (
        Field(None, alias='HyperParameterTuningJobObjective')
    )
    ParameterRanges_1: Optional[ParameterRanges] = Field(None, alias='ParameterRanges')
    RandomSeed_1: Optional[RandomSeed] = Field(None, alias='RandomSeed')
    ResourceLimits_1: ResourceLimits = Field(..., alias='ResourceLimits')
    Strategy: HyperParameterTuningJobStrategyType
    StrategyConfig: Optional[HyperParameterTuningJobStrategyConfig] = None
    TrainingJobEarlyStoppingType_1: Optional[TrainingJobEarlyStoppingType] = Field(
        None, alias='TrainingJobEarlyStoppingType'
    )
    TuningJobCompletionCriteria_1: Optional[TuningJobCompletionCriteria] = Field(
        None, alias='TuningJobCompletionCriteria'
    )


class InferenceRecommendationsJobStep(BaseModel):
    InferenceBenchmark: Optional[RecommendationJobInferenceBenchmark] = None
    JobName: RecommendationJobName
    Status: RecommendationJobStatus
    StepType: RecommendationStepType


class InferenceRecommendationsJobSteps(
    RootModel[List[InferenceRecommendationsJobStep]]
):
    root: List[InferenceRecommendationsJobStep]


class InputDataConfig(RootModel[List[Channel]]):
    root: List[Channel] = Field(..., max_length=20, min_length=1)


class LabelingJobAlgorithmsConfig(BaseModel):
    InitialActiveLearningModelArn: Optional[ModelArn] = None
    LabelingJobAlgorithmSpecificationArn_1: LabelingJobAlgorithmSpecificationArn = (
        Field(..., alias='LabelingJobAlgorithmSpecificationArn')
    )
    LabelingJobResourceConfig_1: Optional[LabelingJobResourceConfig] = Field(
        None, alias='LabelingJobResourceConfig'
    )


class ListArtifactsResponse(BaseModel):
    ArtifactSummaries_1: Optional[ArtifactSummaries] = Field(
        None, alias='ArtifactSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAssociationsResponse(BaseModel):
    AssociationSummaries_1: Optional[AssociationSummaries] = Field(
        None, alias='AssociationSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFeatureGroupsResponse(BaseModel):
    FeatureGroupSummaries_1: FeatureGroupSummaries = Field(
        ..., alias='FeatureGroupSummaries'
    )
    NextToken_1: NextToken = Field(..., alias='NextToken')


class ListInferenceRecommendationsJobStepsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Steps: Optional[InferenceRecommendationsJobSteps] = None


class ListModelMetadataResponse(BaseModel):
    ModelMetadataSummaries_1: ModelMetadataSummaries = Field(
        ..., alias='ModelMetadataSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMonitoringAlertHistoryResponse(BaseModel):
    MonitoringAlertHistory: Optional[MonitoringAlertHistoryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListProcessingJobsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ProcessingJobSummaries_1: ProcessingJobSummaries = Field(
        ..., alias='ProcessingJobSummaries'
    )


class ListTrainingJobsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TrainingJobSummaries_1: TrainingJobSummaries = Field(
        ..., alias='TrainingJobSummaries'
    )


class ListTrialsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TrialSummaries_1: Optional[TrialSummaries] = Field(None, alias='TrialSummaries')


class ListWorkforcesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Workforces_1: Workforces = Field(..., alias='Workforces')


class Model(BaseModel):
    Containers: Optional[ContainerDefinitionList] = None
    CreationTime: Optional[Timestamp] = None
    EnableNetworkIsolation: Optional[Boolean] = None
    ExecutionRoleArn: Optional[RoleArn] = None
    InferenceExecutionConfig_1: Optional[InferenceExecutionConfig] = Field(
        None, alias='InferenceExecutionConfig'
    )
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    PrimaryContainer: Optional[ContainerDefinition] = None
    Tags: Optional[TagList] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class ModelPackage(BaseModel):
    AdditionalInferenceSpecifications_1: Optional[AdditionalInferenceSpecifications] = (
        Field(None, alias='AdditionalInferenceSpecifications')
    )
    ApprovalDescription_1: Optional[ApprovalDescription] = Field(
        None, alias='ApprovalDescription'
    )
    CertifyForMarketplace_1: Optional[CertifyForMarketplace] = Field(
        None, alias='CertifyForMarketplace'
    )
    CreatedBy: Optional[UserContext] = None
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    CustomerMetadataProperties: Optional[CustomerMetadataMap] = None
    Domain: Optional[String] = None
    DriftCheckBaselines_1: Optional[DriftCheckBaselines] = Field(
        None, alias='DriftCheckBaselines'
    )
    InferenceSpecification_1: Optional[InferenceSpecification] = Field(
        None, alias='InferenceSpecification'
    )
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    ModelApprovalStatus_1: Optional[ModelApprovalStatus] = Field(
        None, alias='ModelApprovalStatus'
    )
    ModelMetrics_1: Optional[ModelMetrics] = Field(None, alias='ModelMetrics')
    ModelPackageArn_1: Optional[ModelPackageArn] = Field(None, alias='ModelPackageArn')
    ModelPackageDescription: Optional[EntityDescription] = None
    ModelPackageGroupName: Optional[EntityName] = None
    ModelPackageName: Optional[EntityName] = None
    ModelPackageStatus_1: Optional[ModelPackageStatus] = Field(
        None, alias='ModelPackageStatus'
    )
    ModelPackageStatusDetails_1: Optional[ModelPackageStatusDetails] = Field(
        None, alias='ModelPackageStatusDetails'
    )
    ModelPackageVersion_1: Optional[ModelPackageVersion] = Field(
        None, alias='ModelPackageVersion'
    )
    SamplePayloadUrl: Optional[String] = None
    SourceAlgorithmSpecification_1: Optional[SourceAlgorithmSpecification] = Field(
        None, alias='SourceAlgorithmSpecification'
    )
    Tags: Optional[TagList] = None
    Task: Optional[String] = None
    ValidationSpecification: Optional[ModelPackageValidationSpecification] = None


class ModelPackageSummaries(
    RootModel[Optional[Dict[str, BatchDescribeModelPackageSummary]]]
):
    root: Optional[Dict[str, BatchDescribeModelPackageSummary]] = None


class MonitoringOutputConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    MonitoringOutputs_1: MonitoringOutputs = Field(..., alias='MonitoringOutputs')


class PendingDeploymentSummary(BaseModel):
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')
    ProductionVariants: Optional[PendingProductionVariantSummaryList] = None
    ShadowProductionVariants: Optional[PendingProductionVariantSummaryList] = None
    StartTime: Optional[Timestamp] = None


class PipelineExecutionStep(BaseModel):
    AttemptCount: Optional[IntegerValue] = None
    CacheHitResult_1: Optional[CacheHitResult] = Field(None, alias='CacheHitResult')
    EndTime: Optional[Timestamp] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    Metadata: Optional[PipelineExecutionStepMetadata] = None
    StartTime: Optional[Timestamp] = None
    StepDescription_1: Optional[StepDescription] = Field(None, alias='StepDescription')
    StepDisplayName_1: Optional[StepDisplayName] = Field(None, alias='StepDisplayName')
    StepName_1: Optional[StepName] = Field(None, alias='StepName')
    StepStatus_1: Optional[StepStatus] = Field(None, alias='StepStatus')


class PipelineExecutionStepList(RootModel[List[PipelineExecutionStep]]):
    root: List[PipelineExecutionStep] = Field(..., max_length=100, min_length=0)


class ProcessingOutputConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    Outputs: ProcessingOutputs


class RecommendationJobContainerConfig(BaseModel):
    DataInputConfig: Optional[RecommendationJobDataInputConfig] = None
    Domain: Optional[String] = None
    Framework: Optional[String] = None
    FrameworkVersion: Optional[String] = None
    NearestModelName: Optional[String] = None
    PayloadConfig: Optional[RecommendationJobPayloadConfig] = None
    SupportedInstanceTypes: Optional[RecommendationJobSupportedInstanceTypes] = None
    Task: Optional[String] = None


class RecommendationJobInputConfig(BaseModel):
    ContainerConfig: Optional[RecommendationJobContainerConfig] = None
    EndpointConfigurations: Optional[EndpointInputConfigurations] = None
    Endpoints_1: Optional[Endpoints] = Field(None, alias='Endpoints')
    JobDurationInSeconds_1: Optional[JobDurationInSeconds] = Field(
        None, alias='JobDurationInSeconds'
    )
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    ModelPackageVersionArn: Optional[ModelPackageArn] = None
    ResourceLimit: Optional[RecommendationJobResourceLimit] = None
    TrafficPattern_1: Optional[TrafficPattern] = Field(None, alias='TrafficPattern')
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig: Optional[RecommendationJobVpcConfig] = None


class TrainingJob(BaseModel):
    AlgorithmSpecification_1: Optional[AlgorithmSpecification] = Field(
        None, alias='AlgorithmSpecification'
    )
    AutoMLJobArn_1: Optional[AutoMLJobArn] = Field(None, alias='AutoMLJobArn')
    BillableTimeInSeconds_1: Optional[BillableTimeInSeconds] = Field(
        None, alias='BillableTimeInSeconds'
    )
    CheckpointConfig_1: Optional[CheckpointConfig] = Field(
        None, alias='CheckpointConfig'
    )
    CreationTime: Optional[Timestamp] = None
    DebugHookConfig_1: Optional[DebugHookConfig] = Field(None, alias='DebugHookConfig')
    DebugRuleConfigurations_1: Optional[DebugRuleConfigurations] = Field(
        None, alias='DebugRuleConfigurations'
    )
    DebugRuleEvaluationStatuses_1: Optional[DebugRuleEvaluationStatuses] = Field(
        None, alias='DebugRuleEvaluationStatuses'
    )
    EnableInterContainerTrafficEncryption: Optional[Boolean] = None
    EnableManagedSpotTraining: Optional[Boolean] = None
    EnableNetworkIsolation: Optional[Boolean] = None
    Environment: Optional[TrainingEnvironmentMap] = None
    ExperimentConfig_1: Optional[ExperimentConfig] = Field(
        None, alias='ExperimentConfig'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    FinalMetricDataList_1: Optional[FinalMetricDataList] = Field(
        None, alias='FinalMetricDataList'
    )
    HyperParameters_1: Optional[HyperParameters] = Field(None, alias='HyperParameters')
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    LabelingJobArn_1: Optional[LabelingJobArn] = Field(None, alias='LabelingJobArn')
    LastModifiedTime: Optional[Timestamp] = None
    ModelArtifacts_1: Optional[ModelArtifacts] = Field(None, alias='ModelArtifacts')
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    ResourceConfig_1: Optional[ResourceConfig] = Field(None, alias='ResourceConfig')
    RetryStrategy_1: Optional[RetryStrategy] = Field(None, alias='RetryStrategy')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    SecondaryStatus_1: Optional[SecondaryStatus] = Field(None, alias='SecondaryStatus')
    SecondaryStatusTransitions_1: Optional[SecondaryStatusTransitions] = Field(
        None, alias='SecondaryStatusTransitions'
    )
    StoppingCondition_1: Optional[StoppingCondition] = Field(
        None, alias='StoppingCondition'
    )
    Tags: Optional[TagList] = None
    TensorBoardOutputConfig_1: Optional[TensorBoardOutputConfig] = Field(
        None, alias='TensorBoardOutputConfig'
    )
    TrainingEndTime: Optional[Timestamp] = None
    TrainingJobArn_1: Optional[TrainingJobArn] = Field(None, alias='TrainingJobArn')
    TrainingJobName_1: Optional[TrainingJobName] = Field(None, alias='TrainingJobName')
    TrainingJobStatus_1: Optional[TrainingJobStatus] = Field(
        None, alias='TrainingJobStatus'
    )
    TrainingStartTime: Optional[Timestamp] = None
    TrainingTimeInSeconds_1: Optional[TrainingTimeInSeconds] = Field(
        None, alias='TrainingTimeInSeconds'
    )
    TuningJobArn: Optional[HyperParameterTuningJobArn] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class TrainingJobDefinition(BaseModel):
    HyperParameters_1: Optional[HyperParameters] = Field(None, alias='HyperParameters')
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    ResourceConfig_1: ResourceConfig = Field(..., alias='ResourceConfig')
    StoppingCondition_1: StoppingCondition = Field(..., alias='StoppingCondition')
    TrainingInputMode_1: TrainingInputMode = Field(..., alias='TrainingInputMode')


class TrialComponentSimpleSummaries(RootModel[List[TrialComponentSimpleSummary]]):
    root: List[TrialComponentSimpleSummary]


class TrialComponentSummaries(RootModel[List[TrialComponentSummary]]):
    root: List[TrialComponentSummary]


class UpdateDomainRequest(BaseModel):
    AppSecurityGroupManagement_1: Optional[AppSecurityGroupManagement] = Field(
        None, alias='AppSecurityGroupManagement'
    )
    DefaultSpaceSettings_1: Optional[DefaultSpaceSettings] = Field(
        None, alias='DefaultSpaceSettings'
    )
    DefaultUserSettings: Optional[UserSettings] = None
    DomainId_1: DomainId = Field(..., alias='DomainId')
    DomainSettingsForUpdate_1: Optional[DomainSettingsForUpdate] = Field(
        None, alias='DomainSettingsForUpdate'
    )


class UpdateUserProfileRequest(BaseModel):
    DomainId_1: DomainId = Field(..., alias='DomainId')
    UserProfileName_1: UserProfileName = Field(..., alias='UserProfileName')
    UserSettings_1: Optional[UserSettings] = Field(None, alias='UserSettings')


class UpdateWorkforceResponse(BaseModel):
    Workforce_1: Workforce = Field(..., alias='Workforce')


class AlgorithmValidationProfile(BaseModel):
    ProfileName: EntityName
    TrainingJobDefinition_1: TrainingJobDefinition = Field(
        ..., alias='TrainingJobDefinition'
    )
    TransformJobDefinition_1: Optional[TransformJobDefinition] = Field(
        None, alias='TransformJobDefinition'
    )


class AlgorithmValidationProfiles(RootModel[List[AlgorithmValidationProfile]]):
    root: List[AlgorithmValidationProfile] = Field(..., max_length=1, min_length=1)


class AlgorithmValidationSpecification(BaseModel):
    ValidationProfiles: AlgorithmValidationProfiles
    ValidationRole: RoleArn


class AutoMLCandidate(BaseModel):
    CandidateName_1: CandidateName = Field(..., alias='CandidateName')
    CandidateProperties_1: Optional[CandidateProperties] = Field(
        None, alias='CandidateProperties'
    )
    CandidateStatus_1: CandidateStatus = Field(..., alias='CandidateStatus')
    CandidateSteps_1: CandidateSteps = Field(..., alias='CandidateSteps')
    CreationTime: Timestamp
    EndTime: Optional[Timestamp] = None
    FailureReason: Optional[AutoMLFailureReason] = None
    FinalAutoMLJobObjectiveMetric_1: Optional[FinalAutoMLJobObjectiveMetric] = Field(
        None, alias='FinalAutoMLJobObjectiveMetric'
    )
    InferenceContainerDefinitions: Optional[AutoMLInferenceContainerDefinitions] = None
    InferenceContainers: Optional[AutoMLContainerDefinitions] = None
    LastModifiedTime: Timestamp
    ObjectiveStatus_1: ObjectiveStatus = Field(..., alias='ObjectiveStatus')


class AutoMLCandidates(RootModel[List[AutoMLCandidate]]):
    root: List[AutoMLCandidate]


class BatchDescribeModelPackageOutput(BaseModel):
    BatchDescribeModelPackageErrorMap_1: Optional[BatchDescribeModelPackageErrorMap] = (
        Field(None, alias='BatchDescribeModelPackageErrorMap')
    )
    ModelPackageSummaries_1: Optional[ModelPackageSummaries] = Field(
        None, alias='ModelPackageSummaries'
    )


class CreateAlgorithmInput(BaseModel):
    AlgorithmDescription: Optional[EntityDescription] = None
    AlgorithmName: EntityName
    CertifyForMarketplace_1: Optional[CertifyForMarketplace] = Field(
        None, alias='CertifyForMarketplace'
    )
    InferenceSpecification_1: Optional[InferenceSpecification] = Field(
        None, alias='InferenceSpecification'
    )
    Tags: Optional[TagList] = None
    TrainingSpecification_1: TrainingSpecification = Field(
        ..., alias='TrainingSpecification'
    )
    ValidationSpecification: Optional[AlgorithmValidationSpecification] = None


class CreateDataQualityJobDefinitionRequest(BaseModel):
    DataQualityAppSpecification_1: DataQualityAppSpecification = Field(
        ..., alias='DataQualityAppSpecification'
    )
    DataQualityBaselineConfig_1: Optional[DataQualityBaselineConfig] = Field(
        None, alias='DataQualityBaselineConfig'
    )
    DataQualityJobInput_1: DataQualityJobInput = Field(..., alias='DataQualityJobInput')
    DataQualityJobOutputConfig: MonitoringOutputConfig
    JobDefinitionName: MonitoringJobDefinitionName
    JobResources: MonitoringResources
    NetworkConfig: Optional[MonitoringNetworkConfig] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[MonitoringStoppingCondition] = None
    Tags: Optional[TagList] = None


class CreateDomainRequest(BaseModel):
    AppNetworkAccessType_1: Optional[AppNetworkAccessType] = Field(
        None, alias='AppNetworkAccessType'
    )
    AppSecurityGroupManagement_1: Optional[AppSecurityGroupManagement] = Field(
        None, alias='AppSecurityGroupManagement'
    )
    AuthMode_1: AuthMode = Field(..., alias='AuthMode')
    DefaultSpaceSettings_1: Optional[DefaultSpaceSettings] = Field(
        None, alias='DefaultSpaceSettings'
    )
    DefaultUserSettings: UserSettings
    DomainName_1: DomainName = Field(..., alias='DomainName')
    DomainSettings_1: Optional[DomainSettings] = Field(None, alias='DomainSettings')
    HomeEfsFileSystemKmsKeyId: Optional[KmsKeyId] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    SubnetIds: Subnets
    Tags: Optional[TagList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateEndpointConfigInput(BaseModel):
    AsyncInferenceConfig_1: Optional[AsyncInferenceConfig] = Field(
        None, alias='AsyncInferenceConfig'
    )
    DataCaptureConfig_1: Optional[DataCaptureConfig] = Field(
        None, alias='DataCaptureConfig'
    )
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')
    ExplainerConfig_1: Optional[ExplainerConfig] = Field(None, alias='ExplainerConfig')
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    ProductionVariants: ProductionVariantList
    ShadowProductionVariants: Optional[ProductionVariantList] = None
    Tags: Optional[TagList] = None


class CreateInferenceRecommendationsJobRequest(BaseModel):
    InputConfig: RecommendationJobInputConfig
    JobDescription: Optional[RecommendationJobDescription] = None
    JobName: RecommendationJobName
    JobType: RecommendationJobType
    OutputConfig: Optional[RecommendationJobOutputConfig] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingConditions: Optional[RecommendationJobStoppingConditions] = None
    Tags: Optional[TagList] = None


class CreateLabelingJobRequest(BaseModel):
    HumanTaskConfig_1: HumanTaskConfig = Field(..., alias='HumanTaskConfig')
    InputConfig: LabelingJobInputConfig
    LabelAttributeName_1: LabelAttributeName = Field(..., alias='LabelAttributeName')
    LabelCategoryConfigS3Uri: Optional[S3Uri] = None
    LabelingJobAlgorithmsConfig_1: Optional[LabelingJobAlgorithmsConfig] = Field(
        None, alias='LabelingJobAlgorithmsConfig'
    )
    LabelingJobName_1: LabelingJobName = Field(..., alias='LabelingJobName')
    OutputConfig: LabelingJobOutputConfig
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingConditions: Optional[LabelingJobStoppingConditions] = None
    Tags: Optional[TagList] = None


class CreateModelBiasJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName
    JobResources: MonitoringResources
    ModelBiasAppSpecification_1: ModelBiasAppSpecification = Field(
        ..., alias='ModelBiasAppSpecification'
    )
    ModelBiasBaselineConfig_1: Optional[ModelBiasBaselineConfig] = Field(
        None, alias='ModelBiasBaselineConfig'
    )
    ModelBiasJobInput_1: ModelBiasJobInput = Field(..., alias='ModelBiasJobInput')
    ModelBiasJobOutputConfig: MonitoringOutputConfig
    NetworkConfig: Optional[MonitoringNetworkConfig] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[MonitoringStoppingCondition] = None
    Tags: Optional[TagList] = None


class CreateModelExplainabilityJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName
    JobResources: MonitoringResources
    ModelExplainabilityAppSpecification_1: ModelExplainabilityAppSpecification = Field(
        ..., alias='ModelExplainabilityAppSpecification'
    )
    ModelExplainabilityBaselineConfig_1: Optional[ModelExplainabilityBaselineConfig] = (
        Field(None, alias='ModelExplainabilityBaselineConfig')
    )
    ModelExplainabilityJobInput_1: ModelExplainabilityJobInput = Field(
        ..., alias='ModelExplainabilityJobInput'
    )
    ModelExplainabilityJobOutputConfig: MonitoringOutputConfig
    NetworkConfig: Optional[MonitoringNetworkConfig] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[MonitoringStoppingCondition] = None
    Tags: Optional[TagList] = None


class CreateModelPackageInput(BaseModel):
    AdditionalInferenceSpecifications_1: Optional[AdditionalInferenceSpecifications] = (
        Field(None, alias='AdditionalInferenceSpecifications')
    )
    CertifyForMarketplace_1: Optional[CertifyForMarketplace] = Field(
        None, alias='CertifyForMarketplace'
    )
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    CustomerMetadataProperties: Optional[CustomerMetadataMap] = None
    Domain: Optional[String] = None
    DriftCheckBaselines_1: Optional[DriftCheckBaselines] = Field(
        None, alias='DriftCheckBaselines'
    )
    InferenceSpecification_1: Optional[InferenceSpecification] = Field(
        None, alias='InferenceSpecification'
    )
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    ModelApprovalStatus_1: Optional[ModelApprovalStatus] = Field(
        None, alias='ModelApprovalStatus'
    )
    ModelMetrics_1: Optional[ModelMetrics] = Field(None, alias='ModelMetrics')
    ModelPackageDescription: Optional[EntityDescription] = None
    ModelPackageGroupName: Optional[ArnOrName] = None
    ModelPackageName: Optional[EntityName] = None
    SamplePayloadUrl: Optional[S3Uri] = None
    SourceAlgorithmSpecification_1: Optional[SourceAlgorithmSpecification] = Field(
        None, alias='SourceAlgorithmSpecification'
    )
    Tags: Optional[TagList] = None
    Task: Optional[String] = None
    ValidationSpecification: Optional[ModelPackageValidationSpecification] = None


class CreateModelQualityJobDefinitionRequest(BaseModel):
    JobDefinitionName: MonitoringJobDefinitionName
    JobResources: MonitoringResources
    ModelQualityAppSpecification_1: ModelQualityAppSpecification = Field(
        ..., alias='ModelQualityAppSpecification'
    )
    ModelQualityBaselineConfig_1: Optional[ModelQualityBaselineConfig] = Field(
        None, alias='ModelQualityBaselineConfig'
    )
    ModelQualityJobInput_1: ModelQualityJobInput = Field(
        ..., alias='ModelQualityJobInput'
    )
    ModelQualityJobOutputConfig: MonitoringOutputConfig
    NetworkConfig: Optional[MonitoringNetworkConfig] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[MonitoringStoppingCondition] = None
    Tags: Optional[TagList] = None


class CreateProcessingJobRequest(BaseModel):
    AppSpecification_1: AppSpecification = Field(..., alias='AppSpecification')
    Environment: Optional[ProcessingEnvironmentMap] = None
    ExperimentConfig_1: Optional[ExperimentConfig] = Field(
        None, alias='ExperimentConfig'
    )
    NetworkConfig_1: Optional[NetworkConfig] = Field(None, alias='NetworkConfig')
    ProcessingInputs_1: Optional[ProcessingInputs] = Field(
        None, alias='ProcessingInputs'
    )
    ProcessingJobName_1: ProcessingJobName = Field(..., alias='ProcessingJobName')
    ProcessingOutputConfig_1: Optional[ProcessingOutputConfig] = Field(
        None, alias='ProcessingOutputConfig'
    )
    ProcessingResources_1: ProcessingResources = Field(..., alias='ProcessingResources')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[ProcessingStoppingCondition] = None
    Tags: Optional[TagList] = None


class CreateTrainingJobRequest(BaseModel):
    AlgorithmSpecification_1: AlgorithmSpecification = Field(
        ..., alias='AlgorithmSpecification'
    )
    CheckpointConfig_1: Optional[CheckpointConfig] = Field(
        None, alias='CheckpointConfig'
    )
    DebugHookConfig_1: Optional[DebugHookConfig] = Field(None, alias='DebugHookConfig')
    DebugRuleConfigurations_1: Optional[DebugRuleConfigurations] = Field(
        None, alias='DebugRuleConfigurations'
    )
    EnableInterContainerTrafficEncryption: Optional[Boolean] = None
    EnableManagedSpotTraining: Optional[Boolean] = None
    EnableNetworkIsolation: Optional[Boolean] = None
    Environment: Optional[TrainingEnvironmentMap] = None
    ExperimentConfig_1: Optional[ExperimentConfig] = Field(
        None, alias='ExperimentConfig'
    )
    HyperParameters_1: Optional[HyperParameters] = Field(None, alias='HyperParameters')
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    ProfilerConfig_1: Optional[ProfilerConfig] = Field(None, alias='ProfilerConfig')
    ProfilerRuleConfigurations_1: Optional[ProfilerRuleConfigurations] = Field(
        None, alias='ProfilerRuleConfigurations'
    )
    ResourceConfig_1: ResourceConfig = Field(..., alias='ResourceConfig')
    RetryStrategy_1: Optional[RetryStrategy] = Field(None, alias='RetryStrategy')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition_1: StoppingCondition = Field(..., alias='StoppingCondition')
    Tags: Optional[TagList] = None
    TensorBoardOutputConfig_1: Optional[TensorBoardOutputConfig] = Field(
        None, alias='TensorBoardOutputConfig'
    )
    TrainingJobName_1: TrainingJobName = Field(..., alias='TrainingJobName')
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class DescribeAlgorithmOutput(BaseModel):
    AlgorithmArn_1: AlgorithmArn = Field(..., alias='AlgorithmArn')
    AlgorithmDescription: Optional[EntityDescription] = None
    AlgorithmName: EntityName
    AlgorithmStatus_1: AlgorithmStatus = Field(..., alias='AlgorithmStatus')
    AlgorithmStatusDetails_1: AlgorithmStatusDetails = Field(
        ..., alias='AlgorithmStatusDetails'
    )
    CertifyForMarketplace_1: Optional[CertifyForMarketplace] = Field(
        None, alias='CertifyForMarketplace'
    )
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    InferenceSpecification_1: Optional[InferenceSpecification] = Field(
        None, alias='InferenceSpecification'
    )
    ProductId_1: Optional[ProductId] = Field(None, alias='ProductId')
    TrainingSpecification_1: TrainingSpecification = Field(
        ..., alias='TrainingSpecification'
    )
    ValidationSpecification: Optional[AlgorithmValidationSpecification] = None


class DescribeAutoMLJobResponse(BaseModel):
    AutoMLJobArn_1: AutoMLJobArn = Field(..., alias='AutoMLJobArn')
    AutoMLJobArtifacts_1: Optional[AutoMLJobArtifacts] = Field(
        None, alias='AutoMLJobArtifacts'
    )
    AutoMLJobConfig_1: Optional[AutoMLJobConfig] = Field(None, alias='AutoMLJobConfig')
    AutoMLJobName_1: AutoMLJobName = Field(..., alias='AutoMLJobName')
    AutoMLJobObjective_1: Optional[AutoMLJobObjective] = Field(
        None, alias='AutoMLJobObjective'
    )
    AutoMLJobSecondaryStatus_1: AutoMLJobSecondaryStatus = Field(
        ..., alias='AutoMLJobSecondaryStatus'
    )
    AutoMLJobStatus_1: AutoMLJobStatus = Field(..., alias='AutoMLJobStatus')
    BestCandidate: Optional[AutoMLCandidate] = None
    CreationTime: Timestamp
    EndTime: Optional[Timestamp] = None
    FailureReason: Optional[AutoMLFailureReason] = None
    GenerateCandidateDefinitionsOnly_1: Optional[GenerateCandidateDefinitionsOnly] = (
        Field(None, alias='GenerateCandidateDefinitionsOnly')
    )
    InputDataConfig: AutoMLInputDataConfig
    LastModifiedTime: Timestamp
    ModelDeployConfig_1: Optional[ModelDeployConfig] = Field(
        None, alias='ModelDeployConfig'
    )
    ModelDeployResult_1: Optional[ModelDeployResult] = Field(
        None, alias='ModelDeployResult'
    )
    OutputDataConfig: AutoMLOutputDataConfig
    PartialFailureReasons: Optional[AutoMLPartialFailureReasons] = None
    ProblemType_1: Optional[ProblemType] = Field(None, alias='ProblemType')
    ResolvedAttributes_1: Optional[ResolvedAttributes] = Field(
        None, alias='ResolvedAttributes'
    )
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')


class DescribeAutoMLJobV2Response(BaseModel):
    AutoMLJobArn_1: AutoMLJobArn = Field(..., alias='AutoMLJobArn')
    AutoMLJobInputDataConfig_1: AutoMLJobInputDataConfig = Field(
        ..., alias='AutoMLJobInputDataConfig'
    )
    AutoMLJobName_1: AutoMLJobName = Field(..., alias='AutoMLJobName')
    AutoMLJobObjective_1: Optional[AutoMLJobObjective] = Field(
        None, alias='AutoMLJobObjective'
    )
    AutoMLJobSecondaryStatus_1: AutoMLJobSecondaryStatus = Field(
        ..., alias='AutoMLJobSecondaryStatus'
    )
    AutoMLJobStatus_1: AutoMLJobStatus = Field(..., alias='AutoMLJobStatus')
    AutoMLProblemTypeConfig_1: Optional[AutoMLProblemTypeConfig] = Field(
        None, alias='AutoMLProblemTypeConfig'
    )
    BestCandidate: Optional[AutoMLCandidate] = None
    CreationTime: Timestamp
    DataSplitConfig: Optional[AutoMLDataSplitConfig] = None
    EndTime: Optional[Timestamp] = None
    FailureReason: Optional[AutoMLFailureReason] = None
    LastModifiedTime: Timestamp
    ModelDeployConfig_1: Optional[ModelDeployConfig] = Field(
        None, alias='ModelDeployConfig'
    )
    ModelDeployResult_1: Optional[ModelDeployResult] = Field(
        None, alias='ModelDeployResult'
    )
    OutputDataConfig: AutoMLOutputDataConfig
    PartialFailureReasons: Optional[AutoMLPartialFailureReasons] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    SecurityConfig: Optional[AutoMLSecurityConfig] = None


class DescribeDataQualityJobDefinitionResponse(BaseModel):
    CreationTime: Timestamp
    DataQualityAppSpecification_1: DataQualityAppSpecification = Field(
        ..., alias='DataQualityAppSpecification'
    )
    DataQualityBaselineConfig_1: Optional[DataQualityBaselineConfig] = Field(
        None, alias='DataQualityBaselineConfig'
    )
    DataQualityJobInput_1: DataQualityJobInput = Field(..., alias='DataQualityJobInput')
    DataQualityJobOutputConfig: MonitoringOutputConfig
    JobDefinitionArn: MonitoringJobDefinitionArn
    JobDefinitionName: MonitoringJobDefinitionName
    JobResources: MonitoringResources
    NetworkConfig: Optional[MonitoringNetworkConfig] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[MonitoringStoppingCondition] = None


class DescribeDomainResponse(BaseModel):
    AppNetworkAccessType_1: Optional[AppNetworkAccessType] = Field(
        None, alias='AppNetworkAccessType'
    )
    AppSecurityGroupManagement_1: Optional[AppSecurityGroupManagement] = Field(
        None, alias='AppSecurityGroupManagement'
    )
    AuthMode_1: Optional[AuthMode] = Field(None, alias='AuthMode')
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DefaultSpaceSettings_1: Optional[DefaultSpaceSettings] = Field(
        None, alias='DefaultSpaceSettings'
    )
    DefaultUserSettings: Optional[UserSettings] = None
    DomainArn_1: Optional[DomainArn] = Field(None, alias='DomainArn')
    DomainId_1: Optional[DomainId] = Field(None, alias='DomainId')
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    DomainSettings_1: Optional[DomainSettings] = Field(None, alias='DomainSettings')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    HomeEfsFileSystemId: Optional[ResourceId] = None
    HomeEfsFileSystemKmsKeyId: Optional[KmsKeyId] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    LastModifiedTime_1: Optional[LastModifiedTime] = Field(
        None, alias='LastModifiedTime'
    )
    SecurityGroupIdForDomainBoundary: Optional[SecurityGroupId] = None
    SingleSignOnManagedApplicationInstanceId: Optional[String256] = None
    Status: Optional[DomainStatus] = None
    SubnetIds: Optional[Subnets] = None
    Url: Optional[String1024] = None
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class DescribeEndpointConfigOutput(BaseModel):
    AsyncInferenceConfig_1: Optional[AsyncInferenceConfig] = Field(
        None, alias='AsyncInferenceConfig'
    )
    CreationTime: Timestamp
    DataCaptureConfig_1: Optional[DataCaptureConfig] = Field(
        None, alias='DataCaptureConfig'
    )
    EndpointConfigArn_1: EndpointConfigArn = Field(..., alias='EndpointConfigArn')
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')
    ExplainerConfig_1: Optional[ExplainerConfig] = Field(None, alias='ExplainerConfig')
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    ProductionVariants: ProductionVariantList
    ShadowProductionVariants: Optional[ProductionVariantList] = None


class DescribeEndpointOutput(BaseModel):
    AsyncInferenceConfig_1: Optional[AsyncInferenceConfig] = Field(
        None, alias='AsyncInferenceConfig'
    )
    CreationTime: Timestamp
    DataCaptureConfig: Optional[DataCaptureConfigSummary] = None
    EndpointArn_1: EndpointArn = Field(..., alias='EndpointArn')
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    EndpointStatus_1: EndpointStatus = Field(..., alias='EndpointStatus')
    ExplainerConfig_1: Optional[ExplainerConfig] = Field(None, alias='ExplainerConfig')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastDeploymentConfig: Optional[DeploymentConfig] = None
    LastModifiedTime: Timestamp
    PendingDeploymentSummary_1: Optional[PendingDeploymentSummary] = Field(
        None, alias='PendingDeploymentSummary'
    )
    ProductionVariants: Optional[ProductionVariantSummaryList] = None
    ShadowProductionVariants: Optional[ProductionVariantSummaryList] = None


class DescribeInferenceRecommendationsJobResponse(BaseModel):
    CompletionTime: Optional[Timestamp] = None
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    EndpointPerformances_1: Optional[EndpointPerformances] = Field(
        None, alias='EndpointPerformances'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    InferenceRecommendations_1: Optional[InferenceRecommendations] = Field(
        None, alias='InferenceRecommendations'
    )
    InputConfig: RecommendationJobInputConfig
    JobArn: RecommendationJobArn
    JobDescription: Optional[RecommendationJobDescription] = None
    JobName: RecommendationJobName
    JobType: RecommendationJobType
    LastModifiedTime_1: LastModifiedTime = Field(..., alias='LastModifiedTime')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Status: RecommendationJobStatus
    StoppingConditions: Optional[RecommendationJobStoppingConditions] = None


class DescribeLabelingJobResponse(BaseModel):
    CreationTime: Timestamp
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    HumanTaskConfig_1: HumanTaskConfig = Field(..., alias='HumanTaskConfig')
    InputConfig: LabelingJobInputConfig
    JobReferenceCode_1: JobReferenceCode = Field(..., alias='JobReferenceCode')
    LabelAttributeName_1: Optional[LabelAttributeName] = Field(
        None, alias='LabelAttributeName'
    )
    LabelCategoryConfigS3Uri: Optional[S3Uri] = None
    LabelCounters_1: LabelCounters = Field(..., alias='LabelCounters')
    LabelingJobAlgorithmsConfig_1: Optional[LabelingJobAlgorithmsConfig] = Field(
        None, alias='LabelingJobAlgorithmsConfig'
    )
    LabelingJobArn_1: LabelingJobArn = Field(..., alias='LabelingJobArn')
    LabelingJobName_1: LabelingJobName = Field(..., alias='LabelingJobName')
    LabelingJobOutput_1: Optional[LabelingJobOutput] = Field(
        None, alias='LabelingJobOutput'
    )
    LabelingJobStatus_1: LabelingJobStatus = Field(..., alias='LabelingJobStatus')
    LastModifiedTime: Timestamp
    OutputConfig: LabelingJobOutputConfig
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingConditions: Optional[LabelingJobStoppingConditions] = None
    Tags: Optional[TagList] = None


class DescribeModelBiasJobDefinitionResponse(BaseModel):
    CreationTime: Timestamp
    JobDefinitionArn: MonitoringJobDefinitionArn
    JobDefinitionName: MonitoringJobDefinitionName
    JobResources: MonitoringResources
    ModelBiasAppSpecification_1: ModelBiasAppSpecification = Field(
        ..., alias='ModelBiasAppSpecification'
    )
    ModelBiasBaselineConfig_1: Optional[ModelBiasBaselineConfig] = Field(
        None, alias='ModelBiasBaselineConfig'
    )
    ModelBiasJobInput_1: ModelBiasJobInput = Field(..., alias='ModelBiasJobInput')
    ModelBiasJobOutputConfig: MonitoringOutputConfig
    NetworkConfig: Optional[MonitoringNetworkConfig] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[MonitoringStoppingCondition] = None


class DescribeModelExplainabilityJobDefinitionResponse(BaseModel):
    CreationTime: Timestamp
    JobDefinitionArn: MonitoringJobDefinitionArn
    JobDefinitionName: MonitoringJobDefinitionName
    JobResources: MonitoringResources
    ModelExplainabilityAppSpecification_1: ModelExplainabilityAppSpecification = Field(
        ..., alias='ModelExplainabilityAppSpecification'
    )
    ModelExplainabilityBaselineConfig_1: Optional[ModelExplainabilityBaselineConfig] = (
        Field(None, alias='ModelExplainabilityBaselineConfig')
    )
    ModelExplainabilityJobInput_1: ModelExplainabilityJobInput = Field(
        ..., alias='ModelExplainabilityJobInput'
    )
    ModelExplainabilityJobOutputConfig: MonitoringOutputConfig
    NetworkConfig: Optional[MonitoringNetworkConfig] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[MonitoringStoppingCondition] = None


class DescribeModelPackageOutput(BaseModel):
    AdditionalInferenceSpecifications_1: Optional[AdditionalInferenceSpecifications] = (
        Field(None, alias='AdditionalInferenceSpecifications')
    )
    ApprovalDescription_1: Optional[ApprovalDescription] = Field(
        None, alias='ApprovalDescription'
    )
    CertifyForMarketplace_1: Optional[CertifyForMarketplace] = Field(
        None, alias='CertifyForMarketplace'
    )
    CreatedBy: Optional[UserContext] = None
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    CustomerMetadataProperties: Optional[CustomerMetadataMap] = None
    Domain: Optional[String] = None
    DriftCheckBaselines_1: Optional[DriftCheckBaselines] = Field(
        None, alias='DriftCheckBaselines'
    )
    InferenceSpecification_1: Optional[InferenceSpecification] = Field(
        None, alias='InferenceSpecification'
    )
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    ModelApprovalStatus_1: Optional[ModelApprovalStatus] = Field(
        None, alias='ModelApprovalStatus'
    )
    ModelMetrics_1: Optional[ModelMetrics] = Field(None, alias='ModelMetrics')
    ModelPackageArn_1: ModelPackageArn = Field(..., alias='ModelPackageArn')
    ModelPackageDescription: Optional[EntityDescription] = None
    ModelPackageGroupName: Optional[EntityName] = None
    ModelPackageName: EntityName
    ModelPackageStatus_1: ModelPackageStatus = Field(..., alias='ModelPackageStatus')
    ModelPackageStatusDetails_1: ModelPackageStatusDetails = Field(
        ..., alias='ModelPackageStatusDetails'
    )
    ModelPackageVersion_1: Optional[ModelPackageVersion] = Field(
        None, alias='ModelPackageVersion'
    )
    SamplePayloadUrl: Optional[String] = None
    SourceAlgorithmSpecification_1: Optional[SourceAlgorithmSpecification] = Field(
        None, alias='SourceAlgorithmSpecification'
    )
    Task: Optional[String] = None
    ValidationSpecification: Optional[ModelPackageValidationSpecification] = None


class DescribeModelQualityJobDefinitionResponse(BaseModel):
    CreationTime: Timestamp
    JobDefinitionArn: MonitoringJobDefinitionArn
    JobDefinitionName: MonitoringJobDefinitionName
    JobResources: MonitoringResources
    ModelQualityAppSpecification_1: ModelQualityAppSpecification = Field(
        ..., alias='ModelQualityAppSpecification'
    )
    ModelQualityBaselineConfig_1: Optional[ModelQualityBaselineConfig] = Field(
        None, alias='ModelQualityBaselineConfig'
    )
    ModelQualityJobInput_1: ModelQualityJobInput = Field(
        ..., alias='ModelQualityJobInput'
    )
    ModelQualityJobOutputConfig: MonitoringOutputConfig
    NetworkConfig: Optional[MonitoringNetworkConfig] = None
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[MonitoringStoppingCondition] = None


class DescribeProcessingJobResponse(BaseModel):
    AppSpecification_1: AppSpecification = Field(..., alias='AppSpecification')
    AutoMLJobArn_1: Optional[AutoMLJobArn] = Field(None, alias='AutoMLJobArn')
    CreationTime: Timestamp
    Environment: Optional[ProcessingEnvironmentMap] = None
    ExitMessage_1: Optional[ExitMessage] = Field(None, alias='ExitMessage')
    ExperimentConfig_1: Optional[ExperimentConfig] = Field(
        None, alias='ExperimentConfig'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedTime: Optional[Timestamp] = None
    MonitoringScheduleArn_1: Optional[MonitoringScheduleArn] = Field(
        None, alias='MonitoringScheduleArn'
    )
    NetworkConfig_1: Optional[NetworkConfig] = Field(None, alias='NetworkConfig')
    ProcessingEndTime: Optional[Timestamp] = None
    ProcessingInputs_1: Optional[ProcessingInputs] = Field(
        None, alias='ProcessingInputs'
    )
    ProcessingJobArn_1: ProcessingJobArn = Field(..., alias='ProcessingJobArn')
    ProcessingJobName_1: ProcessingJobName = Field(..., alias='ProcessingJobName')
    ProcessingJobStatus_1: ProcessingJobStatus = Field(..., alias='ProcessingJobStatus')
    ProcessingOutputConfig_1: Optional[ProcessingOutputConfig] = Field(
        None, alias='ProcessingOutputConfig'
    )
    ProcessingResources_1: ProcessingResources = Field(..., alias='ProcessingResources')
    ProcessingStartTime: Optional[Timestamp] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    StoppingCondition: Optional[ProcessingStoppingCondition] = None
    TrainingJobArn_1: Optional[TrainingJobArn] = Field(None, alias='TrainingJobArn')


class DescribeTrainingJobResponse(BaseModel):
    AlgorithmSpecification_1: AlgorithmSpecification = Field(
        ..., alias='AlgorithmSpecification'
    )
    AutoMLJobArn_1: Optional[AutoMLJobArn] = Field(None, alias='AutoMLJobArn')
    BillableTimeInSeconds_1: Optional[BillableTimeInSeconds] = Field(
        None, alias='BillableTimeInSeconds'
    )
    CheckpointConfig_1: Optional[CheckpointConfig] = Field(
        None, alias='CheckpointConfig'
    )
    CreationTime: Timestamp
    DebugHookConfig_1: Optional[DebugHookConfig] = Field(None, alias='DebugHookConfig')
    DebugRuleConfigurations_1: Optional[DebugRuleConfigurations] = Field(
        None, alias='DebugRuleConfigurations'
    )
    DebugRuleEvaluationStatuses_1: Optional[DebugRuleEvaluationStatuses] = Field(
        None, alias='DebugRuleEvaluationStatuses'
    )
    EnableInterContainerTrafficEncryption: Optional[Boolean] = None
    EnableManagedSpotTraining: Optional[Boolean] = None
    EnableNetworkIsolation: Optional[Boolean] = None
    Environment: Optional[TrainingEnvironmentMap] = None
    ExperimentConfig_1: Optional[ExperimentConfig] = Field(
        None, alias='ExperimentConfig'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    FinalMetricDataList_1: Optional[FinalMetricDataList] = Field(
        None, alias='FinalMetricDataList'
    )
    HyperParameters_1: Optional[HyperParameters] = Field(None, alias='HyperParameters')
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    LabelingJobArn_1: Optional[LabelingJobArn] = Field(None, alias='LabelingJobArn')
    LastModifiedTime: Optional[Timestamp] = None
    ModelArtifacts_1: ModelArtifacts = Field(..., alias='ModelArtifacts')
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    ProfilerConfig_1: Optional[ProfilerConfig] = Field(None, alias='ProfilerConfig')
    ProfilerRuleConfigurations_1: Optional[ProfilerRuleConfigurations] = Field(
        None, alias='ProfilerRuleConfigurations'
    )
    ProfilerRuleEvaluationStatuses_1: Optional[ProfilerRuleEvaluationStatuses] = Field(
        None, alias='ProfilerRuleEvaluationStatuses'
    )
    ProfilingStatus_1: Optional[ProfilingStatus] = Field(None, alias='ProfilingStatus')
    ResourceConfig_1: ResourceConfig = Field(..., alias='ResourceConfig')
    RetryStrategy_1: Optional[RetryStrategy] = Field(None, alias='RetryStrategy')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    SecondaryStatus_1: SecondaryStatus = Field(..., alias='SecondaryStatus')
    SecondaryStatusTransitions_1: Optional[SecondaryStatusTransitions] = Field(
        None, alias='SecondaryStatusTransitions'
    )
    StoppingCondition_1: StoppingCondition = Field(..., alias='StoppingCondition')
    TensorBoardOutputConfig_1: Optional[TensorBoardOutputConfig] = Field(
        None, alias='TensorBoardOutputConfig'
    )
    TrainingEndTime: Optional[Timestamp] = None
    TrainingJobArn_1: TrainingJobArn = Field(..., alias='TrainingJobArn')
    TrainingJobName_1: TrainingJobName = Field(..., alias='TrainingJobName')
    TrainingJobStatus_1: TrainingJobStatus = Field(..., alias='TrainingJobStatus')
    TrainingStartTime: Optional[Timestamp] = None
    TrainingTimeInSeconds_1: Optional[TrainingTimeInSeconds] = Field(
        None, alias='TrainingTimeInSeconds'
    )
    TuningJobArn: Optional[HyperParameterTuningJobArn] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')
    WarmPoolStatus_1: Optional[WarmPoolStatus] = Field(None, alias='WarmPoolStatus')


class DeviceSummaries(RootModel[List[DeviceSummary]]):
    root: List[DeviceSummary]


class HyperParameterTrainingJobDefinition(BaseModel):
    AlgorithmSpecification: HyperParameterAlgorithmSpecification
    CheckpointConfig_1: Optional[CheckpointConfig] = Field(
        None, alias='CheckpointConfig'
    )
    DefinitionName: Optional[HyperParameterTrainingJobDefinitionName] = None
    EnableInterContainerTrafficEncryption: Optional[Boolean] = None
    EnableManagedSpotTraining: Optional[Boolean] = None
    EnableNetworkIsolation: Optional[Boolean] = None
    Environment: Optional[HyperParameterTrainingJobEnvironmentMap] = None
    HyperParameterRanges: Optional[ParameterRanges] = None
    HyperParameterTuningResourceConfig_1: Optional[
        HyperParameterTuningResourceConfig
    ] = Field(None, alias='HyperParameterTuningResourceConfig')
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    ResourceConfig_1: Optional[ResourceConfig] = Field(None, alias='ResourceConfig')
    RetryStrategy_1: Optional[RetryStrategy] = Field(None, alias='RetryStrategy')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StaticHyperParameters: Optional[HyperParameters] = None
    StoppingCondition_1: StoppingCondition = Field(..., alias='StoppingCondition')
    TuningObjective: Optional[HyperParameterTuningJobObjective] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class HyperParameterTrainingJobDefinitions(
    RootModel[List[HyperParameterTrainingJobDefinition]]
):
    root: List[HyperParameterTrainingJobDefinition] = Field(
        ..., max_length=10, min_length=1
    )


class HyperParameterTuningJobSearchEntity(BaseModel):
    BestTrainingJob: Optional[HyperParameterTrainingJobSummary] = None
    ConsumedResources: Optional[HyperParameterTuningJobConsumedResources] = None
    CreationTime: Optional[Timestamp] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    HyperParameterTuningEndTime: Optional[Timestamp] = None
    HyperParameterTuningJobArn_1: Optional[HyperParameterTuningJobArn] = Field(
        None, alias='HyperParameterTuningJobArn'
    )
    HyperParameterTuningJobConfig_1: Optional[HyperParameterTuningJobConfig] = Field(
        None, alias='HyperParameterTuningJobConfig'
    )
    HyperParameterTuningJobName_1: Optional[HyperParameterTuningJobName] = Field(
        None, alias='HyperParameterTuningJobName'
    )
    HyperParameterTuningJobStatus_1: Optional[HyperParameterTuningJobStatus] = Field(
        None, alias='HyperParameterTuningJobStatus'
    )
    LastModifiedTime: Optional[Timestamp] = None
    ObjectiveStatusCounters_1: Optional[ObjectiveStatusCounters] = Field(
        None, alias='ObjectiveStatusCounters'
    )
    OverallBestTrainingJob: Optional[HyperParameterTrainingJobSummary] = None
    Tags: Optional[TagList] = None
    TrainingJobDefinition: Optional[HyperParameterTrainingJobDefinition] = None
    TrainingJobDefinitions: Optional[HyperParameterTrainingJobDefinitions] = None
    TrainingJobStatusCounters_1: Optional[TrainingJobStatusCounters] = Field(
        None, alias='TrainingJobStatusCounters'
    )
    TuningJobCompletionDetails: Optional[HyperParameterTuningJobCompletionDetails] = (
        None
    )
    WarmStartConfig: Optional[HyperParameterTuningJobWarmStartConfig] = None


class ListCandidatesForAutoMLJobResponse(BaseModel):
    Candidates: AutoMLCandidates
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDevicesResponse(BaseModel):
    DeviceSummaries_1: DeviceSummaries = Field(..., alias='DeviceSummaries')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListPipelineExecutionStepsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PipelineExecutionSteps: Optional[PipelineExecutionStepList] = None


class ListTrialComponentsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TrialComponentSummaries_1: Optional[TrialComponentSummaries] = Field(
        None, alias='TrialComponentSummaries'
    )


class MonitoringJobDefinition(BaseModel):
    BaselineConfig: Optional[MonitoringBaselineConfig] = None
    Environment: Optional[MonitoringEnvironmentMap] = None
    MonitoringAppSpecification_1: MonitoringAppSpecification = Field(
        ..., alias='MonitoringAppSpecification'
    )
    MonitoringInputs_1: MonitoringInputs = Field(..., alias='MonitoringInputs')
    MonitoringOutputConfig_1: MonitoringOutputConfig = Field(
        ..., alias='MonitoringOutputConfig'
    )
    MonitoringResources_1: MonitoringResources = Field(..., alias='MonitoringResources')
    NetworkConfig_1: Optional[NetworkConfig] = Field(None, alias='NetworkConfig')
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    StoppingCondition: Optional[MonitoringStoppingCondition] = None


class MonitoringScheduleConfig(BaseModel):
    MonitoringJobDefinition_1: Optional[MonitoringJobDefinition] = Field(
        None, alias='MonitoringJobDefinition'
    )
    MonitoringJobDefinitionName_1: Optional[MonitoringJobDefinitionName] = Field(
        None, alias='MonitoringJobDefinitionName'
    )
    MonitoringType_1: Optional[MonitoringType] = Field(None, alias='MonitoringType')
    ScheduleConfig_1: Optional[ScheduleConfig] = Field(None, alias='ScheduleConfig')


class ProcessingJob(BaseModel):
    AppSpecification_1: Optional[AppSpecification] = Field(
        None, alias='AppSpecification'
    )
    AutoMLJobArn_1: Optional[AutoMLJobArn] = Field(None, alias='AutoMLJobArn')
    CreationTime: Optional[Timestamp] = None
    Environment: Optional[ProcessingEnvironmentMap] = None
    ExitMessage_1: Optional[ExitMessage] = Field(None, alias='ExitMessage')
    ExperimentConfig_1: Optional[ExperimentConfig] = Field(
        None, alias='ExperimentConfig'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedTime: Optional[Timestamp] = None
    MonitoringScheduleArn_1: Optional[MonitoringScheduleArn] = Field(
        None, alias='MonitoringScheduleArn'
    )
    NetworkConfig_1: Optional[NetworkConfig] = Field(None, alias='NetworkConfig')
    ProcessingEndTime: Optional[Timestamp] = None
    ProcessingInputs_1: Optional[ProcessingInputs] = Field(
        None, alias='ProcessingInputs'
    )
    ProcessingJobArn_1: Optional[ProcessingJobArn] = Field(
        None, alias='ProcessingJobArn'
    )
    ProcessingJobName_1: Optional[ProcessingJobName] = Field(
        None, alias='ProcessingJobName'
    )
    ProcessingJobStatus_1: Optional[ProcessingJobStatus] = Field(
        None, alias='ProcessingJobStatus'
    )
    ProcessingOutputConfig_1: Optional[ProcessingOutputConfig] = Field(
        None, alias='ProcessingOutputConfig'
    )
    ProcessingResources_1: Optional[ProcessingResources] = Field(
        None, alias='ProcessingResources'
    )
    ProcessingStartTime: Optional[Timestamp] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    StoppingCondition: Optional[ProcessingStoppingCondition] = None
    Tags: Optional[TagList] = None
    TrainingJobArn_1: Optional[TrainingJobArn] = Field(None, alias='TrainingJobArn')


class Trial(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    DisplayName: Optional[ExperimentEntityName] = None
    ExperimentName: Optional[ExperimentEntityName] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    Source: Optional[TrialSource] = None
    Tags: Optional[TagList] = None
    TrialArn_1: Optional[TrialArn] = Field(None, alias='TrialArn')
    TrialComponentSummaries: Optional[TrialComponentSimpleSummaries] = None
    TrialName: Optional[ExperimentEntityName] = None


class TrialComponentSourceDetail(BaseModel):
    ProcessingJob_1: Optional[ProcessingJob] = Field(None, alias='ProcessingJob')
    SourceArn: Optional[TrialComponentSourceArn] = None
    TrainingJob_1: Optional[TrainingJob] = Field(None, alias='TrainingJob')
    TransformJob_1: Optional[TransformJob] = Field(None, alias='TransformJob')


class UpdateMonitoringScheduleRequest(BaseModel):
    MonitoringScheduleConfig_1: MonitoringScheduleConfig = Field(
        ..., alias='MonitoringScheduleConfig'
    )
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )


class CreateHyperParameterTuningJobRequest(BaseModel):
    HyperParameterTuningJobConfig_1: HyperParameterTuningJobConfig = Field(
        ..., alias='HyperParameterTuningJobConfig'
    )
    HyperParameterTuningJobName_1: HyperParameterTuningJobName = Field(
        ..., alias='HyperParameterTuningJobName'
    )
    Tags: Optional[TagList] = None
    TrainingJobDefinition: Optional[HyperParameterTrainingJobDefinition] = None
    TrainingJobDefinitions: Optional[HyperParameterTrainingJobDefinitions] = None
    WarmStartConfig: Optional[HyperParameterTuningJobWarmStartConfig] = None


class CreateMonitoringScheduleRequest(BaseModel):
    MonitoringScheduleConfig_1: MonitoringScheduleConfig = Field(
        ..., alias='MonitoringScheduleConfig'
    )
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )
    Tags: Optional[TagList] = None


class DescribeHyperParameterTuningJobResponse(BaseModel):
    BestTrainingJob: Optional[HyperParameterTrainingJobSummary] = None
    ConsumedResources: Optional[HyperParameterTuningJobConsumedResources] = None
    CreationTime: Timestamp
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    HyperParameterTuningEndTime: Optional[Timestamp] = None
    HyperParameterTuningJobArn_1: HyperParameterTuningJobArn = Field(
        ..., alias='HyperParameterTuningJobArn'
    )
    HyperParameterTuningJobConfig_1: HyperParameterTuningJobConfig = Field(
        ..., alias='HyperParameterTuningJobConfig'
    )
    HyperParameterTuningJobName_1: HyperParameterTuningJobName = Field(
        ..., alias='HyperParameterTuningJobName'
    )
    HyperParameterTuningJobStatus_1: HyperParameterTuningJobStatus = Field(
        ..., alias='HyperParameterTuningJobStatus'
    )
    LastModifiedTime: Optional[Timestamp] = None
    ObjectiveStatusCounters_1: ObjectiveStatusCounters = Field(
        ..., alias='ObjectiveStatusCounters'
    )
    OverallBestTrainingJob: Optional[HyperParameterTrainingJobSummary] = None
    TrainingJobDefinition: Optional[HyperParameterTrainingJobDefinition] = None
    TrainingJobDefinitions: Optional[HyperParameterTrainingJobDefinitions] = None
    TrainingJobStatusCounters_1: TrainingJobStatusCounters = Field(
        ..., alias='TrainingJobStatusCounters'
    )
    TuningJobCompletionDetails: Optional[HyperParameterTuningJobCompletionDetails] = (
        None
    )
    WarmStartConfig: Optional[HyperParameterTuningJobWarmStartConfig] = None


class DescribeMonitoringScheduleResponse(BaseModel):
    CreationTime: Timestamp
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedTime: Timestamp
    LastMonitoringExecutionSummary: Optional[MonitoringExecutionSummary] = None
    MonitoringScheduleArn_1: MonitoringScheduleArn = Field(
        ..., alias='MonitoringScheduleArn'
    )
    MonitoringScheduleConfig_1: MonitoringScheduleConfig = Field(
        ..., alias='MonitoringScheduleConfig'
    )
    MonitoringScheduleName_1: MonitoringScheduleName = Field(
        ..., alias='MonitoringScheduleName'
    )
    MonitoringScheduleStatus: ScheduleStatus
    MonitoringType_1: Optional[MonitoringType] = Field(None, alias='MonitoringType')


class ModelDashboardMonitoringSchedule(BaseModel):
    CreationTime: Optional[Timestamp] = None
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedTime: Optional[Timestamp] = None
    LastMonitoringExecutionSummary: Optional[MonitoringExecutionSummary] = None
    MonitoringAlertSummaries: Optional[MonitoringAlertSummaryList] = None
    MonitoringScheduleArn_1: Optional[MonitoringScheduleArn] = Field(
        None, alias='MonitoringScheduleArn'
    )
    MonitoringScheduleConfig_1: Optional[MonitoringScheduleConfig] = Field(
        None, alias='MonitoringScheduleConfig'
    )
    MonitoringScheduleName_1: Optional[MonitoringScheduleName] = Field(
        None, alias='MonitoringScheduleName'
    )
    MonitoringScheduleStatus: Optional[ScheduleStatus] = None
    MonitoringType_1: Optional[MonitoringType] = Field(None, alias='MonitoringType')


class ModelDashboardMonitoringSchedules(
    RootModel[List[ModelDashboardMonitoringSchedule]]
):
    root: List[ModelDashboardMonitoringSchedule]


class MonitoringSchedule(BaseModel):
    CreationTime: Optional[Timestamp] = None
    EndpointName_1: Optional[EndpointName] = Field(None, alias='EndpointName')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedTime: Optional[Timestamp] = None
    LastMonitoringExecutionSummary: Optional[MonitoringExecutionSummary] = None
    MonitoringScheduleArn_1: Optional[MonitoringScheduleArn] = Field(
        None, alias='MonitoringScheduleArn'
    )
    MonitoringScheduleConfig_1: Optional[MonitoringScheduleConfig] = Field(
        None, alias='MonitoringScheduleConfig'
    )
    MonitoringScheduleName_1: Optional[MonitoringScheduleName] = Field(
        None, alias='MonitoringScheduleName'
    )
    MonitoringScheduleStatus: Optional[ScheduleStatus] = None
    MonitoringType_1: Optional[MonitoringType] = Field(None, alias='MonitoringType')
    Tags: Optional[TagList] = None


class MonitoringScheduleList(RootModel[List[MonitoringSchedule]]):
    root: List[MonitoringSchedule]


class TrialComponent(BaseModel):
    CreatedBy: Optional[UserContext] = None
    CreationTime: Optional[Timestamp] = None
    DisplayName: Optional[ExperimentEntityName] = None
    EndTime: Optional[Timestamp] = None
    InputArtifacts: Optional[TrialComponentArtifacts] = None
    LastModifiedBy: Optional[UserContext] = None
    LastModifiedTime: Optional[Timestamp] = None
    LineageGroupArn_1: Optional[LineageGroupArn] = Field(None, alias='LineageGroupArn')
    MetadataProperties_1: Optional[MetadataProperties] = Field(
        None, alias='MetadataProperties'
    )
    Metrics: Optional[TrialComponentMetricSummaries] = None
    OutputArtifacts: Optional[TrialComponentArtifacts] = None
    Parameters: Optional[TrialComponentParameters] = None
    Parents_1: Optional[Parents] = Field(None, alias='Parents')
    RunName: Optional[ExperimentEntityName] = None
    Source: Optional[TrialComponentSource] = None
    SourceDetail: Optional[TrialComponentSourceDetail] = None
    StartTime: Optional[Timestamp] = None
    Status: Optional[TrialComponentStatus] = None
    Tags: Optional[TagList] = None
    TrialComponentArn_1: Optional[TrialComponentArn] = Field(
        None, alias='TrialComponentArn'
    )
    TrialComponentName: Optional[ExperimentEntityName] = None


class Endpoint(BaseModel):
    CreationTime: Timestamp
    DataCaptureConfig: Optional[DataCaptureConfigSummary] = None
    EndpointArn_1: EndpointArn = Field(..., alias='EndpointArn')
    EndpointConfigName_1: EndpointConfigName = Field(..., alias='EndpointConfigName')
    EndpointName_1: EndpointName = Field(..., alias='EndpointName')
    EndpointStatus_1: EndpointStatus = Field(..., alias='EndpointStatus')
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastModifiedTime: Timestamp
    MonitoringSchedules: Optional[MonitoringScheduleList] = None
    ProductionVariants: Optional[ProductionVariantSummaryList] = None
    ShadowProductionVariants: Optional[ProductionVariantSummaryList] = None
    Tags: Optional[TagList] = None


class ModelDashboardModel(BaseModel):
    Endpoints: Optional[ModelDashboardEndpoints] = None
    LastBatchTransformJob: Optional[TransformJob] = None
    Model_1: Optional[Model] = Field(None, alias='Model')
    ModelCard: Optional[ModelDashboardModelCard] = None
    MonitoringSchedules: Optional[ModelDashboardMonitoringSchedules] = None


class SearchRecord(BaseModel):
    Endpoint_1: Optional[Endpoint] = Field(None, alias='Endpoint')
    Experiment_1: Optional[Experiment] = Field(None, alias='Experiment')
    FeatureGroup_1: Optional[FeatureGroup] = Field(None, alias='FeatureGroup')
    FeatureMetadata_1: Optional[FeatureMetadata] = Field(None, alias='FeatureMetadata')
    HyperParameterTuningJob: Optional[HyperParameterTuningJobSearchEntity] = None
    Model: Optional[ModelDashboardModel] = None
    ModelCard_1: Optional[ModelCard] = Field(None, alias='ModelCard')
    ModelPackage_1: Optional[ModelPackage] = Field(None, alias='ModelPackage')
    ModelPackageGroup_1: Optional[ModelPackageGroup] = Field(
        None, alias='ModelPackageGroup'
    )
    Pipeline_1: Optional[Pipeline] = Field(None, alias='Pipeline')
    PipelineExecution_1: Optional[PipelineExecution] = Field(
        None, alias='PipelineExecution'
    )
    Project_1: Optional[Project] = Field(None, alias='Project')
    TrainingJob_1: Optional[TrainingJob] = Field(None, alias='TrainingJob')
    Trial_1: Optional[Trial] = Field(None, alias='Trial')
    TrialComponent_1: Optional[TrialComponent] = Field(None, alias='TrialComponent')


class SearchResultsList(RootModel[List[SearchRecord]]):
    root: List[SearchRecord]


class SearchResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Results: Optional[SearchResultsList] = None


class SearchExpression(BaseModel):
    Filters: Optional[FilterList] = None
    NestedFilters: Optional[NestedFiltersList] = None
    Operator: Optional[BooleanOperator] = None
    SubExpressions: Optional[SearchExpressionList] = None


class SearchExpressionList(RootModel[List[SearchExpression]]):
    root: List[SearchExpression] = Field(..., max_length=20, min_length=1)


class SearchRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Resource: ResourceType
    SearchExpression_1: Optional[SearchExpression] = Field(
        None, alias='SearchExpression'
    )
    SortBy: Optional[ResourcePropertyName] = None
    SortOrder: Optional[SearchSortOrder] = None


SearchExpression.model_rebuild()
